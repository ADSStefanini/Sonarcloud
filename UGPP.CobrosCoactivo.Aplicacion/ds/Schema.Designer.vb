'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Schema"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Schema
    Inherits Global.System.Data.DataSet
    
    Private tableProcesoExpediente As ProcesoExpedienteDataTable
    
    Private tablePREDIOS3 As PREDIOS3DataTable
    
    Private tablePERSONAS As PERSONASDataTable
    
    Private tableMasivos_Pendientes As Masivos_PendientesDataTable
    
    Private tableMasivos_Pendientes_form As Masivos_Pendientes_formDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ProcesoExpediente")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoExpedienteDataTable(ds.Tables("ProcesoExpediente")))
            End If
            If (Not (ds.Tables("PREDIOS3")) Is Nothing) Then
                MyBase.Tables.Add(New PREDIOS3DataTable(ds.Tables("PREDIOS3")))
            End If
            If (Not (ds.Tables("PERSONAS")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONASDataTable(ds.Tables("PERSONAS")))
            End If
            If (Not (ds.Tables("Masivos_Pendientes")) Is Nothing) Then
                MyBase.Tables.Add(New Masivos_PendientesDataTable(ds.Tables("Masivos_Pendientes")))
            End If
            If (Not (ds.Tables("Masivos_Pendientes_form")) Is Nothing) Then
                MyBase.Tables.Add(New Masivos_Pendientes_formDataTable(ds.Tables("Masivos_Pendientes_form")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcesoExpediente() As ProcesoExpedienteDataTable
        Get
            Return Me.tableProcesoExpediente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PREDIOS3() As PREDIOS3DataTable
        Get
            Return Me.tablePREDIOS3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PERSONAS() As PERSONASDataTable
        Get
            Return Me.tablePERSONAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Masivos_Pendientes() As Masivos_PendientesDataTable
        Get
            Return Me.tableMasivos_Pendientes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Masivos_Pendientes_form() As Masivos_Pendientes_formDataTable
        Get
            Return Me.tableMasivos_Pendientes_form
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Schema = CType(MyBase.Clone,Schema)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ProcesoExpediente")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoExpedienteDataTable(ds.Tables("ProcesoExpediente")))
            End If
            If (Not (ds.Tables("PREDIOS3")) Is Nothing) Then
                MyBase.Tables.Add(New PREDIOS3DataTable(ds.Tables("PREDIOS3")))
            End If
            If (Not (ds.Tables("PERSONAS")) Is Nothing) Then
                MyBase.Tables.Add(New PERSONASDataTable(ds.Tables("PERSONAS")))
            End If
            If (Not (ds.Tables("Masivos_Pendientes")) Is Nothing) Then
                MyBase.Tables.Add(New Masivos_PendientesDataTable(ds.Tables("Masivos_Pendientes")))
            End If
            If (Not (ds.Tables("Masivos_Pendientes_form")) Is Nothing) Then
                MyBase.Tables.Add(New Masivos_Pendientes_formDataTable(ds.Tables("Masivos_Pendientes_form")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProcesoExpediente = CType(MyBase.Tables("ProcesoExpediente"),ProcesoExpedienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcesoExpediente) Is Nothing) Then
                Me.tableProcesoExpediente.InitVars
            End If
        End If
        Me.tablePREDIOS3 = CType(MyBase.Tables("PREDIOS3"),PREDIOS3DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePREDIOS3) Is Nothing) Then
                Me.tablePREDIOS3.InitVars
            End If
        End If
        Me.tablePERSONAS = CType(MyBase.Tables("PERSONAS"),PERSONASDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePERSONAS) Is Nothing) Then
                Me.tablePERSONAS.InitVars
            End If
        End If
        Me.tableMasivos_Pendientes = CType(MyBase.Tables("Masivos_Pendientes"),Masivos_PendientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasivos_Pendientes) Is Nothing) Then
                Me.tableMasivos_Pendientes.InitVars
            End If
        End If
        Me.tableMasivos_Pendientes_form = CType(MyBase.Tables("Masivos_Pendientes_form"),Masivos_Pendientes_formDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMasivos_Pendientes_form) Is Nothing) Then
                Me.tableMasivos_Pendientes_form.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Schema"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Schema.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProcesoExpediente = New ProcesoExpedienteDataTable
        MyBase.Tables.Add(Me.tableProcesoExpediente)
        Me.tablePREDIOS3 = New PREDIOS3DataTable
        MyBase.Tables.Add(Me.tablePREDIOS3)
        Me.tablePERSONAS = New PERSONASDataTable
        MyBase.Tables.Add(Me.tablePERSONAS)
        Me.tableMasivos_Pendientes = New Masivos_PendientesDataTable
        MyBase.Tables.Add(Me.tableMasivos_Pendientes)
        Me.tableMasivos_Pendientes_form = New Masivos_Pendientes_formDataTable
        MyBase.Tables.Add(Me.tableMasivos_Pendientes_form)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcesoExpediente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePREDIOS3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePERSONAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasivos_Pendientes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMasivos_Pendientes_form() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Schema = New Schema
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ProcesoExpedienteRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcesoExpedienteRowChangeEvent)
    
    Public Delegate Sub PREDIOS3RowChangeEventHandler(ByVal sender As Object, ByVal e As PREDIOS3RowChangeEvent)
    
    Public Delegate Sub PERSONASRowChangeEventHandler(ByVal sender As Object, ByVal e As PERSONASRowChangeEvent)
    
    Public Delegate Sub Masivos_PendientesRowChangeEventHandler(ByVal sender As Object, ByVal e As Masivos_PendientesRowChangeEvent)
    
    Public Delegate Sub Masivos_Pendientes_formRowChangeEventHandler(ByVal sender As Object, ByVal e As Masivos_Pendientes_formRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcesoExpedienteDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProcesoExpedienteRow)
        
        Private columnACTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnFECHA_R As Global.System.Data.DataColumn
        
        Private columnFECHA_P As Global.System.Data.DataColumn
        
        Private columnDIAS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcesoExpediente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcesoExpedienteRow
            Get
                Return CType(Me.Rows(index),ProcesoExpedienteRow)
            End Get
        End Property
        
        Public Event ProcesoExpedienteRowChanging As ProcesoExpedienteRowChangeEventHandler
        
        Public Event ProcesoExpedienteRowChanged As ProcesoExpedienteRowChangeEventHandler
        
        Public Event ProcesoExpedienteRowDeleting As ProcesoExpedienteRowChangeEventHandler
        
        Public Event ProcesoExpedienteRowDeleted As ProcesoExpedienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcesoExpedienteRow(ByVal row As ProcesoExpedienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcesoExpedienteRow(ByVal ACTO As String, ByVal DESCRIPCION As String, ByVal FECHA_R As String, ByVal FECHA_P As String, ByVal DIAS As String) As ProcesoExpedienteRow
            Dim rowProcesoExpedienteRow As ProcesoExpedienteRow = CType(Me.NewRow,ProcesoExpedienteRow)
            Dim columnValuesArray() As Object = New Object() {ACTO, DESCRIPCION, FECHA_R, FECHA_P, DIAS}
            rowProcesoExpedienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcesoExpedienteRow)
            Return rowProcesoExpedienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcesoExpedienteDataTable = CType(MyBase.Clone,ProcesoExpedienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcesoExpedienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACTO = MyBase.Columns("ACTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnFECHA_R = MyBase.Columns("FECHA_R")
            Me.columnFECHA_P = MyBase.Columns("FECHA_P")
            Me.columnDIAS = MyBase.Columns("DIAS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACTO = New Global.System.Data.DataColumn("ACTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnFECHA_R = New Global.System.Data.DataColumn("FECHA_R", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_R)
            Me.columnFECHA_P = New Global.System.Data.DataColumn("FECHA_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_P)
            Me.columnDIAS = New Global.System.Data.DataColumn("DIAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIAS)
            Me.columnACTO.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcesoExpedienteRow() As ProcesoExpedienteRow
            Return CType(Me.NewRow,ProcesoExpedienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcesoExpedienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcesoExpedienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcesoExpedienteRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowChanged(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcesoExpedienteRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowChanging(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcesoExpedienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowDeleted(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcesoExpedienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowDeleting(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcesoExpedienteRow(ByVal row As ProcesoExpedienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Schema = New Schema
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcesoExpedienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PREDIOS3DataTable
        Inherits Global.System.Data.TypedTableBase(Of PREDIOS3Row)
        
        Private columnMunCod As Global.System.Data.DataColumn
        
        Private columnPreNum As Global.System.Data.DataColumn
        
        Private columnPrsCod As Global.System.Data.DataColumn
        
        Private columnPreEstPer As Global.System.Data.DataColumn
        
        Private columnPrePrsDoc As Global.System.Data.DataColumn
        
        Private columnPrePrsNom As Global.System.Data.DataColumn
        
        Private columnPreConec As Global.System.Data.DataColumn
        
        Private columnPrenom1 As Global.System.Data.DataColumn
        
        Private columnPrenom2 As Global.System.Data.DataColumn
        
        Private columnPreApl1 As Global.System.Data.DataColumn
        
        Private columnPreApl2 As Global.System.Data.DataColumn
        
        Private columnPrePrsCru As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PREDIOS3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MunCodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMunCod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsCodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsCod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreEstPerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreEstPer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreConecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreConec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Prenom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrenom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Prenom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrenom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreApl1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreApl1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreApl2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreApl2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsCruColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsCru
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PREDIOS3Row
            Get
                Return CType(Me.Rows(index),PREDIOS3Row)
            End Get
        End Property
        
        Public Event PREDIOS3RowChanging As PREDIOS3RowChangeEventHandler
        
        Public Event PREDIOS3RowChanged As PREDIOS3RowChangeEventHandler
        
        Public Event PREDIOS3RowDeleting As PREDIOS3RowChangeEventHandler
        
        Public Event PREDIOS3RowDeleted As PREDIOS3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPREDIOS3Row(ByVal row As PREDIOS3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPREDIOS3Row(ByVal MunCod As Short, ByVal PreNum As String, ByVal PrsCod As Integer, ByVal PreEstPer As Short, ByVal PrePrsDoc As String, ByVal PrePrsNom As String, ByVal PreConec As String, ByVal Prenom1 As String, ByVal Prenom2 As String, ByVal PreApl1 As String, ByVal PreApl2 As String, ByVal PrePrsCru As Short) As PREDIOS3Row
            Dim rowPREDIOS3Row As PREDIOS3Row = CType(Me.NewRow,PREDIOS3Row)
            Dim columnValuesArray() As Object = New Object() {MunCod, PreNum, PrsCod, PreEstPer, PrePrsDoc, PrePrsNom, PreConec, Prenom1, Prenom2, PreApl1, PreApl2, PrePrsCru}
            rowPREDIOS3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPREDIOS3Row)
            Return rowPREDIOS3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMunCodPreNumPrsCod(ByVal MunCod As Short, ByVal PreNum As String, ByVal PrsCod As Integer) As PREDIOS3Row
            Return CType(Me.Rows.Find(New Object() {MunCod, PreNum, PrsCod}),PREDIOS3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PREDIOS3DataTable = CType(MyBase.Clone,PREDIOS3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PREDIOS3DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMunCod = MyBase.Columns("MunCod")
            Me.columnPreNum = MyBase.Columns("PreNum")
            Me.columnPrsCod = MyBase.Columns("PrsCod")
            Me.columnPreEstPer = MyBase.Columns("PreEstPer")
            Me.columnPrePrsDoc = MyBase.Columns("PrePrsDoc")
            Me.columnPrePrsNom = MyBase.Columns("PrePrsNom")
            Me.columnPreConec = MyBase.Columns("PreConec")
            Me.columnPrenom1 = MyBase.Columns("Prenom1")
            Me.columnPrenom2 = MyBase.Columns("Prenom2")
            Me.columnPreApl1 = MyBase.Columns("PreApl1")
            Me.columnPreApl2 = MyBase.Columns("PreApl2")
            Me.columnPrePrsCru = MyBase.Columns("PrePrsCru")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMunCod = New Global.System.Data.DataColumn("MunCod", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMunCod)
            Me.columnPreNum = New Global.System.Data.DataColumn("PreNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreNum)
            Me.columnPrsCod = New Global.System.Data.DataColumn("PrsCod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsCod)
            Me.columnPreEstPer = New Global.System.Data.DataColumn("PreEstPer", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreEstPer)
            Me.columnPrePrsDoc = New Global.System.Data.DataColumn("PrePrsDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePrsDoc)
            Me.columnPrePrsNom = New Global.System.Data.DataColumn("PrePrsNom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePrsNom)
            Me.columnPreConec = New Global.System.Data.DataColumn("PreConec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreConec)
            Me.columnPrenom1 = New Global.System.Data.DataColumn("Prenom1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrenom1)
            Me.columnPrenom2 = New Global.System.Data.DataColumn("Prenom2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrenom2)
            Me.columnPreApl1 = New Global.System.Data.DataColumn("PreApl1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreApl1)
            Me.columnPreApl2 = New Global.System.Data.DataColumn("PreApl2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreApl2)
            Me.columnPrePrsCru = New Global.System.Data.DataColumn("PrePrsCru", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePrsCru)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMunCod, Me.columnPreNum, Me.columnPrsCod}, true))
            Me.columnMunCod.AllowDBNull = false
            Me.columnPreNum.AllowDBNull = false
            Me.columnPreNum.MaxLength = 15
            Me.columnPrsCod.AllowDBNull = false
            Me.columnPrePrsDoc.MaxLength = 12
            Me.columnPrePrsNom.MaxLength = 50
            Me.columnPreConec.MaxLength = 2
            Me.columnPrenom1.MaxLength = 25
            Me.columnPrenom2.MaxLength = 25
            Me.columnPreApl1.MaxLength = 25
            Me.columnPreApl2.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPREDIOS3Row() As PREDIOS3Row
            Return CType(Me.NewRow,PREDIOS3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PREDIOS3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PREDIOS3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PREDIOS3RowChangedEvent) Is Nothing) Then
                RaiseEvent PREDIOS3RowChanged(Me, New PREDIOS3RowChangeEvent(CType(e.Row,PREDIOS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PREDIOS3RowChangingEvent) Is Nothing) Then
                RaiseEvent PREDIOS3RowChanging(Me, New PREDIOS3RowChangeEvent(CType(e.Row,PREDIOS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PREDIOS3RowDeletedEvent) Is Nothing) Then
                RaiseEvent PREDIOS3RowDeleted(Me, New PREDIOS3RowChangeEvent(CType(e.Row,PREDIOS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PREDIOS3RowDeletingEvent) Is Nothing) Then
                RaiseEvent PREDIOS3RowDeleting(Me, New PREDIOS3RowChangeEvent(CType(e.Row,PREDIOS3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePREDIOS3Row(ByVal row As PREDIOS3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Schema = New Schema
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PREDIOS3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PERSONASDataTable
        Inherits Global.System.Data.TypedTableBase(Of PERSONASRow)
        
        Private columnPrsCod As Global.System.Data.DataColumn
        
        Private columnPrsDoc As Global.System.Data.DataColumn
        
        Private columnPrsTipDoc As Global.System.Data.DataColumn
        
        Private columnPrsNom As Global.System.Data.DataColumn
        
        Private columnPrsTel As Global.System.Data.DataColumn
        
        Private columnPrsEma As Global.System.Data.DataColumn
        
        Private columnPrsResTip As Global.System.Data.DataColumn
        
        Private columnPrsResVig As Global.System.Data.DataColumn
        
        Private columnPrsResNum As Global.System.Data.DataColumn
        
        Private columnPrsConec As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PERSONAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsCodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsCod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsTipDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsTipDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsTelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsTel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsEmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsEma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsResTipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsResTip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsResVigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsResVig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsResNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsResNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrsConecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrsConec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PERSONASRow
            Get
                Return CType(Me.Rows(index),PERSONASRow)
            End Get
        End Property
        
        Public Event PERSONASRowChanging As PERSONASRowChangeEventHandler
        
        Public Event PERSONASRowChanged As PERSONASRowChangeEventHandler
        
        Public Event PERSONASRowDeleting As PERSONASRowChangeEventHandler
        
        Public Event PERSONASRowDeleted As PERSONASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPERSONASRow(ByVal row As PERSONASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPERSONASRow(ByVal PrsCod As Integer, ByVal PrsDoc As String, ByVal PrsTipDoc As String, ByVal PrsNom As String, ByVal PrsTel As String, ByVal PrsEma As String, ByVal PrsResTip As String, ByVal PrsResVig As Short, ByVal PrsResNum As String, ByVal PrsConec As String) As PERSONASRow
            Dim rowPERSONASRow As PERSONASRow = CType(Me.NewRow,PERSONASRow)
            Dim columnValuesArray() As Object = New Object() {PrsCod, PrsDoc, PrsTipDoc, PrsNom, PrsTel, PrsEma, PrsResTip, PrsResVig, PrsResNum, PrsConec}
            rowPERSONASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPERSONASRow)
            Return rowPERSONASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPrsCod(ByVal PrsCod As Integer) As PERSONASRow
            Return CType(Me.Rows.Find(New Object() {PrsCod}),PERSONASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PERSONASDataTable = CType(MyBase.Clone,PERSONASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PERSONASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPrsCod = MyBase.Columns("PrsCod")
            Me.columnPrsDoc = MyBase.Columns("PrsDoc")
            Me.columnPrsTipDoc = MyBase.Columns("PrsTipDoc")
            Me.columnPrsNom = MyBase.Columns("PrsNom")
            Me.columnPrsTel = MyBase.Columns("PrsTel")
            Me.columnPrsEma = MyBase.Columns("PrsEma")
            Me.columnPrsResTip = MyBase.Columns("PrsResTip")
            Me.columnPrsResVig = MyBase.Columns("PrsResVig")
            Me.columnPrsResNum = MyBase.Columns("PrsResNum")
            Me.columnPrsConec = MyBase.Columns("PrsConec")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPrsCod = New Global.System.Data.DataColumn("PrsCod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsCod)
            Me.columnPrsDoc = New Global.System.Data.DataColumn("PrsDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsDoc)
            Me.columnPrsTipDoc = New Global.System.Data.DataColumn("PrsTipDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsTipDoc)
            Me.columnPrsNom = New Global.System.Data.DataColumn("PrsNom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsNom)
            Me.columnPrsTel = New Global.System.Data.DataColumn("PrsTel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsTel)
            Me.columnPrsEma = New Global.System.Data.DataColumn("PrsEma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsEma)
            Me.columnPrsResTip = New Global.System.Data.DataColumn("PrsResTip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsResTip)
            Me.columnPrsResVig = New Global.System.Data.DataColumn("PrsResVig", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsResVig)
            Me.columnPrsResNum = New Global.System.Data.DataColumn("PrsResNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsResNum)
            Me.columnPrsConec = New Global.System.Data.DataColumn("PrsConec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrsConec)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPrsCod}, true))
            Me.columnPrsCod.AllowDBNull = false
            Me.columnPrsCod.Unique = true
            Me.columnPrsDoc.MaxLength = 12
            Me.columnPrsTipDoc.MaxLength = 1
            Me.columnPrsNom.MaxLength = 50
            Me.columnPrsTel.MaxLength = 12
            Me.columnPrsEma.MaxLength = 25
            Me.columnPrsResTip.MaxLength = 3
            Me.columnPrsResNum.MaxLength = 15
            Me.columnPrsConec.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPERSONASRow() As PERSONASRow
            Return CType(Me.NewRow,PERSONASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PERSONASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PERSONASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PERSONASRowChangedEvent) Is Nothing) Then
                RaiseEvent PERSONASRowChanged(Me, New PERSONASRowChangeEvent(CType(e.Row,PERSONASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PERSONASRowChangingEvent) Is Nothing) Then
                RaiseEvent PERSONASRowChanging(Me, New PERSONASRowChangeEvent(CType(e.Row,PERSONASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PERSONASRowDeletedEvent) Is Nothing) Then
                RaiseEvent PERSONASRowDeleted(Me, New PERSONASRowChangeEvent(CType(e.Row,PERSONASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PERSONASRowDeletingEvent) Is Nothing) Then
                RaiseEvent PERSONASRowDeleting(Me, New PERSONASRowChangeEvent(CType(e.Row,PERSONASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePERSONASRow(ByVal row As PERSONASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Schema = New Schema
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PERSONASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Masivos_PendientesDataTable
        Inherits Global.System.Data.TypedTableBase(Of Masivos_PendientesRow)
        
        Private columnLIQGEN As Global.System.Data.DataColumn
        
        Private columnPrePrsDoc As Global.System.Data.DataColumn
        
        Private columnPREPRSNOM As Global.System.Data.DataColumn
        
        Private columnLIQINT As Global.System.Data.DataColumn
        
        Private columnANNIOMIN As Global.System.Data.DataColumn
        
        Private columnANNIOMAX As Global.System.Data.DataColumn
        
        Private columnTOTALPAGAR As Global.System.Data.DataColumn
        
        Private columnLiqTot As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Masivos_Pendientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIQGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIQGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREPRSNOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREPRSNOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIQINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIQINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNIOMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNIOMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNIOMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNIOMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALPAGARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALPAGAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LiqTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiqTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Masivos_PendientesRow
            Get
                Return CType(Me.Rows(index),Masivos_PendientesRow)
            End Get
        End Property
        
        Public Event Masivos_PendientesRowChanging As Masivos_PendientesRowChangeEventHandler
        
        Public Event Masivos_PendientesRowChanged As Masivos_PendientesRowChangeEventHandler
        
        Public Event Masivos_PendientesRowDeleting As Masivos_PendientesRowChangeEventHandler
        
        Public Event Masivos_PendientesRowDeleted As Masivos_PendientesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasivos_PendientesRow(ByVal row As Masivos_PendientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasivos_PendientesRow(ByVal LIQGEN As String, ByVal PrePrsDoc As String, ByVal PREPRSNOM As String, ByVal LIQINT As Decimal, ByVal ANNIOMIN As Short, ByVal ANNIOMAX As Short, ByVal TOTALPAGAR As Decimal, ByVal LiqTot As Decimal) As Masivos_PendientesRow
            Dim rowMasivos_PendientesRow As Masivos_PendientesRow = CType(Me.NewRow,Masivos_PendientesRow)
            Dim columnValuesArray() As Object = New Object() {LIQGEN, PrePrsDoc, PREPRSNOM, LIQINT, ANNIOMIN, ANNIOMAX, TOTALPAGAR, LiqTot}
            rowMasivos_PendientesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasivos_PendientesRow)
            Return rowMasivos_PendientesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Masivos_PendientesDataTable = CType(MyBase.Clone,Masivos_PendientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Masivos_PendientesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLIQGEN = MyBase.Columns("LIQGEN")
            Me.columnPrePrsDoc = MyBase.Columns("PREPRSDOC")
            Me.columnPREPRSNOM = MyBase.Columns("PREPRSNOM")
            Me.columnLIQINT = MyBase.Columns("LIQINT")
            Me.columnANNIOMIN = MyBase.Columns("ANNIOMIN")
            Me.columnANNIOMAX = MyBase.Columns("ANNIOMAX")
            Me.columnTOTALPAGAR = MyBase.Columns("TOTALPAGAR")
            Me.columnLiqTot = MyBase.Columns("LIQTOT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLIQGEN = New Global.System.Data.DataColumn("LIQGEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIQGEN)
            Me.columnPrePrsDoc = New Global.System.Data.DataColumn("PREPRSDOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PrePrsDoc")
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PrePrsDocColumn")
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPrePrsDoc")
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_UserColumnName", "PREPRSDOC")
            MyBase.Columns.Add(Me.columnPrePrsDoc)
            Me.columnPREPRSNOM = New Global.System.Data.DataColumn("PREPRSNOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREPRSNOM)
            Me.columnLIQINT = New Global.System.Data.DataColumn("LIQINT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIQINT)
            Me.columnANNIOMIN = New Global.System.Data.DataColumn("ANNIOMIN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNIOMIN)
            Me.columnANNIOMAX = New Global.System.Data.DataColumn("ANNIOMAX", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNIOMAX)
            Me.columnTOTALPAGAR = New Global.System.Data.DataColumn("TOTALPAGAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALPAGAR)
            Me.columnLiqTot = New Global.System.Data.DataColumn("LIQTOT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.columnLiqTot.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "LiqTot")
            Me.columnLiqTot.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "LiqTotColumn")
            Me.columnLiqTot.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLiqTot")
            Me.columnLiqTot.ExtendedProperties.Add("Generator_UserColumnName", "LIQTOT")
            MyBase.Columns.Add(Me.columnLiqTot)
            Me.columnLIQGEN.MaxLength = 15
            Me.columnPrePrsDoc.MaxLength = 12
            Me.columnPREPRSNOM.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasivos_PendientesRow() As Masivos_PendientesRow
            Return CType(Me.NewRow,Masivos_PendientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Masivos_PendientesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Masivos_PendientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Masivos_PendientesRowChangedEvent) Is Nothing) Then
                RaiseEvent Masivos_PendientesRowChanged(Me, New Masivos_PendientesRowChangeEvent(CType(e.Row,Masivos_PendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Masivos_PendientesRowChangingEvent) Is Nothing) Then
                RaiseEvent Masivos_PendientesRowChanging(Me, New Masivos_PendientesRowChangeEvent(CType(e.Row,Masivos_PendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Masivos_PendientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent Masivos_PendientesRowDeleted(Me, New Masivos_PendientesRowChangeEvent(CType(e.Row,Masivos_PendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Masivos_PendientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent Masivos_PendientesRowDeleting(Me, New Masivos_PendientesRowChangeEvent(CType(e.Row,Masivos_PendientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasivos_PendientesRow(ByVal row As Masivos_PendientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Schema = New Schema
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Masivos_PendientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Masivos_Pendientes_formDataTable
        Inherits Global.System.Data.TypedTableBase(Of Masivos_Pendientes_formRow)
        
        Private columnLIQGEN As Global.System.Data.DataColumn
        
        Private columnPrePrsDoc As Global.System.Data.DataColumn
        
        Private columnPREPRSNOM As Global.System.Data.DataColumn
        
        Private columnTOTALPAGAR As Global.System.Data.DataColumn
        
        Private columnPRECARVAL As Global.System.Data.DataColumn
        
        Private columnVIGENCIAS As Global.System.Data.DataColumn
        
        Private columnANNIOMIN As Global.System.Data.DataColumn
        
        Private columnANNIOMAX As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Masivos_Pendientes_form"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LIQGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLIQGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREPRSNOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREPRSNOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALPAGARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALPAGAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRECARVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRECARVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VIGENCIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVIGENCIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNIOMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNIOMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNIOMAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNIOMAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Masivos_Pendientes_formRow
            Get
                Return CType(Me.Rows(index),Masivos_Pendientes_formRow)
            End Get
        End Property
        
        Public Event Masivos_Pendientes_formRowChanging As Masivos_Pendientes_formRowChangeEventHandler
        
        Public Event Masivos_Pendientes_formRowChanged As Masivos_Pendientes_formRowChangeEventHandler
        
        Public Event Masivos_Pendientes_formRowDeleting As Masivos_Pendientes_formRowChangeEventHandler
        
        Public Event Masivos_Pendientes_formRowDeleted As Masivos_Pendientes_formRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMasivos_Pendientes_formRow(ByVal row As Masivos_Pendientes_formRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMasivos_Pendientes_formRow(ByVal LIQGEN As String, ByVal PrePrsDoc As String, ByVal PREPRSNOM As String, ByVal TOTALPAGAR As Decimal, ByVal PRECARVAL As Short, ByVal VIGENCIAS As String, ByVal ANNIOMIN As Short, ByVal ANNIOMAX As Short) As Masivos_Pendientes_formRow
            Dim rowMasivos_Pendientes_formRow As Masivos_Pendientes_formRow = CType(Me.NewRow,Masivos_Pendientes_formRow)
            Dim columnValuesArray() As Object = New Object() {LIQGEN, PrePrsDoc, PREPRSNOM, TOTALPAGAR, PRECARVAL, VIGENCIAS, ANNIOMIN, ANNIOMAX}
            rowMasivos_Pendientes_formRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMasivos_Pendientes_formRow)
            Return rowMasivos_Pendientes_formRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Masivos_Pendientes_formDataTable = CType(MyBase.Clone,Masivos_Pendientes_formDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Masivos_Pendientes_formDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLIQGEN = MyBase.Columns("LIQGEN")
            Me.columnPrePrsDoc = MyBase.Columns("PREPRSDOC")
            Me.columnPREPRSNOM = MyBase.Columns("PREPRSNOM")
            Me.columnTOTALPAGAR = MyBase.Columns("TOTALPAGAR")
            Me.columnPRECARVAL = MyBase.Columns("PRECARVAL")
            Me.columnVIGENCIAS = MyBase.Columns("VIGENCIAS")
            Me.columnANNIOMIN = MyBase.Columns("ANNIOMIN")
            Me.columnANNIOMAX = MyBase.Columns("ANNIOMAX")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLIQGEN = New Global.System.Data.DataColumn("LIQGEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLIQGEN)
            Me.columnPrePrsDoc = New Global.System.Data.DataColumn("PREPRSDOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PrePrsDoc")
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PrePrsDocColumn")
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPrePrsDoc")
            Me.columnPrePrsDoc.ExtendedProperties.Add("Generator_UserColumnName", "PREPRSDOC")
            MyBase.Columns.Add(Me.columnPrePrsDoc)
            Me.columnPREPRSNOM = New Global.System.Data.DataColumn("PREPRSNOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREPRSNOM)
            Me.columnTOTALPAGAR = New Global.System.Data.DataColumn("TOTALPAGAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALPAGAR)
            Me.columnPRECARVAL = New Global.System.Data.DataColumn("PRECARVAL", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRECARVAL)
            Me.columnVIGENCIAS = New Global.System.Data.DataColumn("VIGENCIAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVIGENCIAS)
            Me.columnANNIOMIN = New Global.System.Data.DataColumn("ANNIOMIN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNIOMIN)
            Me.columnANNIOMAX = New Global.System.Data.DataColumn("ANNIOMAX", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNIOMAX)
            Me.columnLIQGEN.MaxLength = 15
            Me.columnPrePrsDoc.MaxLength = 12
            Me.columnPREPRSNOM.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMasivos_Pendientes_formRow() As Masivos_Pendientes_formRow
            Return CType(Me.NewRow,Masivos_Pendientes_formRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Masivos_Pendientes_formRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Masivos_Pendientes_formRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Masivos_Pendientes_formRowChangedEvent) Is Nothing) Then
                RaiseEvent Masivos_Pendientes_formRowChanged(Me, New Masivos_Pendientes_formRowChangeEvent(CType(e.Row,Masivos_Pendientes_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Masivos_Pendientes_formRowChangingEvent) Is Nothing) Then
                RaiseEvent Masivos_Pendientes_formRowChanging(Me, New Masivos_Pendientes_formRowChangeEvent(CType(e.Row,Masivos_Pendientes_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Masivos_Pendientes_formRowDeletedEvent) Is Nothing) Then
                RaiseEvent Masivos_Pendientes_formRowDeleted(Me, New Masivos_Pendientes_formRowChangeEvent(CType(e.Row,Masivos_Pendientes_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Masivos_Pendientes_formRowDeletingEvent) Is Nothing) Then
                RaiseEvent Masivos_Pendientes_formRowDeleting(Me, New Masivos_Pendientes_formRowChangeEvent(CType(e.Row,Masivos_Pendientes_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMasivos_Pendientes_formRow(ByVal row As Masivos_Pendientes_formRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Schema = New Schema
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Masivos_Pendientes_formDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcesoExpedienteRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcesoExpediente As ProcesoExpedienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcesoExpediente = CType(Me.Table,ProcesoExpedienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.ACTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTO' in table 'ProcesoExpediente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.ACTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPCION' in table 'ProcesoExpediente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_R() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.FECHA_RColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_R' in table 'ProcesoExpediente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.FECHA_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.FECHA_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_P' in table 'ProcesoExpediente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.FECHA_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.DIASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIAS' in table 'ProcesoExpediente' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.DIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTONull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.ACTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTONull()
            Me(Me.tableProcesoExpediente.ACTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableProcesoExpediente.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_RNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.FECHA_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_RNull()
            Me(Me.tableProcesoExpediente.FECHA_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_PNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.FECHA_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_PNull()
            Me(Me.tableProcesoExpediente.FECHA_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIASNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.DIASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIASNull()
            Me(Me.tableProcesoExpediente.DIASColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PREDIOS3Row
        Inherits Global.System.Data.DataRow
        
        Private tablePREDIOS3 As PREDIOS3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePREDIOS3 = CType(Me.Table,PREDIOS3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunCod() As Short
            Get
                Return CType(Me(Me.tablePREDIOS3.MunCodColumn),Short)
            End Get
            Set
                Me(Me.tablePREDIOS3.MunCodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreNum() As String
            Get
                Return CType(Me(Me.tablePREDIOS3.PreNumColumn),String)
            End Get
            Set
                Me(Me.tablePREDIOS3.PreNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsCod() As Integer
            Get
                Return CType(Me(Me.tablePREDIOS3.PrsCodColumn),Integer)
            End Get
            Set
                Me(Me.tablePREDIOS3.PrsCodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreEstPer() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PreEstPerColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PreEstPer' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PreEstPerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PrePrsDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrePrsDoc' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PrePrsDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsNom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PrePrsNomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrePrsNom' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PrePrsNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreConec() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PreConecColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PreConec' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PreConecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prenom1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.Prenom1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prenom1' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.Prenom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prenom2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.Prenom2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Prenom2' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.Prenom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreApl1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PreApl1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PreApl1' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PreApl1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreApl2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PreApl2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PreApl2' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PreApl2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsCru() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePREDIOS3.PrePrsCruColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrePrsCru' in table 'PREDIOS3' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePREDIOS3.PrePrsCruColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreEstPerNull() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PreEstPerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreEstPerNull()
            Me(Me.tablePREDIOS3.PreEstPerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsDocNull() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PrePrsDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsDocNull()
            Me(Me.tablePREDIOS3.PrePrsDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsNomNull() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PrePrsNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsNomNull()
            Me(Me.tablePREDIOS3.PrePrsNomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreConecNull() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PreConecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreConecNull()
            Me(Me.tablePREDIOS3.PreConecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrenom1Null() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.Prenom1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrenom1Null()
            Me(Me.tablePREDIOS3.Prenom1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrenom2Null() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.Prenom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrenom2Null()
            Me(Me.tablePREDIOS3.Prenom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreApl1Null() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PreApl1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreApl1Null()
            Me(Me.tablePREDIOS3.PreApl1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreApl2Null() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PreApl2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreApl2Null()
            Me(Me.tablePREDIOS3.PreApl2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsCruNull() As Boolean
            Return Me.IsNull(Me.tablePREDIOS3.PrePrsCruColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsCruNull()
            Me(Me.tablePREDIOS3.PrePrsCruColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PERSONASRow
        Inherits Global.System.Data.DataRow
        
        Private tablePERSONAS As PERSONASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePERSONAS = CType(Me.Table,PERSONASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsCod() As Integer
            Get
                Return CType(Me(Me.tablePERSONAS.PrsCodColumn),Integer)
            End Get
            Set
                Me(Me.tablePERSONAS.PrsCodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsDoc' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsTipDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsTipDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsTipDoc' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsTipDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsNom() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsNomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsNom' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsTel() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsTelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsTel' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsTelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsEma() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsEmaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsEma' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsEmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsResTip() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsResTipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsResTip' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsResTipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsResVig() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsResVigColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsResVig' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsResVigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsResNum() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsResNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsResNum' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsResNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrsConec() As String
            Get
                Try 
                    Return CType(Me(Me.tablePERSONAS.PrsConecColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrsConec' in table 'PERSONAS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePERSONAS.PrsConecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsDocNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsDocNull()
            Me(Me.tablePERSONAS.PrsDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsTipDocNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsTipDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsTipDocNull()
            Me(Me.tablePERSONAS.PrsTipDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsNomNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsNomNull()
            Me(Me.tablePERSONAS.PrsNomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsTelNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsTelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsTelNull()
            Me(Me.tablePERSONAS.PrsTelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsEmaNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsEmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsEmaNull()
            Me(Me.tablePERSONAS.PrsEmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsResTipNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsResTipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsResTipNull()
            Me(Me.tablePERSONAS.PrsResTipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsResVigNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsResVigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsResVigNull()
            Me(Me.tablePERSONAS.PrsResVigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsResNumNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsResNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsResNumNull()
            Me(Me.tablePERSONAS.PrsResNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrsConecNull() As Boolean
            Return Me.IsNull(Me.tablePERSONAS.PrsConecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrsConecNull()
            Me(Me.tablePERSONAS.PrsConecColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Masivos_PendientesRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasivos_Pendientes As Masivos_PendientesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasivos_Pendientes = CType(Me.Table,Masivos_PendientesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIQGEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.LIQGENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIQGEN' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.LIQGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.PrePrsDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREPRSDOC' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.PrePrsDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPRSNOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.PREPRSNOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREPRSNOM' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.PREPRSNOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIQINT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.LIQINTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIQINT' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.LIQINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNIOMIN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.ANNIOMINColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANNIOMIN' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.ANNIOMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNIOMAX() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.ANNIOMAXColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANNIOMAX' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.ANNIOMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALPAGAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.TOTALPAGARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALPAGAR' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.TOTALPAGARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LiqTot() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes.LiqTotColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIQTOT' in table 'Masivos_Pendientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes.LiqTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIQGENNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.LIQGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIQGENNull()
            Me(Me.tableMasivos_Pendientes.LIQGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsDocNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.PrePrsDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsDocNull()
            Me(Me.tableMasivos_Pendientes.PrePrsDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREPRSNOMNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.PREPRSNOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREPRSNOMNull()
            Me(Me.tableMasivos_Pendientes.PREPRSNOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIQINTNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.LIQINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIQINTNull()
            Me(Me.tableMasivos_Pendientes.LIQINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNIOMINNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.ANNIOMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNIOMINNull()
            Me(Me.tableMasivos_Pendientes.ANNIOMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNIOMAXNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.ANNIOMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNIOMAXNull()
            Me(Me.tableMasivos_Pendientes.ANNIOMAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALPAGARNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.TOTALPAGARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALPAGARNull()
            Me(Me.tableMasivos_Pendientes.TOTALPAGARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLiqTotNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes.LiqTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLiqTotNull()
            Me(Me.tableMasivos_Pendientes.LiqTotColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Masivos_Pendientes_formRow
        Inherits Global.System.Data.DataRow
        
        Private tableMasivos_Pendientes_form As Masivos_Pendientes_formDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMasivos_Pendientes_form = CType(Me.Table,Masivos_Pendientes_formDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIQGEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.LIQGENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LIQGEN' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.LIQGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.PrePrsDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREPRSDOC' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.PrePrsDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREPRSNOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.PREPRSNOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREPRSNOM' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.PREPRSNOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALPAGAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.TOTALPAGARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALPAGAR' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.TOTALPAGARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRECARVAL() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.PRECARVALColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRECARVAL' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.PRECARVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VIGENCIAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.VIGENCIASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VIGENCIAS' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.VIGENCIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNIOMIN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.ANNIOMINColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANNIOMIN' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.ANNIOMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNIOMAX() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMasivos_Pendientes_form.ANNIOMAXColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ANNIOMAX' in table 'Masivos_Pendientes_form' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMasivos_Pendientes_form.ANNIOMAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIQGENNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.LIQGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIQGENNull()
            Me(Me.tableMasivos_Pendientes_form.LIQGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsDocNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.PrePrsDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsDocNull()
            Me(Me.tableMasivos_Pendientes_form.PrePrsDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREPRSNOMNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.PREPRSNOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREPRSNOMNull()
            Me(Me.tableMasivos_Pendientes_form.PREPRSNOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALPAGARNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.TOTALPAGARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALPAGARNull()
            Me(Me.tableMasivos_Pendientes_form.TOTALPAGARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRECARVALNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.PRECARVALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRECARVALNull()
            Me(Me.tableMasivos_Pendientes_form.PRECARVALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVIGENCIASNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.VIGENCIASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVIGENCIASNull()
            Me(Me.tableMasivos_Pendientes_form.VIGENCIASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNIOMINNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.ANNIOMINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNIOMINNull()
            Me(Me.tableMasivos_Pendientes_form.ANNIOMINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNIOMAXNull() As Boolean
            Return Me.IsNull(Me.tableMasivos_Pendientes_form.ANNIOMAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNIOMAXNull()
            Me(Me.tableMasivos_Pendientes_form.ANNIOMAXColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcesoExpedienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcesoExpedienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcesoExpedienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcesoExpedienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PREDIOS3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PREDIOS3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PREDIOS3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PREDIOS3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PERSONASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PERSONASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PERSONASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PERSONASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Masivos_PendientesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Masivos_PendientesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Masivos_PendientesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Masivos_PendientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Masivos_Pendientes_formRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Masivos_Pendientes_formRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Masivos_Pendientes_formRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Masivos_Pendientes_formRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
