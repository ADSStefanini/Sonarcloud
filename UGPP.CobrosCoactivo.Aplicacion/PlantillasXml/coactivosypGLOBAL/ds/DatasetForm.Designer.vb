'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DatasetForm"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DatasetForm
    Inherits Global.System.Data.DataSet
    
    Private tableMAESTRO_BANCOS As MAESTRO_BANCOSDataTable
    
    Private tableabogados As abogadosDataTable
    
    Private tabledocumentos As documentosDataTable
    
    Private tableetapas As etapasDataTable
    
    Private tableetapa_acto As etapa_actoDataTable
    
    Private tableUSUARIO_PPALMENU As USUARIO_PPALMENUDataTable
    
    Private tablePROPIETARIOS As PROPIETARIOSDataTable
    
    Private tableTDIAS_FESTIVOS As TDIAS_FESTIVOSDataTable
    
    Private tableTDIAS_FESTIVOS_form As TDIAS_FESTIVOS_formDataTable
    
    Private tableProcesoExpediente As ProcesoExpedienteDataTable
    
    Private tableDEPENDENCIA_ACTUACIONES As DEPENDENCIA_ACTUACIONESDataTable
    
    Private tableCAT_CLIENTES As CAT_CLIENTESDataTable
    
    Private tableParetoConsolidadoDeuda As ParetoConsolidadoDeudaDataTable
    
    Private tableentescobradores As entescobradoresDataTable
    
    Private tableentesdbf As entesdbfDataTable
    
    Private tableactuaciones As actuacionesDataTable
    
    Private tableDOCUMENTO_MASIVO_HEAD As DOCUMENTO_MASIVO_HEADDataTable
    
    Private tableDOCUMENTO_MASIVO As DOCUMENTO_MASIVODataTable
    
    Private tabledocumento_ultimoacto As documento_ultimoactoDataTable
    
    Private tableProcesoAcumulado As ProcesoAcumuladoDataTable
    
    Private tableProcesoAcumuladopredio As ProcesoAcumuladopredioDataTable
    
    Private tableIMAGEN As IMAGENDataTable
    
    Private tableDOCUMENTO_IMPUESTO As DOCUMENTO_IMPUESTODataTable
    
    Private tableusuarios As usuariosDataTable
    
    Private tableACTOS_ADMINISTRATIVOS As ACTOS_ADMINISTRATIVOSDataTable
    
    Private tableNROPREDIOXDEUDOR As NROPREDIOXDEUDORDataTable
    
    Private tablegridUsuarios As gridUsuariosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MAESTRO_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New MAESTRO_BANCOSDataTable(ds.Tables("MAESTRO_BANCOS")))
            End If
            If (Not (ds.Tables("abogados")) Is Nothing) Then
                MyBase.Tables.Add(New abogadosDataTable(ds.Tables("abogados")))
            End If
            If (Not (ds.Tables("documentos")) Is Nothing) Then
                MyBase.Tables.Add(New documentosDataTable(ds.Tables("documentos")))
            End If
            If (Not (ds.Tables("etapas")) Is Nothing) Then
                MyBase.Tables.Add(New etapasDataTable(ds.Tables("etapas")))
            End If
            If (Not (ds.Tables("etapa_acto")) Is Nothing) Then
                MyBase.Tables.Add(New etapa_actoDataTable(ds.Tables("etapa_acto")))
            End If
            If (Not (ds.Tables("USUARIO_PPALMENU")) Is Nothing) Then
                MyBase.Tables.Add(New USUARIO_PPALMENUDataTable(ds.Tables("USUARIO_PPALMENU")))
            End If
            If (Not (ds.Tables("PROPIETARIOS")) Is Nothing) Then
                MyBase.Tables.Add(New PROPIETARIOSDataTable(ds.Tables("PROPIETARIOS")))
            End If
            If (Not (ds.Tables("TDIAS_FESTIVOS")) Is Nothing) Then
                MyBase.Tables.Add(New TDIAS_FESTIVOSDataTable(ds.Tables("TDIAS_FESTIVOS")))
            End If
            If (Not (ds.Tables("TDIAS_FESTIVOS_form")) Is Nothing) Then
                MyBase.Tables.Add(New TDIAS_FESTIVOS_formDataTable(ds.Tables("TDIAS_FESTIVOS_form")))
            End If
            If (Not (ds.Tables("ProcesoExpediente")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoExpedienteDataTable(ds.Tables("ProcesoExpediente")))
            End If
            If (Not (ds.Tables("DEPENDENCIA_ACTUACIONES")) Is Nothing) Then
                MyBase.Tables.Add(New DEPENDENCIA_ACTUACIONESDataTable(ds.Tables("DEPENDENCIA_ACTUACIONES")))
            End If
            If (Not (ds.Tables("CAT_CLIENTES")) Is Nothing) Then
                MyBase.Tables.Add(New CAT_CLIENTESDataTable(ds.Tables("CAT_CLIENTES")))
            End If
            If (Not (ds.Tables("ParetoConsolidadoDeuda")) Is Nothing) Then
                MyBase.Tables.Add(New ParetoConsolidadoDeudaDataTable(ds.Tables("ParetoConsolidadoDeuda")))
            End If
            If (Not (ds.Tables("entescobradores")) Is Nothing) Then
                MyBase.Tables.Add(New entescobradoresDataTable(ds.Tables("entescobradores")))
            End If
            If (Not (ds.Tables("entesdbf")) Is Nothing) Then
                MyBase.Tables.Add(New entesdbfDataTable(ds.Tables("entesdbf")))
            End If
            If (Not (ds.Tables("actuaciones")) Is Nothing) Then
                MyBase.Tables.Add(New actuacionesDataTable(ds.Tables("actuaciones")))
            End If
            If (Not (ds.Tables("DOCUMENTO_MASIVO_HEAD")) Is Nothing) Then
                MyBase.Tables.Add(New DOCUMENTO_MASIVO_HEADDataTable(ds.Tables("DOCUMENTO_MASIVO_HEAD")))
            End If
            If (Not (ds.Tables("DOCUMENTO_MASIVO")) Is Nothing) Then
                MyBase.Tables.Add(New DOCUMENTO_MASIVODataTable(ds.Tables("DOCUMENTO_MASIVO")))
            End If
            If (Not (ds.Tables("documento_ultimoacto")) Is Nothing) Then
                MyBase.Tables.Add(New documento_ultimoactoDataTable(ds.Tables("documento_ultimoacto")))
            End If
            If (Not (ds.Tables("ProcesoAcumulado")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoAcumuladoDataTable(ds.Tables("ProcesoAcumulado")))
            End If
            If (Not (ds.Tables("ProcesoAcumuladopredio")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoAcumuladopredioDataTable(ds.Tables("ProcesoAcumuladopredio")))
            End If
            If (Not (ds.Tables("IMAGEN")) Is Nothing) Then
                MyBase.Tables.Add(New IMAGENDataTable(ds.Tables("IMAGEN")))
            End If
            If (Not (ds.Tables("DOCUMENTO_IMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New DOCUMENTO_IMPUESTODataTable(ds.Tables("DOCUMENTO_IMPUESTO")))
            End If
            If (Not (ds.Tables("usuarios")) Is Nothing) Then
                MyBase.Tables.Add(New usuariosDataTable(ds.Tables("usuarios")))
            End If
            If (Not (ds.Tables("ACTOS_ADMINISTRATIVOS")) Is Nothing) Then
                MyBase.Tables.Add(New ACTOS_ADMINISTRATIVOSDataTable(ds.Tables("ACTOS_ADMINISTRATIVOS")))
            End If
            If (Not (ds.Tables("NROPREDIOXDEUDOR")) Is Nothing) Then
                MyBase.Tables.Add(New NROPREDIOXDEUDORDataTable(ds.Tables("NROPREDIOXDEUDOR")))
            End If
            If (Not (ds.Tables("gridUsuarios")) Is Nothing) Then
                MyBase.Tables.Add(New gridUsuariosDataTable(ds.Tables("gridUsuarios")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAESTRO_BANCOS() As MAESTRO_BANCOSDataTable
        Get
            Return Me.tableMAESTRO_BANCOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property abogados() As abogadosDataTable
        Get
            Return Me.tableabogados
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property documentos() As documentosDataTable
        Get
            Return Me.tabledocumentos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property etapas() As etapasDataTable
        Get
            Return Me.tableetapas
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property etapa_acto() As etapa_actoDataTable
        Get
            Return Me.tableetapa_acto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property USUARIO_PPALMENU() As USUARIO_PPALMENUDataTable
        Get
            Return Me.tableUSUARIO_PPALMENU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROPIETARIOS() As PROPIETARIOSDataTable
        Get
            Return Me.tablePROPIETARIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TDIAS_FESTIVOS() As TDIAS_FESTIVOSDataTable
        Get
            Return Me.tableTDIAS_FESTIVOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TDIAS_FESTIVOS_form() As TDIAS_FESTIVOS_formDataTable
        Get
            Return Me.tableTDIAS_FESTIVOS_form
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcesoExpediente() As ProcesoExpedienteDataTable
        Get
            Return Me.tableProcesoExpediente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DEPENDENCIA_ACTUACIONES() As DEPENDENCIA_ACTUACIONESDataTable
        Get
            Return Me.tableDEPENDENCIA_ACTUACIONES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CAT_CLIENTES() As CAT_CLIENTESDataTable
        Get
            Return Me.tableCAT_CLIENTES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ParetoConsolidadoDeuda() As ParetoConsolidadoDeudaDataTable
        Get
            Return Me.tableParetoConsolidadoDeuda
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property entescobradores() As entescobradoresDataTable
        Get
            Return Me.tableentescobradores
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property entesdbf() As entesdbfDataTable
        Get
            Return Me.tableentesdbf
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property actuaciones() As actuacionesDataTable
        Get
            Return Me.tableactuaciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DOCUMENTO_MASIVO_HEAD() As DOCUMENTO_MASIVO_HEADDataTable
        Get
            Return Me.tableDOCUMENTO_MASIVO_HEAD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DOCUMENTO_MASIVO() As DOCUMENTO_MASIVODataTable
        Get
            Return Me.tableDOCUMENTO_MASIVO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property documento_ultimoacto() As documento_ultimoactoDataTable
        Get
            Return Me.tabledocumento_ultimoacto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcesoAcumulado() As ProcesoAcumuladoDataTable
        Get
            Return Me.tableProcesoAcumulado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcesoAcumuladopredio() As ProcesoAcumuladopredioDataTable
        Get
            Return Me.tableProcesoAcumuladopredio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IMAGEN() As IMAGENDataTable
        Get
            Return Me.tableIMAGEN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DOCUMENTO_IMPUESTO() As DOCUMENTO_IMPUESTODataTable
        Get
            Return Me.tableDOCUMENTO_IMPUESTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property usuarios() As usuariosDataTable
        Get
            Return Me.tableusuarios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACTOS_ADMINISTRATIVOS() As ACTOS_ADMINISTRATIVOSDataTable
        Get
            Return Me.tableACTOS_ADMINISTRATIVOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NROPREDIOXDEUDOR() As NROPREDIOXDEUDORDataTable
        Get
            Return Me.tableNROPREDIOXDEUDOR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property gridUsuarios() As gridUsuariosDataTable
        Get
            Return Me.tablegridUsuarios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DatasetForm = CType(MyBase.Clone,DatasetForm)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MAESTRO_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New MAESTRO_BANCOSDataTable(ds.Tables("MAESTRO_BANCOS")))
            End If
            If (Not (ds.Tables("abogados")) Is Nothing) Then
                MyBase.Tables.Add(New abogadosDataTable(ds.Tables("abogados")))
            End If
            If (Not (ds.Tables("documentos")) Is Nothing) Then
                MyBase.Tables.Add(New documentosDataTable(ds.Tables("documentos")))
            End If
            If (Not (ds.Tables("etapas")) Is Nothing) Then
                MyBase.Tables.Add(New etapasDataTable(ds.Tables("etapas")))
            End If
            If (Not (ds.Tables("etapa_acto")) Is Nothing) Then
                MyBase.Tables.Add(New etapa_actoDataTable(ds.Tables("etapa_acto")))
            End If
            If (Not (ds.Tables("USUARIO_PPALMENU")) Is Nothing) Then
                MyBase.Tables.Add(New USUARIO_PPALMENUDataTable(ds.Tables("USUARIO_PPALMENU")))
            End If
            If (Not (ds.Tables("PROPIETARIOS")) Is Nothing) Then
                MyBase.Tables.Add(New PROPIETARIOSDataTable(ds.Tables("PROPIETARIOS")))
            End If
            If (Not (ds.Tables("TDIAS_FESTIVOS")) Is Nothing) Then
                MyBase.Tables.Add(New TDIAS_FESTIVOSDataTable(ds.Tables("TDIAS_FESTIVOS")))
            End If
            If (Not (ds.Tables("TDIAS_FESTIVOS_form")) Is Nothing) Then
                MyBase.Tables.Add(New TDIAS_FESTIVOS_formDataTable(ds.Tables("TDIAS_FESTIVOS_form")))
            End If
            If (Not (ds.Tables("ProcesoExpediente")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoExpedienteDataTable(ds.Tables("ProcesoExpediente")))
            End If
            If (Not (ds.Tables("DEPENDENCIA_ACTUACIONES")) Is Nothing) Then
                MyBase.Tables.Add(New DEPENDENCIA_ACTUACIONESDataTable(ds.Tables("DEPENDENCIA_ACTUACIONES")))
            End If
            If (Not (ds.Tables("CAT_CLIENTES")) Is Nothing) Then
                MyBase.Tables.Add(New CAT_CLIENTESDataTable(ds.Tables("CAT_CLIENTES")))
            End If
            If (Not (ds.Tables("ParetoConsolidadoDeuda")) Is Nothing) Then
                MyBase.Tables.Add(New ParetoConsolidadoDeudaDataTable(ds.Tables("ParetoConsolidadoDeuda")))
            End If
            If (Not (ds.Tables("entescobradores")) Is Nothing) Then
                MyBase.Tables.Add(New entescobradoresDataTable(ds.Tables("entescobradores")))
            End If
            If (Not (ds.Tables("entesdbf")) Is Nothing) Then
                MyBase.Tables.Add(New entesdbfDataTable(ds.Tables("entesdbf")))
            End If
            If (Not (ds.Tables("actuaciones")) Is Nothing) Then
                MyBase.Tables.Add(New actuacionesDataTable(ds.Tables("actuaciones")))
            End If
            If (Not (ds.Tables("DOCUMENTO_MASIVO_HEAD")) Is Nothing) Then
                MyBase.Tables.Add(New DOCUMENTO_MASIVO_HEADDataTable(ds.Tables("DOCUMENTO_MASIVO_HEAD")))
            End If
            If (Not (ds.Tables("DOCUMENTO_MASIVO")) Is Nothing) Then
                MyBase.Tables.Add(New DOCUMENTO_MASIVODataTable(ds.Tables("DOCUMENTO_MASIVO")))
            End If
            If (Not (ds.Tables("documento_ultimoacto")) Is Nothing) Then
                MyBase.Tables.Add(New documento_ultimoactoDataTable(ds.Tables("documento_ultimoacto")))
            End If
            If (Not (ds.Tables("ProcesoAcumulado")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoAcumuladoDataTable(ds.Tables("ProcesoAcumulado")))
            End If
            If (Not (ds.Tables("ProcesoAcumuladopredio")) Is Nothing) Then
                MyBase.Tables.Add(New ProcesoAcumuladopredioDataTable(ds.Tables("ProcesoAcumuladopredio")))
            End If
            If (Not (ds.Tables("IMAGEN")) Is Nothing) Then
                MyBase.Tables.Add(New IMAGENDataTable(ds.Tables("IMAGEN")))
            End If
            If (Not (ds.Tables("DOCUMENTO_IMPUESTO")) Is Nothing) Then
                MyBase.Tables.Add(New DOCUMENTO_IMPUESTODataTable(ds.Tables("DOCUMENTO_IMPUESTO")))
            End If
            If (Not (ds.Tables("usuarios")) Is Nothing) Then
                MyBase.Tables.Add(New usuariosDataTable(ds.Tables("usuarios")))
            End If
            If (Not (ds.Tables("ACTOS_ADMINISTRATIVOS")) Is Nothing) Then
                MyBase.Tables.Add(New ACTOS_ADMINISTRATIVOSDataTable(ds.Tables("ACTOS_ADMINISTRATIVOS")))
            End If
            If (Not (ds.Tables("NROPREDIOXDEUDOR")) Is Nothing) Then
                MyBase.Tables.Add(New NROPREDIOXDEUDORDataTable(ds.Tables("NROPREDIOXDEUDOR")))
            End If
            If (Not (ds.Tables("gridUsuarios")) Is Nothing) Then
                MyBase.Tables.Add(New gridUsuariosDataTable(ds.Tables("gridUsuarios")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMAESTRO_BANCOS = CType(MyBase.Tables("MAESTRO_BANCOS"),MAESTRO_BANCOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAESTRO_BANCOS) Is Nothing) Then
                Me.tableMAESTRO_BANCOS.InitVars
            End If
        End If
        Me.tableabogados = CType(MyBase.Tables("abogados"),abogadosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableabogados) Is Nothing) Then
                Me.tableabogados.InitVars
            End If
        End If
        Me.tabledocumentos = CType(MyBase.Tables("documentos"),documentosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledocumentos) Is Nothing) Then
                Me.tabledocumentos.InitVars
            End If
        End If
        Me.tableetapas = CType(MyBase.Tables("etapas"),etapasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableetapas) Is Nothing) Then
                Me.tableetapas.InitVars
            End If
        End If
        Me.tableetapa_acto = CType(MyBase.Tables("etapa_acto"),etapa_actoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableetapa_acto) Is Nothing) Then
                Me.tableetapa_acto.InitVars
            End If
        End If
        Me.tableUSUARIO_PPALMENU = CType(MyBase.Tables("USUARIO_PPALMENU"),USUARIO_PPALMENUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUSUARIO_PPALMENU) Is Nothing) Then
                Me.tableUSUARIO_PPALMENU.InitVars
            End If
        End If
        Me.tablePROPIETARIOS = CType(MyBase.Tables("PROPIETARIOS"),PROPIETARIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROPIETARIOS) Is Nothing) Then
                Me.tablePROPIETARIOS.InitVars
            End If
        End If
        Me.tableTDIAS_FESTIVOS = CType(MyBase.Tables("TDIAS_FESTIVOS"),TDIAS_FESTIVOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTDIAS_FESTIVOS) Is Nothing) Then
                Me.tableTDIAS_FESTIVOS.InitVars
            End If
        End If
        Me.tableTDIAS_FESTIVOS_form = CType(MyBase.Tables("TDIAS_FESTIVOS_form"),TDIAS_FESTIVOS_formDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTDIAS_FESTIVOS_form) Is Nothing) Then
                Me.tableTDIAS_FESTIVOS_form.InitVars
            End If
        End If
        Me.tableProcesoExpediente = CType(MyBase.Tables("ProcesoExpediente"),ProcesoExpedienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcesoExpediente) Is Nothing) Then
                Me.tableProcesoExpediente.InitVars
            End If
        End If
        Me.tableDEPENDENCIA_ACTUACIONES = CType(MyBase.Tables("DEPENDENCIA_ACTUACIONES"),DEPENDENCIA_ACTUACIONESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDEPENDENCIA_ACTUACIONES) Is Nothing) Then
                Me.tableDEPENDENCIA_ACTUACIONES.InitVars
            End If
        End If
        Me.tableCAT_CLIENTES = CType(MyBase.Tables("CAT_CLIENTES"),CAT_CLIENTESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCAT_CLIENTES) Is Nothing) Then
                Me.tableCAT_CLIENTES.InitVars
            End If
        End If
        Me.tableParetoConsolidadoDeuda = CType(MyBase.Tables("ParetoConsolidadoDeuda"),ParetoConsolidadoDeudaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParetoConsolidadoDeuda) Is Nothing) Then
                Me.tableParetoConsolidadoDeuda.InitVars
            End If
        End If
        Me.tableentescobradores = CType(MyBase.Tables("entescobradores"),entescobradoresDataTable)
        If (initTable = true) Then
            If (Not (Me.tableentescobradores) Is Nothing) Then
                Me.tableentescobradores.InitVars
            End If
        End If
        Me.tableentesdbf = CType(MyBase.Tables("entesdbf"),entesdbfDataTable)
        If (initTable = true) Then
            If (Not (Me.tableentesdbf) Is Nothing) Then
                Me.tableentesdbf.InitVars
            End If
        End If
        Me.tableactuaciones = CType(MyBase.Tables("actuaciones"),actuacionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableactuaciones) Is Nothing) Then
                Me.tableactuaciones.InitVars
            End If
        End If
        Me.tableDOCUMENTO_MASIVO_HEAD = CType(MyBase.Tables("DOCUMENTO_MASIVO_HEAD"),DOCUMENTO_MASIVO_HEADDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDOCUMENTO_MASIVO_HEAD) Is Nothing) Then
                Me.tableDOCUMENTO_MASIVO_HEAD.InitVars
            End If
        End If
        Me.tableDOCUMENTO_MASIVO = CType(MyBase.Tables("DOCUMENTO_MASIVO"),DOCUMENTO_MASIVODataTable)
        If (initTable = true) Then
            If (Not (Me.tableDOCUMENTO_MASIVO) Is Nothing) Then
                Me.tableDOCUMENTO_MASIVO.InitVars
            End If
        End If
        Me.tabledocumento_ultimoacto = CType(MyBase.Tables("documento_ultimoacto"),documento_ultimoactoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledocumento_ultimoacto) Is Nothing) Then
                Me.tabledocumento_ultimoacto.InitVars
            End If
        End If
        Me.tableProcesoAcumulado = CType(MyBase.Tables("ProcesoAcumulado"),ProcesoAcumuladoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcesoAcumulado) Is Nothing) Then
                Me.tableProcesoAcumulado.InitVars
            End If
        End If
        Me.tableProcesoAcumuladopredio = CType(MyBase.Tables("ProcesoAcumuladopredio"),ProcesoAcumuladopredioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcesoAcumuladopredio) Is Nothing) Then
                Me.tableProcesoAcumuladopredio.InitVars
            End If
        End If
        Me.tableIMAGEN = CType(MyBase.Tables("IMAGEN"),IMAGENDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIMAGEN) Is Nothing) Then
                Me.tableIMAGEN.InitVars
            End If
        End If
        Me.tableDOCUMENTO_IMPUESTO = CType(MyBase.Tables("DOCUMENTO_IMPUESTO"),DOCUMENTO_IMPUESTODataTable)
        If (initTable = true) Then
            If (Not (Me.tableDOCUMENTO_IMPUESTO) Is Nothing) Then
                Me.tableDOCUMENTO_IMPUESTO.InitVars
            End If
        End If
        Me.tableusuarios = CType(MyBase.Tables("usuarios"),usuariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableusuarios) Is Nothing) Then
                Me.tableusuarios.InitVars
            End If
        End If
        Me.tableACTOS_ADMINISTRATIVOS = CType(MyBase.Tables("ACTOS_ADMINISTRATIVOS"),ACTOS_ADMINISTRATIVOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACTOS_ADMINISTRATIVOS) Is Nothing) Then
                Me.tableACTOS_ADMINISTRATIVOS.InitVars
            End If
        End If
        Me.tableNROPREDIOXDEUDOR = CType(MyBase.Tables("NROPREDIOXDEUDOR"),NROPREDIOXDEUDORDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNROPREDIOXDEUDOR) Is Nothing) Then
                Me.tableNROPREDIOXDEUDOR.InitVars
            End If
        End If
        Me.tablegridUsuarios = CType(MyBase.Tables("gridUsuarios"),gridUsuariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablegridUsuarios) Is Nothing) Then
                Me.tablegridUsuarios.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DatasetForm"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DatasetForm.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMAESTRO_BANCOS = New MAESTRO_BANCOSDataTable
        MyBase.Tables.Add(Me.tableMAESTRO_BANCOS)
        Me.tableabogados = New abogadosDataTable
        MyBase.Tables.Add(Me.tableabogados)
        Me.tabledocumentos = New documentosDataTable
        MyBase.Tables.Add(Me.tabledocumentos)
        Me.tableetapas = New etapasDataTable
        MyBase.Tables.Add(Me.tableetapas)
        Me.tableetapa_acto = New etapa_actoDataTable
        MyBase.Tables.Add(Me.tableetapa_acto)
        Me.tableUSUARIO_PPALMENU = New USUARIO_PPALMENUDataTable
        MyBase.Tables.Add(Me.tableUSUARIO_PPALMENU)
        Me.tablePROPIETARIOS = New PROPIETARIOSDataTable
        MyBase.Tables.Add(Me.tablePROPIETARIOS)
        Me.tableTDIAS_FESTIVOS = New TDIAS_FESTIVOSDataTable
        MyBase.Tables.Add(Me.tableTDIAS_FESTIVOS)
        Me.tableTDIAS_FESTIVOS_form = New TDIAS_FESTIVOS_formDataTable
        MyBase.Tables.Add(Me.tableTDIAS_FESTIVOS_form)
        Me.tableProcesoExpediente = New ProcesoExpedienteDataTable
        MyBase.Tables.Add(Me.tableProcesoExpediente)
        Me.tableDEPENDENCIA_ACTUACIONES = New DEPENDENCIA_ACTUACIONESDataTable
        MyBase.Tables.Add(Me.tableDEPENDENCIA_ACTUACIONES)
        Me.tableCAT_CLIENTES = New CAT_CLIENTESDataTable
        MyBase.Tables.Add(Me.tableCAT_CLIENTES)
        Me.tableParetoConsolidadoDeuda = New ParetoConsolidadoDeudaDataTable
        MyBase.Tables.Add(Me.tableParetoConsolidadoDeuda)
        Me.tableentescobradores = New entescobradoresDataTable
        MyBase.Tables.Add(Me.tableentescobradores)
        Me.tableentesdbf = New entesdbfDataTable
        MyBase.Tables.Add(Me.tableentesdbf)
        Me.tableactuaciones = New actuacionesDataTable
        MyBase.Tables.Add(Me.tableactuaciones)
        Me.tableDOCUMENTO_MASIVO_HEAD = New DOCUMENTO_MASIVO_HEADDataTable
        MyBase.Tables.Add(Me.tableDOCUMENTO_MASIVO_HEAD)
        Me.tableDOCUMENTO_MASIVO = New DOCUMENTO_MASIVODataTable
        MyBase.Tables.Add(Me.tableDOCUMENTO_MASIVO)
        Me.tabledocumento_ultimoacto = New documento_ultimoactoDataTable
        MyBase.Tables.Add(Me.tabledocumento_ultimoacto)
        Me.tableProcesoAcumulado = New ProcesoAcumuladoDataTable
        MyBase.Tables.Add(Me.tableProcesoAcumulado)
        Me.tableProcesoAcumuladopredio = New ProcesoAcumuladopredioDataTable
        MyBase.Tables.Add(Me.tableProcesoAcumuladopredio)
        Me.tableIMAGEN = New IMAGENDataTable
        MyBase.Tables.Add(Me.tableIMAGEN)
        Me.tableDOCUMENTO_IMPUESTO = New DOCUMENTO_IMPUESTODataTable
        MyBase.Tables.Add(Me.tableDOCUMENTO_IMPUESTO)
        Me.tableusuarios = New usuariosDataTable
        MyBase.Tables.Add(Me.tableusuarios)
        Me.tableACTOS_ADMINISTRATIVOS = New ACTOS_ADMINISTRATIVOSDataTable
        MyBase.Tables.Add(Me.tableACTOS_ADMINISTRATIVOS)
        Me.tableNROPREDIOXDEUDOR = New NROPREDIOXDEUDORDataTable
        MyBase.Tables.Add(Me.tableNROPREDIOXDEUDOR)
        Me.tablegridUsuarios = New gridUsuariosDataTable
        MyBase.Tables.Add(Me.tablegridUsuarios)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMAESTRO_BANCOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeabogados() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedocumentos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeetapas() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeetapa_acto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUSUARIO_PPALMENU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePROPIETARIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTDIAS_FESTIVOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTDIAS_FESTIVOS_form() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcesoExpediente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDEPENDENCIA_ACTUACIONES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCAT_CLIENTES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeParetoConsolidadoDeuda() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeentescobradores() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeentesdbf() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeactuaciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDOCUMENTO_MASIVO_HEAD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDOCUMENTO_MASIVO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedocumento_ultimoacto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcesoAcumulado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcesoAcumuladopredio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIMAGEN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDOCUMENTO_IMPUESTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeusuarios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACTOS_ADMINISTRATIVOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNROPREDIOXDEUDOR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializegridUsuarios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DatasetForm = New DatasetForm
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MAESTRO_BANCOSRowChangeEventHandler(ByVal sender As Object, ByVal e As MAESTRO_BANCOSRowChangeEvent)
    
    Public Delegate Sub abogadosRowChangeEventHandler(ByVal sender As Object, ByVal e As abogadosRowChangeEvent)
    
    Public Delegate Sub documentosRowChangeEventHandler(ByVal sender As Object, ByVal e As documentosRowChangeEvent)
    
    Public Delegate Sub etapasRowChangeEventHandler(ByVal sender As Object, ByVal e As etapasRowChangeEvent)
    
    Public Delegate Sub etapa_actoRowChangeEventHandler(ByVal sender As Object, ByVal e As etapa_actoRowChangeEvent)
    
    Public Delegate Sub USUARIO_PPALMENURowChangeEventHandler(ByVal sender As Object, ByVal e As USUARIO_PPALMENURowChangeEvent)
    
    Public Delegate Sub PROPIETARIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As PROPIETARIOSRowChangeEvent)
    
    Public Delegate Sub TDIAS_FESTIVOSRowChangeEventHandler(ByVal sender As Object, ByVal e As TDIAS_FESTIVOSRowChangeEvent)
    
    Public Delegate Sub TDIAS_FESTIVOS_formRowChangeEventHandler(ByVal sender As Object, ByVal e As TDIAS_FESTIVOS_formRowChangeEvent)
    
    Public Delegate Sub ProcesoExpedienteRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcesoExpedienteRowChangeEvent)
    
    Public Delegate Sub DEPENDENCIA_ACTUACIONESRowChangeEventHandler(ByVal sender As Object, ByVal e As DEPENDENCIA_ACTUACIONESRowChangeEvent)
    
    Public Delegate Sub CAT_CLIENTESRowChangeEventHandler(ByVal sender As Object, ByVal e As CAT_CLIENTESRowChangeEvent)
    
    Public Delegate Sub ParetoConsolidadoDeudaRowChangeEventHandler(ByVal sender As Object, ByVal e As ParetoConsolidadoDeudaRowChangeEvent)
    
    Public Delegate Sub entescobradoresRowChangeEventHandler(ByVal sender As Object, ByVal e As entescobradoresRowChangeEvent)
    
    Public Delegate Sub entesdbfRowChangeEventHandler(ByVal sender As Object, ByVal e As entesdbfRowChangeEvent)
    
    Public Delegate Sub actuacionesRowChangeEventHandler(ByVal sender As Object, ByVal e As actuacionesRowChangeEvent)
    
    Public Delegate Sub DOCUMENTO_MASIVO_HEADRowChangeEventHandler(ByVal sender As Object, ByVal e As DOCUMENTO_MASIVO_HEADRowChangeEvent)
    
    Public Delegate Sub DOCUMENTO_MASIVORowChangeEventHandler(ByVal sender As Object, ByVal e As DOCUMENTO_MASIVORowChangeEvent)
    
    Public Delegate Sub documento_ultimoactoRowChangeEventHandler(ByVal sender As Object, ByVal e As documento_ultimoactoRowChangeEvent)
    
    Public Delegate Sub ProcesoAcumuladoRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcesoAcumuladoRowChangeEvent)
    
    Public Delegate Sub ProcesoAcumuladopredioRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcesoAcumuladopredioRowChangeEvent)
    
    Public Delegate Sub IMAGENRowChangeEventHandler(ByVal sender As Object, ByVal e As IMAGENRowChangeEvent)
    
    Public Delegate Sub DOCUMENTO_IMPUESTORowChangeEventHandler(ByVal sender As Object, ByVal e As DOCUMENTO_IMPUESTORowChangeEvent)
    
    Public Delegate Sub usuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As usuariosRowChangeEvent)
    
    Public Delegate Sub ACTOS_ADMINISTRATIVOSRowChangeEventHandler(ByVal sender As Object, ByVal e As ACTOS_ADMINISTRATIVOSRowChangeEvent)
    
    Public Delegate Sub NROPREDIOXDEUDORRowChangeEventHandler(ByVal sender As Object, ByVal e As NROPREDIOXDEUDORRowChangeEvent)
    
    Public Delegate Sub gridUsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As gridUsuariosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAESTRO_BANCOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of MAESTRO_BANCOSRow)
        
        Private columnBAN_CODIGO As Global.System.Data.DataColumn
        
        Private columnBAN_NOMBRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAESTRO_BANCOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BAN_CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAN_CODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BAN_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAN_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAESTRO_BANCOSRow
            Get
                Return CType(Me.Rows(index),MAESTRO_BANCOSRow)
            End Get
        End Property
        
        Public Event MAESTRO_BANCOSRowChanging As MAESTRO_BANCOSRowChangeEventHandler
        
        Public Event MAESTRO_BANCOSRowChanged As MAESTRO_BANCOSRowChangeEventHandler
        
        Public Event MAESTRO_BANCOSRowDeleting As MAESTRO_BANCOSRowChangeEventHandler
        
        Public Event MAESTRO_BANCOSRowDeleted As MAESTRO_BANCOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMAESTRO_BANCOSRow(ByVal row As MAESTRO_BANCOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMAESTRO_BANCOSRow(ByVal BAN_CODIGO As String, ByVal BAN_NOMBRE As String) As MAESTRO_BANCOSRow
            Dim rowMAESTRO_BANCOSRow As MAESTRO_BANCOSRow = CType(Me.NewRow,MAESTRO_BANCOSRow)
            Dim columnValuesArray() As Object = New Object() {BAN_CODIGO, BAN_NOMBRE}
            rowMAESTRO_BANCOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAESTRO_BANCOSRow)
            Return rowMAESTRO_BANCOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBAN_CODIGO(ByVal BAN_CODIGO As String) As MAESTRO_BANCOSRow
            Return CType(Me.Rows.Find(New Object() {BAN_CODIGO}),MAESTRO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAESTRO_BANCOSDataTable = CType(MyBase.Clone,MAESTRO_BANCOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAESTRO_BANCOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBAN_CODIGO = MyBase.Columns("BAN_CODIGO")
            Me.columnBAN_NOMBRE = MyBase.Columns("BAN_NOMBRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBAN_CODIGO = New Global.System.Data.DataColumn("BAN_CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAN_CODIGO)
            Me.columnBAN_NOMBRE = New Global.System.Data.DataColumn("BAN_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAN_NOMBRE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBAN_CODIGO}, true))
            Me.columnBAN_CODIGO.AllowDBNull = false
            Me.columnBAN_CODIGO.Unique = true
            Me.columnBAN_CODIGO.MaxLength = 2
            Me.columnBAN_NOMBRE.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMAESTRO_BANCOSRow() As MAESTRO_BANCOSRow
            Return CType(Me.NewRow,MAESTRO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAESTRO_BANCOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAESTRO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAESTRO_BANCOSRowChangedEvent) Is Nothing) Then
                RaiseEvent MAESTRO_BANCOSRowChanged(Me, New MAESTRO_BANCOSRowChangeEvent(CType(e.Row,MAESTRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAESTRO_BANCOSRowChangingEvent) Is Nothing) Then
                RaiseEvent MAESTRO_BANCOSRowChanging(Me, New MAESTRO_BANCOSRowChangeEvent(CType(e.Row,MAESTRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAESTRO_BANCOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAESTRO_BANCOSRowDeleted(Me, New MAESTRO_BANCOSRowChangeEvent(CType(e.Row,MAESTRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAESTRO_BANCOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAESTRO_BANCOSRowDeleting(Me, New MAESTRO_BANCOSRowChangeEvent(CType(e.Row,MAESTRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMAESTRO_BANCOSRow(ByVal row As MAESTRO_BANCOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAESTRO_BANCOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class abogadosDataTable
        Inherits Global.System.Data.TypedTableBase(Of abogadosRow)
        
        Private columncedula As Global.System.Data.DataColumn
        
        Private columnnombres As Global.System.Data.DataColumn
        
        Private columnapellidos As Global.System.Data.DataColumn
        
        Private columntarjetapro As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "abogados"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cedulaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncedula
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property apellidosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapellidos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tarjetaproColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntarjetapro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As abogadosRow
            Get
                Return CType(Me.Rows(index),abogadosRow)
            End Get
        End Property
        
        Public Event abogadosRowChanging As abogadosRowChangeEventHandler
        
        Public Event abogadosRowChanged As abogadosRowChangeEventHandler
        
        Public Event abogadosRowDeleting As abogadosRowChangeEventHandler
        
        Public Event abogadosRowDeleted As abogadosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddabogadosRow(ByVal row As abogadosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddabogadosRow(ByVal cedula As String, ByVal nombres As String, ByVal apellidos As String, ByVal tarjetapro As String) As abogadosRow
            Dim rowabogadosRow As abogadosRow = CType(Me.NewRow,abogadosRow)
            Dim columnValuesArray() As Object = New Object() {cedula, nombres, apellidos, tarjetapro}
            rowabogadosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowabogadosRow)
            Return rowabogadosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycedula(ByVal cedula As String) As abogadosRow
            Return CType(Me.Rows.Find(New Object() {cedula}),abogadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As abogadosDataTable = CType(MyBase.Clone,abogadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New abogadosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncedula = MyBase.Columns("cedula")
            Me.columnnombres = MyBase.Columns("nombres")
            Me.columnapellidos = MyBase.Columns("apellidos")
            Me.columntarjetapro = MyBase.Columns("tarjetapro")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncedula = New Global.System.Data.DataColumn("cedula", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncedula)
            Me.columnnombres = New Global.System.Data.DataColumn("nombres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombres)
            Me.columnapellidos = New Global.System.Data.DataColumn("apellidos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapellidos)
            Me.columntarjetapro = New Global.System.Data.DataColumn("tarjetapro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntarjetapro)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncedula}, true))
            Me.columncedula.AllowDBNull = false
            Me.columncedula.Unique = true
            Me.columncedula.MaxLength = 13
            Me.columnnombres.AllowDBNull = false
            Me.columnnombres.MaxLength = 50
            Me.columnapellidos.AllowDBNull = false
            Me.columnapellidos.MaxLength = 50
            Me.columntarjetapro.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewabogadosRow() As abogadosRow
            Return CType(Me.NewRow,abogadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New abogadosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(abogadosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.abogadosRowChangedEvent) Is Nothing) Then
                RaiseEvent abogadosRowChanged(Me, New abogadosRowChangeEvent(CType(e.Row,abogadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.abogadosRowChangingEvent) Is Nothing) Then
                RaiseEvent abogadosRowChanging(Me, New abogadosRowChangeEvent(CType(e.Row,abogadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.abogadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent abogadosRowDeleted(Me, New abogadosRowChangeEvent(CType(e.Row,abogadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.abogadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent abogadosRowDeleting(Me, New abogadosRowChangeEvent(CType(e.Row,abogadosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveabogadosRow(ByVal row As abogadosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "abogadosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class documentosDataTable
        Inherits Global.System.Data.TypedTableBase(Of documentosRow)
        
        Private columnentidad As Global.System.Data.DataColumn
        
        Private columnidacto As Global.System.Data.DataColumn
        
        Private columnruta As Global.System.Data.DataColumn
        
        Private columnnomarchivo As Global.System.Data.DataColumn
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnpaginas As Global.System.Data.DataColumn
        
        Private columnfecharadic As Global.System.Data.DataColumn
        
        Private columncobrador As Global.System.Data.DataColumn
        
        Private columndocexpediente As Global.System.Data.DataColumn
        
        Private columndocproceso As Global.System.Data.DataColumn
        
        Private columndocpredio_refecatrastal As Global.System.Data.DataColumn
        
        Private columndocacumulacio As Global.System.Data.DataColumn
        
        Private columndocfechadoc As Global.System.Data.DataColumn
        
        Private columndocObservaciones As Global.System.Data.DataColumn
        
        Private columndocanular As Global.System.Data.DataColumn
        
        Private columndocusuario As Global.System.Data.DataColumn
        
        Private columndocfechasystem As Global.System.Data.DataColumn
        
        Private columndocActivotributario As Global.System.Data.DataColumn
        
        Private columndocimpuesto As Global.System.Data.DataColumn
        
        Private columndocResolucion As Global.System.Data.DataColumn
        
        Private columndocActoPre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "documentos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property entidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnruta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nomarchivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnomarchivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paginasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaginas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecharadicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecharadic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cobradorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncobrador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docexpedienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocexpediente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docprocesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocproceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docpredio_refecatrastalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocpredio_refecatrastal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docacumulacioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocacumulacio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docfechadocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocfechadoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docanularColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocanular
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docusuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocusuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docfechasystemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocfechasystem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docActivotributarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocActivotributario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docimpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocimpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docResolucionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocResolucion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docActoPreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocActoPre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As documentosRow
            Get
                Return CType(Me.Rows(index),documentosRow)
            End Get
        End Property
        
        Public Event documentosRowChanging As documentosRowChangeEventHandler
        
        Public Event documentosRowChanged As documentosRowChangeEventHandler
        
        Public Event documentosRowDeleting As documentosRowChangeEventHandler
        
        Public Event documentosRowDeleted As documentosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddocumentosRow(ByVal row As documentosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddocumentosRow( _
                    ByVal entidad As String,  _
                    ByVal idacto As String,  _
                    ByVal ruta As String,  _
                    ByVal nomarchivo As String,  _
                    ByVal paginas As Decimal,  _
                    ByVal fecharadic As Date,  _
                    ByVal cobrador As String,  _
                    ByVal docexpediente As String,  _
                    ByVal docproceso As String,  _
                    ByVal docpredio_refecatrastal As String,  _
                    ByVal docacumulacio As String,  _
                    ByVal docfechadoc As Date,  _
                    ByVal docObservaciones As String,  _
                    ByVal docanular As Boolean,  _
                    ByVal docusuario As String,  _
                    ByVal docfechasystem As Date,  _
                    ByVal docActivotributario As String,  _
                    ByVal docimpuesto As Integer,  _
                    ByVal docResolucion As String,  _
                    ByVal docActoPre As String) As documentosRow
            Dim rowdocumentosRow As documentosRow = CType(Me.NewRow,documentosRow)
            Dim columnValuesArray() As Object = New Object() {entidad, idacto, ruta, nomarchivo, Nothing, paginas, fecharadic, cobrador, docexpediente, docproceso, docpredio_refecatrastal, docacumulacio, docfechadoc, docObservaciones, docanular, docusuario, docfechasystem, docActivotributario, docimpuesto, docResolucion, docActoPre}
            rowdocumentosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdocumentosRow)
            Return rowdocumentosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid(ByVal id As Decimal) As documentosRow
            Return CType(Me.Rows.Find(New Object() {id}),documentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As documentosDataTable = CType(MyBase.Clone,documentosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New documentosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnentidad = MyBase.Columns("entidad")
            Me.columnidacto = MyBase.Columns("idacto")
            Me.columnruta = MyBase.Columns("ruta")
            Me.columnnomarchivo = MyBase.Columns("nomarchivo")
            Me.columnid = MyBase.Columns("id")
            Me.columnpaginas = MyBase.Columns("paginas")
            Me.columnfecharadic = MyBase.Columns("fecharadic")
            Me.columncobrador = MyBase.Columns("cobrador")
            Me.columndocexpediente = MyBase.Columns("docexpediente")
            Me.columndocproceso = MyBase.Columns("docproceso")
            Me.columndocpredio_refecatrastal = MyBase.Columns("docpredio_refecatrastal")
            Me.columndocacumulacio = MyBase.Columns("docacumulacio")
            Me.columndocfechadoc = MyBase.Columns("docfechadoc")
            Me.columndocObservaciones = MyBase.Columns("docObservaciones")
            Me.columndocanular = MyBase.Columns("docanular")
            Me.columndocusuario = MyBase.Columns("docusuario")
            Me.columndocfechasystem = MyBase.Columns("docfechasystem")
            Me.columndocActivotributario = MyBase.Columns("docActivotributario")
            Me.columndocimpuesto = MyBase.Columns("docimpuesto")
            Me.columndocResolucion = MyBase.Columns("docResolucion")
            Me.columndocActoPre = MyBase.Columns("docActoPre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnentidad = New Global.System.Data.DataColumn("entidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentidad)
            Me.columnidacto = New Global.System.Data.DataColumn("idacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidacto)
            Me.columnruta = New Global.System.Data.DataColumn("ruta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnruta)
            Me.columnnomarchivo = New Global.System.Data.DataColumn("nomarchivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnomarchivo)
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnpaginas = New Global.System.Data.DataColumn("paginas", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaginas)
            Me.columnfecharadic = New Global.System.Data.DataColumn("fecharadic", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecharadic)
            Me.columncobrador = New Global.System.Data.DataColumn("cobrador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncobrador)
            Me.columndocexpediente = New Global.System.Data.DataColumn("docexpediente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocexpediente)
            Me.columndocproceso = New Global.System.Data.DataColumn("docproceso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocproceso)
            Me.columndocpredio_refecatrastal = New Global.System.Data.DataColumn("docpredio_refecatrastal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocpredio_refecatrastal)
            Me.columndocacumulacio = New Global.System.Data.DataColumn("docacumulacio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocacumulacio)
            Me.columndocfechadoc = New Global.System.Data.DataColumn("docfechadoc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocfechadoc)
            Me.columndocObservaciones = New Global.System.Data.DataColumn("docObservaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocObservaciones)
            Me.columndocanular = New Global.System.Data.DataColumn("docanular", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocanular)
            Me.columndocusuario = New Global.System.Data.DataColumn("docusuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocusuario)
            Me.columndocfechasystem = New Global.System.Data.DataColumn("docfechasystem", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocfechasystem)
            Me.columndocActivotributario = New Global.System.Data.DataColumn("docActivotributario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocActivotributario)
            Me.columndocimpuesto = New Global.System.Data.DataColumn("docimpuesto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocimpuesto)
            Me.columndocResolucion = New Global.System.Data.DataColumn("docResolucion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocResolucion)
            Me.columndocActoPre = New Global.System.Data.DataColumn("docActoPre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocActoPre)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnentidad.AllowDBNull = false
            Me.columnentidad.MaxLength = 50
            Me.columnidacto.AllowDBNull = false
            Me.columnidacto.MaxLength = 50
            Me.columnruta.AllowDBNull = false
            Me.columnruta.MaxLength = 250
            Me.columnnomarchivo.AllowDBNull = false
            Me.columnnomarchivo.MaxLength = 100
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnid.Unique = true
            Me.columnpaginas.AllowDBNull = false
            Me.columncobrador.MaxLength = 50
            Me.columndocexpediente.MaxLength = 50
            Me.columndocproceso.MaxLength = 50
            Me.columndocpredio_refecatrastal.MaxLength = 50
            Me.columndocacumulacio.MaxLength = 250
            Me.columndocObservaciones.MaxLength = 300
            Me.columndocusuario.MaxLength = 50
            Me.columndocActivotributario.MaxLength = 1
            Me.columndocResolucion.MaxLength = 50
            Me.columndocActoPre.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdocumentosRow() As documentosRow
            Return CType(Me.NewRow,documentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New documentosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(documentosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.documentosRowChangedEvent) Is Nothing) Then
                RaiseEvent documentosRowChanged(Me, New documentosRowChangeEvent(CType(e.Row,documentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.documentosRowChangingEvent) Is Nothing) Then
                RaiseEvent documentosRowChanging(Me, New documentosRowChangeEvent(CType(e.Row,documentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.documentosRowDeletedEvent) Is Nothing) Then
                RaiseEvent documentosRowDeleted(Me, New documentosRowChangeEvent(CType(e.Row,documentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.documentosRowDeletingEvent) Is Nothing) Then
                RaiseEvent documentosRowDeleting(Me, New documentosRowChangeEvent(CType(e.Row,documentosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedocumentosRow(ByVal row As documentosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "documentosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class etapasDataTable
        Inherits Global.System.Data.TypedTableBase(Of etapasRow)
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "etapas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As etapasRow
            Get
                Return CType(Me.Rows(index),etapasRow)
            End Get
        End Property
        
        Public Event etapasRowChanging As etapasRowChangeEventHandler
        
        Public Event etapasRowChanged As etapasRowChangeEventHandler
        
        Public Event etapasRowDeleting As etapasRowChangeEventHandler
        
        Public Event etapasRowDeleted As etapasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddetapasRow(ByVal row As etapasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddetapasRow(ByVal codigo As String, ByVal nombre As String) As etapasRow
            Dim rowetapasRow As etapasRow = CType(Me.NewRow,etapasRow)
            Dim columnValuesArray() As Object = New Object() {codigo, nombre}
            rowetapasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowetapasRow)
            Return rowetapasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As etapasDataTable = CType(MyBase.Clone,etapasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New etapasDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 2
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 160
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewetapasRow() As etapasRow
            Return CType(Me.NewRow,etapasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New etapasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(etapasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.etapasRowChangedEvent) Is Nothing) Then
                RaiseEvent etapasRowChanged(Me, New etapasRowChangeEvent(CType(e.Row,etapasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.etapasRowChangingEvent) Is Nothing) Then
                RaiseEvent etapasRowChanging(Me, New etapasRowChangeEvent(CType(e.Row,etapasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.etapasRowDeletedEvent) Is Nothing) Then
                RaiseEvent etapasRowDeleted(Me, New etapasRowChangeEvent(CType(e.Row,etapasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.etapasRowDeletingEvent) Is Nothing) Then
                RaiseEvent etapasRowDeleting(Me, New etapasRowChangeEvent(CType(e.Row,etapasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveetapasRow(ByVal row As etapasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "etapasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class etapa_actoDataTable
        Inherits Global.System.Data.TypedTableBase(Of etapa_actoRow)
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnidetapa As Global.System.Data.DataColumn
        
        Private columnnometapa As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "etapa_acto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idetapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidetapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nometapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnometapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As etapa_actoRow
            Get
                Return CType(Me.Rows(index),etapa_actoRow)
            End Get
        End Property
        
        Public Event etapa_actoRowChanging As etapa_actoRowChangeEventHandler
        
        Public Event etapa_actoRowChanged As etapa_actoRowChangeEventHandler
        
        Public Event etapa_actoRowDeleting As etapa_actoRowChangeEventHandler
        
        Public Event etapa_actoRowDeleted As etapa_actoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addetapa_actoRow(ByVal row As etapa_actoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addetapa_actoRow(ByVal codigo As String, ByVal nombre As String, ByVal idetapa As String, ByVal nometapa As String) As etapa_actoRow
            Dim rowetapa_actoRow As etapa_actoRow = CType(Me.NewRow,etapa_actoRow)
            Dim columnValuesArray() As Object = New Object() {codigo, nombre, idetapa, nometapa}
            rowetapa_actoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowetapa_actoRow)
            Return rowetapa_actoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As etapa_actoDataTable = CType(MyBase.Clone,etapa_actoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New etapa_actoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnidetapa = MyBase.Columns("idetapa")
            Me.columnnometapa = MyBase.Columns("nometapa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnidetapa = New Global.System.Data.DataColumn("idetapa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidetapa)
            Me.columnnometapa = New Global.System.Data.DataColumn("nometapa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnometapa)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newetapa_actoRow() As etapa_actoRow
            Return CType(Me.NewRow,etapa_actoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New etapa_actoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(etapa_actoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.etapa_actoRowChangedEvent) Is Nothing) Then
                RaiseEvent etapa_actoRowChanged(Me, New etapa_actoRowChangeEvent(CType(e.Row,etapa_actoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.etapa_actoRowChangingEvent) Is Nothing) Then
                RaiseEvent etapa_actoRowChanging(Me, New etapa_actoRowChangeEvent(CType(e.Row,etapa_actoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.etapa_actoRowDeletedEvent) Is Nothing) Then
                RaiseEvent etapa_actoRowDeleted(Me, New etapa_actoRowChangeEvent(CType(e.Row,etapa_actoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.etapa_actoRowDeletingEvent) Is Nothing) Then
                RaiseEvent etapa_actoRowDeleting(Me, New etapa_actoRowChangeEvent(CType(e.Row,etapa_actoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeetapa_actoRow(ByVal row As etapa_actoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "etapa_actoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class USUARIO_PPALMENUDataTable
        Inherits Global.System.Data.TypedTableBase(Of USUARIO_PPALMENURow)
        
        Private columnME_USUARIO As Global.System.Data.DataColumn
        
        Private columnME_OPCIONMENU As Global.System.Data.DataColumn
        
        Private columnME_PERMISO As Global.System.Data.DataColumn
        
        Private columnME_OPCIONINDEX As Global.System.Data.DataColumn
        
        Private columnME_MENU As Global.System.Data.DataColumn
        
        Private columnME_DETALLEOPCION As Global.System.Data.DataColumn
        
        Private columnME_CONTADORME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "USUARIO_PPALMENU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_OPCIONMENUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_OPCIONMENU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_PERMISOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_PERMISO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_OPCIONINDEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_OPCIONINDEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_MENUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_MENU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_DETALLEOPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_DETALLEOPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ME_CONTADORMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnME_CONTADORME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As USUARIO_PPALMENURow
            Get
                Return CType(Me.Rows(index),USUARIO_PPALMENURow)
            End Get
        End Property
        
        Public Event USUARIO_PPALMENURowChanging As USUARIO_PPALMENURowChangeEventHandler
        
        Public Event USUARIO_PPALMENURowChanged As USUARIO_PPALMENURowChangeEventHandler
        
        Public Event USUARIO_PPALMENURowDeleting As USUARIO_PPALMENURowChangeEventHandler
        
        Public Event USUARIO_PPALMENURowDeleted As USUARIO_PPALMENURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUSUARIO_PPALMENURow(ByVal row As USUARIO_PPALMENURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUSUARIO_PPALMENURow(ByVal ME_USUARIO As String, ByVal ME_OPCIONMENU As String, ByVal ME_PERMISO As Boolean, ByVal ME_OPCIONINDEX As Integer, ByVal ME_MENU As String, ByVal ME_DETALLEOPCION As String) As USUARIO_PPALMENURow
            Dim rowUSUARIO_PPALMENURow As USUARIO_PPALMENURow = CType(Me.NewRow,USUARIO_PPALMENURow)
            Dim columnValuesArray() As Object = New Object() {ME_USUARIO, ME_OPCIONMENU, ME_PERMISO, ME_OPCIONINDEX, ME_MENU, ME_DETALLEOPCION, Nothing}
            rowUSUARIO_PPALMENURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUSUARIO_PPALMENURow)
            Return rowUSUARIO_PPALMENURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByME_CONTADORME(ByVal ME_CONTADORME As Integer) As USUARIO_PPALMENURow
            Return CType(Me.Rows.Find(New Object() {ME_CONTADORME}),USUARIO_PPALMENURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As USUARIO_PPALMENUDataTable = CType(MyBase.Clone,USUARIO_PPALMENUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New USUARIO_PPALMENUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnME_USUARIO = MyBase.Columns("ME_USUARIO")
            Me.columnME_OPCIONMENU = MyBase.Columns("ME_OPCIONMENU")
            Me.columnME_PERMISO = MyBase.Columns("ME_PERMISO")
            Me.columnME_OPCIONINDEX = MyBase.Columns("ME_OPCIONINDEX")
            Me.columnME_MENU = MyBase.Columns("ME_MENU")
            Me.columnME_DETALLEOPCION = MyBase.Columns("ME_DETALLEOPCION")
            Me.columnME_CONTADORME = MyBase.Columns("ME_CONTADORME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnME_USUARIO = New Global.System.Data.DataColumn("ME_USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_USUARIO)
            Me.columnME_OPCIONMENU = New Global.System.Data.DataColumn("ME_OPCIONMENU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_OPCIONMENU)
            Me.columnME_PERMISO = New Global.System.Data.DataColumn("ME_PERMISO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_PERMISO)
            Me.columnME_OPCIONINDEX = New Global.System.Data.DataColumn("ME_OPCIONINDEX", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_OPCIONINDEX)
            Me.columnME_MENU = New Global.System.Data.DataColumn("ME_MENU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_MENU)
            Me.columnME_DETALLEOPCION = New Global.System.Data.DataColumn("ME_DETALLEOPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_DETALLEOPCION)
            Me.columnME_CONTADORME = New Global.System.Data.DataColumn("ME_CONTADORME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnME_CONTADORME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnME_CONTADORME}, true))
            Me.columnME_USUARIO.AllowDBNull = false
            Me.columnME_USUARIO.MaxLength = 50
            Me.columnME_OPCIONMENU.MaxLength = 50
            Me.columnME_MENU.MaxLength = 50
            Me.columnME_DETALLEOPCION.MaxLength = 2147483647
            Me.columnME_CONTADORME.AutoIncrement = true
            Me.columnME_CONTADORME.AutoIncrementSeed = -1
            Me.columnME_CONTADORME.AutoIncrementStep = -1
            Me.columnME_CONTADORME.AllowDBNull = false
            Me.columnME_CONTADORME.ReadOnly = true
            Me.columnME_CONTADORME.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUSUARIO_PPALMENURow() As USUARIO_PPALMENURow
            Return CType(Me.NewRow,USUARIO_PPALMENURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New USUARIO_PPALMENURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(USUARIO_PPALMENURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.USUARIO_PPALMENURowChangedEvent) Is Nothing) Then
                RaiseEvent USUARIO_PPALMENURowChanged(Me, New USUARIO_PPALMENURowChangeEvent(CType(e.Row,USUARIO_PPALMENURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.USUARIO_PPALMENURowChangingEvent) Is Nothing) Then
                RaiseEvent USUARIO_PPALMENURowChanging(Me, New USUARIO_PPALMENURowChangeEvent(CType(e.Row,USUARIO_PPALMENURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.USUARIO_PPALMENURowDeletedEvent) Is Nothing) Then
                RaiseEvent USUARIO_PPALMENURowDeleted(Me, New USUARIO_PPALMENURowChangeEvent(CType(e.Row,USUARIO_PPALMENURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.USUARIO_PPALMENURowDeletingEvent) Is Nothing) Then
                RaiseEvent USUARIO_PPALMENURowDeleting(Me, New USUARIO_PPALMENURowChangeEvent(CType(e.Row,USUARIO_PPALMENURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUSUARIO_PPALMENURow(ByVal row As USUARIO_PPALMENURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "USUARIO_PPALMENUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROPIETARIOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PROPIETARIOSRow)
        
        Private columnCEDULA As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnTELEFONO As Global.System.Data.DataColumn
        
        Private columnCOBRADOR As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROPIETARIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEDULAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEDULA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TELEFONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COBRADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOBRADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROPIETARIOSRow
            Get
                Return CType(Me.Rows(index),PROPIETARIOSRow)
            End Get
        End Property
        
        Public Event PROPIETARIOSRowChanging As PROPIETARIOSRowChangeEventHandler
        
        Public Event PROPIETARIOSRowChanged As PROPIETARIOSRowChangeEventHandler
        
        Public Event PROPIETARIOSRowDeleting As PROPIETARIOSRowChangeEventHandler
        
        Public Event PROPIETARIOSRowDeleted As PROPIETARIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPROPIETARIOSRow(ByVal row As PROPIETARIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPROPIETARIOSRow(ByVal CEDULA As String, ByVal NOMBRE As String, ByVal DIRECCION As String, ByVal TELEFONO As String, ByVal COBRADOR As String, ByVal ESTADO As Boolean) As PROPIETARIOSRow
            Dim rowPROPIETARIOSRow As PROPIETARIOSRow = CType(Me.NewRow,PROPIETARIOSRow)
            Dim columnValuesArray() As Object = New Object() {CEDULA, NOMBRE, DIRECCION, TELEFONO, COBRADOR, ESTADO}
            rowPROPIETARIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROPIETARIOSRow)
            Return rowPROPIETARIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCEDULA(ByVal CEDULA As String) As PROPIETARIOSRow
            Return CType(Me.Rows.Find(New Object() {CEDULA}),PROPIETARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROPIETARIOSDataTable = CType(MyBase.Clone,PROPIETARIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROPIETARIOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCEDULA = MyBase.Columns("CEDULA")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnTELEFONO = MyBase.Columns("TELEFONO")
            Me.columnCOBRADOR = MyBase.Columns("COBRADOR")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCEDULA = New Global.System.Data.DataColumn("CEDULA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEDULA)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnTELEFONO = New Global.System.Data.DataColumn("TELEFONO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFONO)
            Me.columnCOBRADOR = New Global.System.Data.DataColumn("COBRADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOBRADOR)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCEDULA}, true))
            Me.columnCEDULA.AllowDBNull = false
            Me.columnCEDULA.Unique = true
            Me.columnCEDULA.MaxLength = 15
            Me.columnNOMBRE.MaxLength = 40
            Me.columnDIRECCION.MaxLength = 60
            Me.columnTELEFONO.MaxLength = 12
            Me.columnCOBRADOR.MaxLength = 2
            Me.columnESTADO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPROPIETARIOSRow() As PROPIETARIOSRow
            Return CType(Me.NewRow,PROPIETARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROPIETARIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROPIETARIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROPIETARIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent PROPIETARIOSRowChanged(Me, New PROPIETARIOSRowChangeEvent(CType(e.Row,PROPIETARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROPIETARIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent PROPIETARIOSRowChanging(Me, New PROPIETARIOSRowChangeEvent(CType(e.Row,PROPIETARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROPIETARIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROPIETARIOSRowDeleted(Me, New PROPIETARIOSRowChangeEvent(CType(e.Row,PROPIETARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROPIETARIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROPIETARIOSRowDeleting(Me, New PROPIETARIOSRowChangeEvent(CType(e.Row,PROPIETARIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePROPIETARIOSRow(ByVal row As PROPIETARIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROPIETARIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TDIAS_FESTIVOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of TDIAS_FESTIVOSRow)
        
        Private columnID_DNL As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnANNIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TDIAS_FESTIVOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_DNLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_DNL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TDIAS_FESTIVOSRow
            Get
                Return CType(Me.Rows(index),TDIAS_FESTIVOSRow)
            End Get
        End Property
        
        Public Event TDIAS_FESTIVOSRowChanging As TDIAS_FESTIVOSRowChangeEventHandler
        
        Public Event TDIAS_FESTIVOSRowChanged As TDIAS_FESTIVOSRowChangeEventHandler
        
        Public Event TDIAS_FESTIVOSRowDeleting As TDIAS_FESTIVOSRowChangeEventHandler
        
        Public Event TDIAS_FESTIVOSRowDeleted As TDIAS_FESTIVOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTDIAS_FESTIVOSRow(ByVal row As TDIAS_FESTIVOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTDIAS_FESTIVOSRow(ByVal FECHA As String, ByVal DESCRIPCION As String, ByVal ANNIO As String) As TDIAS_FESTIVOSRow
            Dim rowTDIAS_FESTIVOSRow As TDIAS_FESTIVOSRow = CType(Me.NewRow,TDIAS_FESTIVOSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FECHA, DESCRIPCION, ANNIO}
            rowTDIAS_FESTIVOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTDIAS_FESTIVOSRow)
            Return rowTDIAS_FESTIVOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID_DNL(ByVal ID_DNL As Integer) As TDIAS_FESTIVOSRow
            Return CType(Me.Rows.Find(New Object() {ID_DNL}),TDIAS_FESTIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TDIAS_FESTIVOSDataTable = CType(MyBase.Clone,TDIAS_FESTIVOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TDIAS_FESTIVOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_DNL = MyBase.Columns("ID_DNL")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnANNIO = MyBase.Columns("ANNIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_DNL = New Global.System.Data.DataColumn("ID_DNL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_DNL)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnANNIO = New Global.System.Data.DataColumn("ANNIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID_DNL}, true))
            Me.columnID_DNL.AutoIncrement = true
            Me.columnID_DNL.AutoIncrementSeed = -1
            Me.columnID_DNL.AutoIncrementStep = -1
            Me.columnID_DNL.AllowDBNull = false
            Me.columnID_DNL.ReadOnly = true
            Me.columnID_DNL.Unique = true
            Me.columnFECHA.MaxLength = 5
            Me.columnDESCRIPCION.MaxLength = 50
            Me.columnANNIO.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTDIAS_FESTIVOSRow() As TDIAS_FESTIVOSRow
            Return CType(Me.NewRow,TDIAS_FESTIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TDIAS_FESTIVOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TDIAS_FESTIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TDIAS_FESTIVOSRowChangedEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOSRowChanged(Me, New TDIAS_FESTIVOSRowChangeEvent(CType(e.Row,TDIAS_FESTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TDIAS_FESTIVOSRowChangingEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOSRowChanging(Me, New TDIAS_FESTIVOSRowChangeEvent(CType(e.Row,TDIAS_FESTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TDIAS_FESTIVOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOSRowDeleted(Me, New TDIAS_FESTIVOSRowChangeEvent(CType(e.Row,TDIAS_FESTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TDIAS_FESTIVOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOSRowDeleting(Me, New TDIAS_FESTIVOSRowChangeEvent(CType(e.Row,TDIAS_FESTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTDIAS_FESTIVOSRow(ByVal row As TDIAS_FESTIVOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TDIAS_FESTIVOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TDIAS_FESTIVOS_formDataTable
        Inherits Global.System.Data.TypedTableBase(Of TDIAS_FESTIVOS_formRow)
        
        Private columnID_DNL As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TDIAS_FESTIVOS_form"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_DNLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_DNL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TDIAS_FESTIVOS_formRow
            Get
                Return CType(Me.Rows(index),TDIAS_FESTIVOS_formRow)
            End Get
        End Property
        
        Public Event TDIAS_FESTIVOS_formRowChanging As TDIAS_FESTIVOS_formRowChangeEventHandler
        
        Public Event TDIAS_FESTIVOS_formRowChanged As TDIAS_FESTIVOS_formRowChangeEventHandler
        
        Public Event TDIAS_FESTIVOS_formRowDeleting As TDIAS_FESTIVOS_formRowChangeEventHandler
        
        Public Event TDIAS_FESTIVOS_formRowDeleted As TDIAS_FESTIVOS_formRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTDIAS_FESTIVOS_formRow(ByVal row As TDIAS_FESTIVOS_formRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTDIAS_FESTIVOS_formRow(ByVal ID_DNL As String, ByVal FECHA As String, ByVal DESCRIPCION As String) As TDIAS_FESTIVOS_formRow
            Dim rowTDIAS_FESTIVOS_formRow As TDIAS_FESTIVOS_formRow = CType(Me.NewRow,TDIAS_FESTIVOS_formRow)
            Dim columnValuesArray() As Object = New Object() {ID_DNL, FECHA, DESCRIPCION}
            rowTDIAS_FESTIVOS_formRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTDIAS_FESTIVOS_formRow)
            Return rowTDIAS_FESTIVOS_formRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TDIAS_FESTIVOS_formDataTable = CType(MyBase.Clone,TDIAS_FESTIVOS_formDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TDIAS_FESTIVOS_formDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_DNL = MyBase.Columns("ID_DNL")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_DNL = New Global.System.Data.DataColumn("ID_DNL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_DNL)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTDIAS_FESTIVOS_formRow() As TDIAS_FESTIVOS_formRow
            Return CType(Me.NewRow,TDIAS_FESTIVOS_formRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TDIAS_FESTIVOS_formRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TDIAS_FESTIVOS_formRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TDIAS_FESTIVOS_formRowChangedEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOS_formRowChanged(Me, New TDIAS_FESTIVOS_formRowChangeEvent(CType(e.Row,TDIAS_FESTIVOS_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TDIAS_FESTIVOS_formRowChangingEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOS_formRowChanging(Me, New TDIAS_FESTIVOS_formRowChangeEvent(CType(e.Row,TDIAS_FESTIVOS_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TDIAS_FESTIVOS_formRowDeletedEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOS_formRowDeleted(Me, New TDIAS_FESTIVOS_formRowChangeEvent(CType(e.Row,TDIAS_FESTIVOS_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TDIAS_FESTIVOS_formRowDeletingEvent) Is Nothing) Then
                RaiseEvent TDIAS_FESTIVOS_formRowDeleting(Me, New TDIAS_FESTIVOS_formRowChangeEvent(CType(e.Row,TDIAS_FESTIVOS_formRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTDIAS_FESTIVOS_formRow(ByVal row As TDIAS_FESTIVOS_formRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TDIAS_FESTIVOS_formDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcesoExpedienteDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProcesoExpedienteRow)
        
        Private columnACTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnFECHA_R As Global.System.Data.DataColumn
        
        Private columnFECHA_P As Global.System.Data.DataColumn
        
        Private columnDIAS As Global.System.Data.DataColumn
        
        Private columnTERMINO As Global.System.Data.DataColumn
        
        Private columnNOMARCHIVO As Global.System.Data.DataColumn
        
        Private columnPAGINAS As Global.System.Data.DataColumn
        
        Private columnENTIDAD As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnDOCOBSERVACIONES As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcesoExpediente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TERMINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTERMINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMARCHIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMARCHIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAGINASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAGINAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCOBSERVACIONESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCOBSERVACIONES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcesoExpedienteRow
            Get
                Return CType(Me.Rows(index),ProcesoExpedienteRow)
            End Get
        End Property
        
        Public Event ProcesoExpedienteRowChanging As ProcesoExpedienteRowChangeEventHandler
        
        Public Event ProcesoExpedienteRowChanged As ProcesoExpedienteRowChangeEventHandler
        
        Public Event ProcesoExpedienteRowDeleting As ProcesoExpedienteRowChangeEventHandler
        
        Public Event ProcesoExpedienteRowDeleted As ProcesoExpedienteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcesoExpedienteRow(ByVal row As ProcesoExpedienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcesoExpedienteRow(ByVal ACTO As String, ByVal DESCRIPCION As String, ByVal FECHA_R As Date, ByVal FECHA_P As Date, ByVal DIAS As String, ByVal TERMINO As String, ByVal NOMARCHIVO As String, ByVal PAGINAS As String, ByVal ENTIDAD As String, ByVal NOMBRE As String, ByVal DOCOBSERVACIONES As String) As ProcesoExpedienteRow
            Dim rowProcesoExpedienteRow As ProcesoExpedienteRow = CType(Me.NewRow,ProcesoExpedienteRow)
            Dim columnValuesArray() As Object = New Object() {ACTO, DESCRIPCION, FECHA_R, FECHA_P, DIAS, TERMINO, NOMARCHIVO, PAGINAS, ENTIDAD, NOMBRE, DOCOBSERVACIONES}
            rowProcesoExpedienteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcesoExpedienteRow)
            Return rowProcesoExpedienteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcesoExpedienteDataTable = CType(MyBase.Clone,ProcesoExpedienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcesoExpedienteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACTO = MyBase.Columns("ACTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnFECHA_R = MyBase.Columns("FECHA_R")
            Me.columnFECHA_P = MyBase.Columns("FECHA_P")
            Me.columnDIAS = MyBase.Columns("DIAS")
            Me.columnTERMINO = MyBase.Columns("TERMINO")
            Me.columnNOMARCHIVO = MyBase.Columns("NOMARCHIVO")
            Me.columnPAGINAS = MyBase.Columns("PAGINAS")
            Me.columnENTIDAD = MyBase.Columns("ENTIDAD")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnDOCOBSERVACIONES = MyBase.Columns("DOCOBSERVACIONES")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACTO = New Global.System.Data.DataColumn("ACTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnFECHA_R = New Global.System.Data.DataColumn("FECHA_R", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_R)
            Me.columnFECHA_P = New Global.System.Data.DataColumn("FECHA_P", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_P)
            Me.columnDIAS = New Global.System.Data.DataColumn("DIAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIAS)
            Me.columnTERMINO = New Global.System.Data.DataColumn("TERMINO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTERMINO)
            Me.columnNOMARCHIVO = New Global.System.Data.DataColumn("NOMARCHIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMARCHIVO)
            Me.columnPAGINAS = New Global.System.Data.DataColumn("PAGINAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAGINAS)
            Me.columnENTIDAD = New Global.System.Data.DataColumn("ENTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENTIDAD)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnDOCOBSERVACIONES = New Global.System.Data.DataColumn("DOCOBSERVACIONES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCOBSERVACIONES)
            Me.columnACTO.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcesoExpedienteRow() As ProcesoExpedienteRow
            Return CType(Me.NewRow,ProcesoExpedienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcesoExpedienteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcesoExpedienteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcesoExpedienteRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowChanged(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcesoExpedienteRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowChanging(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcesoExpedienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowDeleted(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcesoExpedienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcesoExpedienteRowDeleting(Me, New ProcesoExpedienteRowChangeEvent(CType(e.Row,ProcesoExpedienteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcesoExpedienteRow(ByVal row As ProcesoExpedienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcesoExpedienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DEPENDENCIA_ACTUACIONESDataTable
        Inherits Global.System.Data.TypedTableBase(Of DEPENDENCIA_ACTUACIONESRow)
        
        Private columnDEP_CODACTO As Global.System.Data.DataColumn
        
        Private columnDEP_NOMBREPPAL As Global.System.Data.DataColumn
        
        Private columnDEP_DEPENDENCIA As Global.System.Data.DataColumn
        
        Private columnDEP_DESCRIPCION As Global.System.Data.DataColumn
        
        Private columnDEP_TERMINO As Global.System.Data.DataColumn
        
        Private columnDEP_TIPOTERMINO As Global.System.Data.DataColumn
        
        Private columnDEP_EXCEPCION As Global.System.Data.DataColumn
        
        Private columnDEP_ETAPA As Global.System.Data.DataColumn
        
        Private columnDEP_HISTOPPAL As Global.System.Data.DataColumn
        
        Private columnDEP_ORDEN As Global.System.Data.DataColumn
        
        Private columnDEP_CONMOV As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DEPENDENCIA_ACTUACIONES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_CODACTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_CODACTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_NOMBREPPALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_NOMBREPPAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_DEPENDENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_DEPENDENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_DESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_TERMINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_TERMINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_TIPOTERMINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_TIPOTERMINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_EXCEPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_EXCEPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_ETAPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_ETAPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_HISTOPPALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_HISTOPPAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_ORDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_ORDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEP_CONMOVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEP_CONMOV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DEPENDENCIA_ACTUACIONESRow
            Get
                Return CType(Me.Rows(index),DEPENDENCIA_ACTUACIONESRow)
            End Get
        End Property
        
        Public Event DEPENDENCIA_ACTUACIONESRowChanging As DEPENDENCIA_ACTUACIONESRowChangeEventHandler
        
        Public Event DEPENDENCIA_ACTUACIONESRowChanged As DEPENDENCIA_ACTUACIONESRowChangeEventHandler
        
        Public Event DEPENDENCIA_ACTUACIONESRowDeleting As DEPENDENCIA_ACTUACIONESRowChangeEventHandler
        
        Public Event DEPENDENCIA_ACTUACIONESRowDeleted As DEPENDENCIA_ACTUACIONESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDEPENDENCIA_ACTUACIONESRow(ByVal row As DEPENDENCIA_ACTUACIONESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDEPENDENCIA_ACTUACIONESRow(ByVal DEP_CODACTO As String, ByVal DEP_NOMBREPPAL As String, ByVal DEP_DEPENDENCIA As String, ByVal DEP_DESCRIPCION As String, ByVal DEP_TERMINO As String, ByVal DEP_TIPOTERMINO As String, ByVal DEP_EXCEPCION As String, ByVal DEP_ETAPA As String, ByVal DEP_HISTOPPAL As String, ByVal DEP_ORDEN As Integer) As DEPENDENCIA_ACTUACIONESRow
            Dim rowDEPENDENCIA_ACTUACIONESRow As DEPENDENCIA_ACTUACIONESRow = CType(Me.NewRow,DEPENDENCIA_ACTUACIONESRow)
            Dim columnValuesArray() As Object = New Object() {DEP_CODACTO, DEP_NOMBREPPAL, DEP_DEPENDENCIA, DEP_DESCRIPCION, DEP_TERMINO, DEP_TIPOTERMINO, DEP_EXCEPCION, DEP_ETAPA, DEP_HISTOPPAL, DEP_ORDEN, Nothing}
            rowDEPENDENCIA_ACTUACIONESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDEPENDENCIA_ACTUACIONESRow)
            Return rowDEPENDENCIA_ACTUACIONESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDEP_CONMOV(ByVal DEP_CONMOV As Integer) As DEPENDENCIA_ACTUACIONESRow
            Return CType(Me.Rows.Find(New Object() {DEP_CONMOV}),DEPENDENCIA_ACTUACIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DEPENDENCIA_ACTUACIONESDataTable = CType(MyBase.Clone,DEPENDENCIA_ACTUACIONESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DEPENDENCIA_ACTUACIONESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDEP_CODACTO = MyBase.Columns("DEP_CODACTO")
            Me.columnDEP_NOMBREPPAL = MyBase.Columns("DEP_NOMBREPPAL")
            Me.columnDEP_DEPENDENCIA = MyBase.Columns("DEP_DEPENDENCIA")
            Me.columnDEP_DESCRIPCION = MyBase.Columns("DEP_DESCRIPCION")
            Me.columnDEP_TERMINO = MyBase.Columns("DEP_TERMINO")
            Me.columnDEP_TIPOTERMINO = MyBase.Columns("DEP_TIPOTERMINO")
            Me.columnDEP_EXCEPCION = MyBase.Columns("DEP_EXCEPCION")
            Me.columnDEP_ETAPA = MyBase.Columns("DEP_ETAPA")
            Me.columnDEP_HISTOPPAL = MyBase.Columns("DEP_HISTOPPAL")
            Me.columnDEP_ORDEN = MyBase.Columns("DEP_ORDEN")
            Me.columnDEP_CONMOV = MyBase.Columns("DEP_CONMOV")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDEP_CODACTO = New Global.System.Data.DataColumn("DEP_CODACTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_CODACTO)
            Me.columnDEP_NOMBREPPAL = New Global.System.Data.DataColumn("DEP_NOMBREPPAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_NOMBREPPAL)
            Me.columnDEP_DEPENDENCIA = New Global.System.Data.DataColumn("DEP_DEPENDENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_DEPENDENCIA)
            Me.columnDEP_DESCRIPCION = New Global.System.Data.DataColumn("DEP_DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_DESCRIPCION)
            Me.columnDEP_TERMINO = New Global.System.Data.DataColumn("DEP_TERMINO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_TERMINO)
            Me.columnDEP_TIPOTERMINO = New Global.System.Data.DataColumn("DEP_TIPOTERMINO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_TIPOTERMINO)
            Me.columnDEP_EXCEPCION = New Global.System.Data.DataColumn("DEP_EXCEPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_EXCEPCION)
            Me.columnDEP_ETAPA = New Global.System.Data.DataColumn("DEP_ETAPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_ETAPA)
            Me.columnDEP_HISTOPPAL = New Global.System.Data.DataColumn("DEP_HISTOPPAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_HISTOPPAL)
            Me.columnDEP_ORDEN = New Global.System.Data.DataColumn("DEP_ORDEN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_ORDEN)
            Me.columnDEP_CONMOV = New Global.System.Data.DataColumn("DEP_CONMOV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEP_CONMOV)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDEP_CONMOV}, true))
            Me.columnDEP_CODACTO.MaxLength = 3
            Me.columnDEP_NOMBREPPAL.MaxLength = 255
            Me.columnDEP_DEPENDENCIA.MaxLength = 3
            Me.columnDEP_DESCRIPCION.MaxLength = 255
            Me.columnDEP_TERMINO.MaxLength = 255
            Me.columnDEP_TIPOTERMINO.MaxLength = 3
            Me.columnDEP_EXCEPCION.MaxLength = 3
            Me.columnDEP_ETAPA.MaxLength = 3
            Me.columnDEP_HISTOPPAL.MaxLength = 1
            Me.columnDEP_CONMOV.AutoIncrement = true
            Me.columnDEP_CONMOV.AutoIncrementSeed = -1
            Me.columnDEP_CONMOV.AutoIncrementStep = -1
            Me.columnDEP_CONMOV.AllowDBNull = false
            Me.columnDEP_CONMOV.ReadOnly = true
            Me.columnDEP_CONMOV.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDEPENDENCIA_ACTUACIONESRow() As DEPENDENCIA_ACTUACIONESRow
            Return CType(Me.NewRow,DEPENDENCIA_ACTUACIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DEPENDENCIA_ACTUACIONESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DEPENDENCIA_ACTUACIONESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DEPENDENCIA_ACTUACIONESRowChangedEvent) Is Nothing) Then
                RaiseEvent DEPENDENCIA_ACTUACIONESRowChanged(Me, New DEPENDENCIA_ACTUACIONESRowChangeEvent(CType(e.Row,DEPENDENCIA_ACTUACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DEPENDENCIA_ACTUACIONESRowChangingEvent) Is Nothing) Then
                RaiseEvent DEPENDENCIA_ACTUACIONESRowChanging(Me, New DEPENDENCIA_ACTUACIONESRowChangeEvent(CType(e.Row,DEPENDENCIA_ACTUACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DEPENDENCIA_ACTUACIONESRowDeletedEvent) Is Nothing) Then
                RaiseEvent DEPENDENCIA_ACTUACIONESRowDeleted(Me, New DEPENDENCIA_ACTUACIONESRowChangeEvent(CType(e.Row,DEPENDENCIA_ACTUACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DEPENDENCIA_ACTUACIONESRowDeletingEvent) Is Nothing) Then
                RaiseEvent DEPENDENCIA_ACTUACIONESRowDeleting(Me, New DEPENDENCIA_ACTUACIONESRowChangeEvent(CType(e.Row,DEPENDENCIA_ACTUACIONESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDEPENDENCIA_ACTUACIONESRow(ByVal row As DEPENDENCIA_ACTUACIONESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DEPENDENCIA_ACTUACIONESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CAT_CLIENTESDataTable
        Inherits Global.System.Data.TypedTableBase(Of CAT_CLIENTESRow)
        
        Private columnID_CLIENTE As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnFOTO As Global.System.Data.DataColumn
        
        Private columnent_firma As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CAT_CLIENTES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ID_CLIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_CLIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FOTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_firmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_firma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CAT_CLIENTESRow
            Get
                Return CType(Me.Rows(index),CAT_CLIENTESRow)
            End Get
        End Property
        
        Public Event CAT_CLIENTESRowChanging As CAT_CLIENTESRowChangeEventHandler
        
        Public Event CAT_CLIENTESRowChanged As CAT_CLIENTESRowChangeEventHandler
        
        Public Event CAT_CLIENTESRowDeleting As CAT_CLIENTESRowChangeEventHandler
        
        Public Event CAT_CLIENTESRowDeleted As CAT_CLIENTESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCAT_CLIENTESRow(ByVal row As CAT_CLIENTESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCAT_CLIENTESRow(ByVal ID_CLIENTE As String, ByVal NOMBRE As String, ByVal FOTO() As Byte, ByVal ent_firma() As Byte) As CAT_CLIENTESRow
            Dim rowCAT_CLIENTESRow As CAT_CLIENTESRow = CType(Me.NewRow,CAT_CLIENTESRow)
            Dim columnValuesArray() As Object = New Object() {ID_CLIENTE, NOMBRE, FOTO, ent_firma}
            rowCAT_CLIENTESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCAT_CLIENTESRow)
            Return rowCAT_CLIENTESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CAT_CLIENTESDataTable = CType(MyBase.Clone,CAT_CLIENTESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CAT_CLIENTESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID_CLIENTE = MyBase.Columns("ID_CLIENTE")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnFOTO = MyBase.Columns("FOTO")
            Me.columnent_firma = MyBase.Columns("ent_firma")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID_CLIENTE = New Global.System.Data.DataColumn("ID_CLIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_CLIENTE)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnFOTO = New Global.System.Data.DataColumn("FOTO", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOTO)
            Me.columnent_firma = New Global.System.Data.DataColumn("ent_firma", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_firma)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCAT_CLIENTESRow() As CAT_CLIENTESRow
            Return CType(Me.NewRow,CAT_CLIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CAT_CLIENTESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CAT_CLIENTESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CAT_CLIENTESRowChangedEvent) Is Nothing) Then
                RaiseEvent CAT_CLIENTESRowChanged(Me, New CAT_CLIENTESRowChangeEvent(CType(e.Row,CAT_CLIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CAT_CLIENTESRowChangingEvent) Is Nothing) Then
                RaiseEvent CAT_CLIENTESRowChanging(Me, New CAT_CLIENTESRowChangeEvent(CType(e.Row,CAT_CLIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CAT_CLIENTESRowDeletedEvent) Is Nothing) Then
                RaiseEvent CAT_CLIENTESRowDeleted(Me, New CAT_CLIENTESRowChangeEvent(CType(e.Row,CAT_CLIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CAT_CLIENTESRowDeletingEvent) Is Nothing) Then
                RaiseEvent CAT_CLIENTESRowDeleting(Me, New CAT_CLIENTESRowChangeEvent(CType(e.Row,CAT_CLIENTESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCAT_CLIENTESRow(ByVal row As CAT_CLIENTESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CAT_CLIENTESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ParetoConsolidadoDeudaDataTable
        Inherits Global.System.Data.TypedTableBase(Of ParetoConsolidadoDeudaRow)
        
        Private columnEfiNit As Global.System.Data.DataColumn
        
        Private columnEfiNom As Global.System.Data.DataColumn
        
        Private columnEfiValDeu As Global.System.Data.DataColumn
        
        Private columnEfiValInt As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columnacumulado As Global.System.Data.DataColumn
        
        Private columnpor As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ParetoConsolidadoDeuda"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiNitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiNit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiValDeuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiValDeu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiValIntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiValInt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acumuladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacumulado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property porColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParetoConsolidadoDeudaRow
            Get
                Return CType(Me.Rows(index),ParetoConsolidadoDeudaRow)
            End Get
        End Property
        
        Public Event ParetoConsolidadoDeudaRowChanging As ParetoConsolidadoDeudaRowChangeEventHandler
        
        Public Event ParetoConsolidadoDeudaRowChanged As ParetoConsolidadoDeudaRowChangeEventHandler
        
        Public Event ParetoConsolidadoDeudaRowDeleting As ParetoConsolidadoDeudaRowChangeEventHandler
        
        Public Event ParetoConsolidadoDeudaRowDeleted As ParetoConsolidadoDeudaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddParetoConsolidadoDeudaRow(ByVal row As ParetoConsolidadoDeudaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddParetoConsolidadoDeudaRow(ByVal EfiNit As String, ByVal EfiNom As String, ByVal EfiValDeu As Double, ByVal EfiValInt As Double, ByVal total As Double, ByVal acumulado As Double, ByVal por As String) As ParetoConsolidadoDeudaRow
            Dim rowParetoConsolidadoDeudaRow As ParetoConsolidadoDeudaRow = CType(Me.NewRow,ParetoConsolidadoDeudaRow)
            Dim columnValuesArray() As Object = New Object() {EfiNit, EfiNom, EfiValDeu, EfiValInt, total, acumulado, por}
            rowParetoConsolidadoDeudaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowParetoConsolidadoDeudaRow)
            Return rowParetoConsolidadoDeudaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ParetoConsolidadoDeudaDataTable = CType(MyBase.Clone,ParetoConsolidadoDeudaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ParetoConsolidadoDeudaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEfiNit = MyBase.Columns("EfiNit")
            Me.columnEfiNom = MyBase.Columns("EfiNom")
            Me.columnEfiValDeu = MyBase.Columns("EfiValDeu")
            Me.columnEfiValInt = MyBase.Columns("EfiValInt")
            Me.columntotal = MyBase.Columns("total")
            Me.columnacumulado = MyBase.Columns("acumulado")
            Me.columnpor = MyBase.Columns("por")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEfiNit = New Global.System.Data.DataColumn("EfiNit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiNit)
            Me.columnEfiNom = New Global.System.Data.DataColumn("EfiNom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiNom)
            Me.columnEfiValDeu = New Global.System.Data.DataColumn("EfiValDeu", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiValDeu)
            Me.columnEfiValInt = New Global.System.Data.DataColumn("EfiValInt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiValInt)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnacumulado = New Global.System.Data.DataColumn("acumulado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacumulado)
            Me.columnpor = New Global.System.Data.DataColumn("por", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpor)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewParetoConsolidadoDeudaRow() As ParetoConsolidadoDeudaRow
            Return CType(Me.NewRow,ParetoConsolidadoDeudaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ParetoConsolidadoDeudaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ParetoConsolidadoDeudaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParetoConsolidadoDeudaRowChangedEvent) Is Nothing) Then
                RaiseEvent ParetoConsolidadoDeudaRowChanged(Me, New ParetoConsolidadoDeudaRowChangeEvent(CType(e.Row,ParetoConsolidadoDeudaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParetoConsolidadoDeudaRowChangingEvent) Is Nothing) Then
                RaiseEvent ParetoConsolidadoDeudaRowChanging(Me, New ParetoConsolidadoDeudaRowChangeEvent(CType(e.Row,ParetoConsolidadoDeudaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParetoConsolidadoDeudaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParetoConsolidadoDeudaRowDeleted(Me, New ParetoConsolidadoDeudaRowChangeEvent(CType(e.Row,ParetoConsolidadoDeudaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParetoConsolidadoDeudaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParetoConsolidadoDeudaRowDeleting(Me, New ParetoConsolidadoDeudaRowChangeEvent(CType(e.Row,ParetoConsolidadoDeudaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveParetoConsolidadoDeudaRow(ByVal row As ParetoConsolidadoDeudaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParetoConsolidadoDeudaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class entescobradoresDataTable
        Inherits Global.System.Data.TypedTableBase(Of entescobradoresRow)
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnent_foto As Global.System.Data.DataColumn
        
        Private columnent_firma As Global.System.Data.DataColumn
        
        Private columnent_ruta As Global.System.Data.DataColumn
        
        Private columnent_rutalocal As Global.System.Data.DataColumn
        
        Private columnent_direccionlocalidad As Global.System.Data.DataColumn
        
        Private columnent_telefonoslocalidad As Global.System.Data.DataColumn
        
        Private columnent_localidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "entescobradores"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_fotoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_foto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_firmaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_firma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_rutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_ruta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_rutalocalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_rutalocal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_direccionlocalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_direccionlocalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_telefonoslocalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_telefonoslocalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ent_localidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnent_localidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As entescobradoresRow
            Get
                Return CType(Me.Rows(index),entescobradoresRow)
            End Get
        End Property
        
        Public Event entescobradoresRowChanging As entescobradoresRowChangeEventHandler
        
        Public Event entescobradoresRowChanged As entescobradoresRowChangeEventHandler
        
        Public Event entescobradoresRowDeleting As entescobradoresRowChangeEventHandler
        
        Public Event entescobradoresRowDeleted As entescobradoresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddentescobradoresRow(ByVal row As entescobradoresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddentescobradoresRow(ByVal codigo As String, ByVal nombre As String, ByVal ent_foto() As Byte, ByVal ent_firma() As Byte, ByVal ent_ruta As String, ByVal ent_rutalocal As Boolean, ByVal ent_direccionlocalidad As String, ByVal ent_telefonoslocalidad As String, ByVal ent_localidad As String) As entescobradoresRow
            Dim rowentescobradoresRow As entescobradoresRow = CType(Me.NewRow,entescobradoresRow)
            Dim columnValuesArray() As Object = New Object() {codigo, nombre, ent_foto, ent_firma, ent_ruta, ent_rutalocal, ent_direccionlocalidad, ent_telefonoslocalidad, ent_localidad}
            rowentescobradoresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowentescobradoresRow)
            Return rowentescobradoresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo(ByVal codigo As String) As entescobradoresRow
            Return CType(Me.Rows.Find(New Object() {codigo}),entescobradoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As entescobradoresDataTable = CType(MyBase.Clone,entescobradoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New entescobradoresDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnent_foto = MyBase.Columns("ent_foto")
            Me.columnent_firma = MyBase.Columns("ent_firma")
            Me.columnent_ruta = MyBase.Columns("ent_ruta")
            Me.columnent_rutalocal = MyBase.Columns("ent_rutalocal")
            Me.columnent_direccionlocalidad = MyBase.Columns("ent_direccionlocalidad")
            Me.columnent_telefonoslocalidad = MyBase.Columns("ent_telefonoslocalidad")
            Me.columnent_localidad = MyBase.Columns("ent_localidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnent_foto = New Global.System.Data.DataColumn("ent_foto", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_foto)
            Me.columnent_firma = New Global.System.Data.DataColumn("ent_firma", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_firma)
            Me.columnent_ruta = New Global.System.Data.DataColumn("ent_ruta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_ruta)
            Me.columnent_rutalocal = New Global.System.Data.DataColumn("ent_rutalocal", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_rutalocal)
            Me.columnent_direccionlocalidad = New Global.System.Data.DataColumn("ent_direccionlocalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_direccionlocalidad)
            Me.columnent_telefonoslocalidad = New Global.System.Data.DataColumn("ent_telefonoslocalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_telefonoslocalidad)
            Me.columnent_localidad = New Global.System.Data.DataColumn("ent_localidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnent_localidad)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncodigo}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.Unique = true
            Me.columncodigo.MaxLength = 2
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 130
            Me.columnent_ruta.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewentescobradoresRow() As entescobradoresRow
            Return CType(Me.NewRow,entescobradoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New entescobradoresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(entescobradoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.entescobradoresRowChangedEvent) Is Nothing) Then
                RaiseEvent entescobradoresRowChanged(Me, New entescobradoresRowChangeEvent(CType(e.Row,entescobradoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.entescobradoresRowChangingEvent) Is Nothing) Then
                RaiseEvent entescobradoresRowChanging(Me, New entescobradoresRowChangeEvent(CType(e.Row,entescobradoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.entescobradoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent entescobradoresRowDeleted(Me, New entescobradoresRowChangeEvent(CType(e.Row,entescobradoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.entescobradoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent entescobradoresRowDeleting(Me, New entescobradoresRowChangeEvent(CType(e.Row,entescobradoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveentescobradoresRow(ByVal row As entescobradoresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "entescobradoresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class entesdbfDataTable
        Inherits Global.System.Data.TypedTableBase(Of entesdbfRow)
        
        Private columncodigo_nit As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columncobrador As Global.System.Data.DataColumn
        
        Private columndireccion As Global.System.Data.DataColumn
        
        Private columntelefono As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "entesdbf"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_nitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo_nit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cobradorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncobrador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property direccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndireccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As entesdbfRow
            Get
                Return CType(Me.Rows(index),entesdbfRow)
            End Get
        End Property
        
        Public Event entesdbfRowChanging As entesdbfRowChangeEventHandler
        
        Public Event entesdbfRowChanged As entesdbfRowChangeEventHandler
        
        Public Event entesdbfRowDeleting As entesdbfRowChangeEventHandler
        
        Public Event entesdbfRowDeleted As entesdbfRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddentesdbfRow(ByVal row As entesdbfRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddentesdbfRow(ByVal codigo_nit As String, ByVal nombre As String, ByVal cobrador As String, ByVal direccion As String, ByVal telefono As String, ByVal estado As Boolean) As entesdbfRow
            Dim rowentesdbfRow As entesdbfRow = CType(Me.NewRow,entesdbfRow)
            Dim columnValuesArray() As Object = New Object() {codigo_nit, nombre, cobrador, direccion, telefono, estado}
            rowentesdbfRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowentesdbfRow)
            Return rowentesdbfRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_nit(ByVal codigo_nit As String) As entesdbfRow
            Return CType(Me.Rows.Find(New Object() {codigo_nit}),entesdbfRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As entesdbfDataTable = CType(MyBase.Clone,entesdbfDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New entesdbfDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_nit = MyBase.Columns("codigo_nit")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columncobrador = MyBase.Columns("cobrador")
            Me.columndireccion = MyBase.Columns("direccion")
            Me.columntelefono = MyBase.Columns("telefono")
            Me.columnestado = MyBase.Columns("estado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_nit = New Global.System.Data.DataColumn("codigo_nit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_nit)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columncobrador = New Global.System.Data.DataColumn("cobrador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncobrador)
            Me.columndireccion = New Global.System.Data.DataColumn("direccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndireccion)
            Me.columntelefono = New Global.System.Data.DataColumn("telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelefono)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncodigo_nit}, true))
            Me.columncodigo_nit.AllowDBNull = false
            Me.columncodigo_nit.Unique = true
            Me.columncodigo_nit.MaxLength = 50
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 150
            Me.columncobrador.MaxLength = 2
            Me.columndireccion.MaxLength = 210
            Me.columntelefono.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewentesdbfRow() As entesdbfRow
            Return CType(Me.NewRow,entesdbfRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New entesdbfRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(entesdbfRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.entesdbfRowChangedEvent) Is Nothing) Then
                RaiseEvent entesdbfRowChanged(Me, New entesdbfRowChangeEvent(CType(e.Row,entesdbfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.entesdbfRowChangingEvent) Is Nothing) Then
                RaiseEvent entesdbfRowChanging(Me, New entesdbfRowChangeEvent(CType(e.Row,entesdbfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.entesdbfRowDeletedEvent) Is Nothing) Then
                RaiseEvent entesdbfRowDeleted(Me, New entesdbfRowChangeEvent(CType(e.Row,entesdbfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.entesdbfRowDeletingEvent) Is Nothing) Then
                RaiseEvent entesdbfRowDeleting(Me, New entesdbfRowChangeEvent(CType(e.Row,entesdbfRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveentesdbfRow(ByVal row As entesdbfRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "entesdbfDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class actuacionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of actuacionesRow)
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnidetapa As Global.System.Data.DataColumn
        
        Private columnmanejaterm As Global.System.Data.DataColumn
        
        Private columntermino As Global.System.Data.DataColumn
        
        Private columndependen1 As Global.System.Data.DataColumn
        
        Private columndependen2 As Global.System.Data.DataColumn
        
        Private columnprioridad As Global.System.Data.DataColumn
        
        Private columnhistorial As Global.System.Data.DataColumn
        
        Private columnactOrden As Global.System.Data.DataColumn
        
        Private columnactMasivo As Global.System.Data.DataColumn
        
        Private columnfechasys As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "actuaciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idetapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidetapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manejatermColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanejaterm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property terminoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntermino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dependen1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndependen1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dependen2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndependen2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prioridadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprioridad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property historialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhistorial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actOrdenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactOrden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property actMasivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactMasivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechasysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechasys
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As actuacionesRow
            Get
                Return CType(Me.Rows(index),actuacionesRow)
            End Get
        End Property
        
        Public Event actuacionesRowChanging As actuacionesRowChangeEventHandler
        
        Public Event actuacionesRowChanged As actuacionesRowChangeEventHandler
        
        Public Event actuacionesRowDeleting As actuacionesRowChangeEventHandler
        
        Public Event actuacionesRowDeleted As actuacionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddactuacionesRow(ByVal row As actuacionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddactuacionesRow(ByVal codigo As String, ByVal nombre As String, ByVal idetapa As String, ByVal manejaterm As Integer, ByVal termino As Integer, ByVal dependen1 As String, ByVal dependen2 As String, ByVal prioridad As String, ByVal historial As Boolean, ByVal actOrden As Integer, ByVal actMasivo As Boolean, ByVal fechasys As Date) As actuacionesRow
            Dim rowactuacionesRow As actuacionesRow = CType(Me.NewRow,actuacionesRow)
            Dim columnValuesArray() As Object = New Object() {codigo, nombre, idetapa, manejaterm, termino, dependen1, dependen2, prioridad, historial, actOrden, actMasivo, fechasys}
            rowactuacionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowactuacionesRow)
            Return rowactuacionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo(ByVal codigo As String) As actuacionesRow
            Return CType(Me.Rows.Find(New Object() {codigo}),actuacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As actuacionesDataTable = CType(MyBase.Clone,actuacionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New actuacionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnidetapa = MyBase.Columns("idetapa")
            Me.columnmanejaterm = MyBase.Columns("manejaterm")
            Me.columntermino = MyBase.Columns("termino")
            Me.columndependen1 = MyBase.Columns("dependen1")
            Me.columndependen2 = MyBase.Columns("dependen2")
            Me.columnprioridad = MyBase.Columns("prioridad")
            Me.columnhistorial = MyBase.Columns("historial")
            Me.columnactOrden = MyBase.Columns("actOrden")
            Me.columnactMasivo = MyBase.Columns("actMasivo")
            Me.columnfechasys = MyBase.Columns("fechasys")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnidetapa = New Global.System.Data.DataColumn("idetapa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidetapa)
            Me.columnmanejaterm = New Global.System.Data.DataColumn("manejaterm", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanejaterm)
            Me.columntermino = New Global.System.Data.DataColumn("termino", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntermino)
            Me.columndependen1 = New Global.System.Data.DataColumn("dependen1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndependen1)
            Me.columndependen2 = New Global.System.Data.DataColumn("dependen2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndependen2)
            Me.columnprioridad = New Global.System.Data.DataColumn("prioridad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprioridad)
            Me.columnhistorial = New Global.System.Data.DataColumn("historial", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhistorial)
            Me.columnactOrden = New Global.System.Data.DataColumn("actOrden", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactOrden)
            Me.columnactMasivo = New Global.System.Data.DataColumn("actMasivo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactMasivo)
            Me.columnfechasys = New Global.System.Data.DataColumn("fechasys", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechasys)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncodigo}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.Unique = true
            Me.columncodigo.MaxLength = 50
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 250
            Me.columnidetapa.MaxLength = 2
            Me.columndependen1.MaxLength = 50
            Me.columndependen2.MaxLength = 50
            Me.columnprioridad.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewactuacionesRow() As actuacionesRow
            Return CType(Me.NewRow,actuacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New actuacionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(actuacionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.actuacionesRowChangedEvent) Is Nothing) Then
                RaiseEvent actuacionesRowChanged(Me, New actuacionesRowChangeEvent(CType(e.Row,actuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.actuacionesRowChangingEvent) Is Nothing) Then
                RaiseEvent actuacionesRowChanging(Me, New actuacionesRowChangeEvent(CType(e.Row,actuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.actuacionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent actuacionesRowDeleted(Me, New actuacionesRowChangeEvent(CType(e.Row,actuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.actuacionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent actuacionesRowDeleting(Me, New actuacionesRowChangeEvent(CType(e.Row,actuacionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveactuacionesRow(ByVal row As actuacionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "actuacionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DOCUMENTO_MASIVO_HEADDataTable
        Inherits Global.System.Data.TypedTableBase(Of DOCUMENTO_MASIVO_HEADRow)
        
        Private columnDELL_DOCUMENTO As Global.System.Data.DataColumn
        
        Private columnDELL_FECHA As Global.System.Data.DataColumn
        
        Private columnDELL_DETALLE As Global.System.Data.DataColumn
        
        Private columnDELL_USUARIO As Global.System.Data.DataColumn
        
        Private columnDELL_COBRADOR As Global.System.Data.DataColumn
        
        Private columnDELL_IMPUSTO As Global.System.Data.DataColumn
        
        Private columnDELL_SEPARADO As Global.System.Data.DataColumn
        
        Private columnDELL_ACTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DOCUMENTO_MASIVO_HEAD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_DOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_DOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_USUARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_USUARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_COBRADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_COBRADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_IMPUSTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_IMPUSTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_SEPARADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_SEPARADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DELL_ACTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDELL_ACTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DOCUMENTO_MASIVO_HEADRow
            Get
                Return CType(Me.Rows(index),DOCUMENTO_MASIVO_HEADRow)
            End Get
        End Property
        
        Public Event DOCUMENTO_MASIVO_HEADRowChanging As DOCUMENTO_MASIVO_HEADRowChangeEventHandler
        
        Public Event DOCUMENTO_MASIVO_HEADRowChanged As DOCUMENTO_MASIVO_HEADRowChangeEventHandler
        
        Public Event DOCUMENTO_MASIVO_HEADRowDeleting As DOCUMENTO_MASIVO_HEADRowChangeEventHandler
        
        Public Event DOCUMENTO_MASIVO_HEADRowDeleted As DOCUMENTO_MASIVO_HEADRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDOCUMENTO_MASIVO_HEADRow(ByVal row As DOCUMENTO_MASIVO_HEADRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDOCUMENTO_MASIVO_HEADRow(ByVal DELL_DOCUMENTO As String, ByVal DELL_FECHA As Date, ByVal DELL_DETALLE As String, ByVal DELL_USUARIO As String, ByVal DELL_COBRADOR As String, ByVal DELL_IMPUSTO As String, ByVal DELL_SEPARADO As Boolean, ByVal DELL_ACTO As String) As DOCUMENTO_MASIVO_HEADRow
            Dim rowDOCUMENTO_MASIVO_HEADRow As DOCUMENTO_MASIVO_HEADRow = CType(Me.NewRow,DOCUMENTO_MASIVO_HEADRow)
            Dim columnValuesArray() As Object = New Object() {DELL_DOCUMENTO, DELL_FECHA, DELL_DETALLE, DELL_USUARIO, DELL_COBRADOR, DELL_IMPUSTO, DELL_SEPARADO, DELL_ACTO}
            rowDOCUMENTO_MASIVO_HEADRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDOCUMENTO_MASIVO_HEADRow)
            Return rowDOCUMENTO_MASIVO_HEADRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDELL_DOCUMENTO(ByVal DELL_DOCUMENTO As String) As DOCUMENTO_MASIVO_HEADRow
            Return CType(Me.Rows.Find(New Object() {DELL_DOCUMENTO}),DOCUMENTO_MASIVO_HEADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DOCUMENTO_MASIVO_HEADDataTable = CType(MyBase.Clone,DOCUMENTO_MASIVO_HEADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DOCUMENTO_MASIVO_HEADDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDELL_DOCUMENTO = MyBase.Columns("DELL_DOCUMENTO")
            Me.columnDELL_FECHA = MyBase.Columns("DELL_FECHA")
            Me.columnDELL_DETALLE = MyBase.Columns("DELL_DETALLE")
            Me.columnDELL_USUARIO = MyBase.Columns("DELL_USUARIO")
            Me.columnDELL_COBRADOR = MyBase.Columns("DELL_COBRADOR")
            Me.columnDELL_IMPUSTO = MyBase.Columns("DELL_IMPUSTO")
            Me.columnDELL_SEPARADO = MyBase.Columns("DELL_SEPARADO")
            Me.columnDELL_ACTO = MyBase.Columns("DELL_ACTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDELL_DOCUMENTO = New Global.System.Data.DataColumn("DELL_DOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_DOCUMENTO)
            Me.columnDELL_FECHA = New Global.System.Data.DataColumn("DELL_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_FECHA)
            Me.columnDELL_DETALLE = New Global.System.Data.DataColumn("DELL_DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_DETALLE)
            Me.columnDELL_USUARIO = New Global.System.Data.DataColumn("DELL_USUARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_USUARIO)
            Me.columnDELL_COBRADOR = New Global.System.Data.DataColumn("DELL_COBRADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_COBRADOR)
            Me.columnDELL_IMPUSTO = New Global.System.Data.DataColumn("DELL_IMPUSTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_IMPUSTO)
            Me.columnDELL_SEPARADO = New Global.System.Data.DataColumn("DELL_SEPARADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_SEPARADO)
            Me.columnDELL_ACTO = New Global.System.Data.DataColumn("DELL_ACTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDELL_ACTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDELL_DOCUMENTO}, true))
            Me.columnDELL_DOCUMENTO.AllowDBNull = false
            Me.columnDELL_DOCUMENTO.Unique = true
            Me.columnDELL_DOCUMENTO.MaxLength = 200
            Me.columnDELL_DETALLE.MaxLength = 200
            Me.columnDELL_USUARIO.MaxLength = 200
            Me.columnDELL_COBRADOR.MaxLength = 200
            Me.columnDELL_IMPUSTO.MaxLength = 200
            Me.columnDELL_ACTO.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDOCUMENTO_MASIVO_HEADRow() As DOCUMENTO_MASIVO_HEADRow
            Return CType(Me.NewRow,DOCUMENTO_MASIVO_HEADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DOCUMENTO_MASIVO_HEADRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DOCUMENTO_MASIVO_HEADRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DOCUMENTO_MASIVO_HEADRowChangedEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVO_HEADRowChanged(Me, New DOCUMENTO_MASIVO_HEADRowChangeEvent(CType(e.Row,DOCUMENTO_MASIVO_HEADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DOCUMENTO_MASIVO_HEADRowChangingEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVO_HEADRowChanging(Me, New DOCUMENTO_MASIVO_HEADRowChangeEvent(CType(e.Row,DOCUMENTO_MASIVO_HEADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DOCUMENTO_MASIVO_HEADRowDeletedEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVO_HEADRowDeleted(Me, New DOCUMENTO_MASIVO_HEADRowChangeEvent(CType(e.Row,DOCUMENTO_MASIVO_HEADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DOCUMENTO_MASIVO_HEADRowDeletingEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVO_HEADRowDeleting(Me, New DOCUMENTO_MASIVO_HEADRowChangeEvent(CType(e.Row,DOCUMENTO_MASIVO_HEADRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDOCUMENTO_MASIVO_HEADRow(ByVal row As DOCUMENTO_MASIVO_HEADRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DOCUMENTO_MASIVO_HEADDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DOCUMENTO_MASIVODataTable
        Inherits Global.System.Data.TypedTableBase(Of DOCUMENTO_MASIVORow)
        
        Private columnMAN_DEUSDOR As Global.System.Data.DataColumn
        
        Private columnMAN_IMPUESTO As Global.System.Data.DataColumn
        
        Private columnMAN_VALORMANDA As Global.System.Data.DataColumn
        
        Private columnMAN_NOMDEUDOR As Global.System.Data.DataColumn
        
        Private columnMAN_DIRECCION As Global.System.Data.DataColumn
        
        Private columnMAN_DIR_ESTABL As Global.System.Data.DataColumn
        
        Private columnMAN_REFCATRASTAL As Global.System.Data.DataColumn
        
        Private columnMAN_VIGENCIA As Global.System.Data.DataColumn
        
        Private columnMAN_CONCEPTOCDG As Global.System.Data.DataColumn
        
        Private columnMAN_ESTRATOCD As Global.System.Data.DataColumn
        
        Private columnMAN_DESTINOCD2 As Global.System.Data.DataColumn
        
        Private columnMAN_BASEGRAVABLE As Global.System.Data.DataColumn
        
        Private columnMAN_TARIFA As Global.System.Data.DataColumn
        
        Private columnMAN_CAPITAL As Global.System.Data.DataColumn
        
        Private columnMAN_INTERESES As Global.System.Data.DataColumn
        
        Private columnMAN_TOTAL As Global.System.Data.DataColumn
        
        Private columnMAN_EXPEDIENTE As Global.System.Data.DataColumn
        
        Private columnMAN_FECHADOC As Global.System.Data.DataColumn
        
        Private columnMAN_EFIPERDES As Global.System.Data.DataColumn
        
        Private columnMAN_EFIPERHAS As Global.System.Data.DataColumn
        
        Private columnMAN_PAGOS As Global.System.Data.DataColumn
        
        Private columnMAN_FECHARAC As Global.System.Data.DataColumn
        
        Private columnMAN_DOCUMENTO As Global.System.Data.DataColumn
        
        Private columnMAN_ESTADO As Global.System.Data.DataColumn
        
        Private columnMAN_DOCSYSTEM As Global.System.Data.DataColumn
        
        Private columnMAN_CONMOV As Global.System.Data.DataColumn
        
        Private columnMAN_COBRADOR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DOCUMENTO_MASIVO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_DEUSDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_DEUSDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_IMPUESTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_IMPUESTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_VALORMANDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_VALORMANDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_NOMDEUDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_NOMDEUDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_DIR_ESTABLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_DIR_ESTABL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_REFCATRASTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_REFCATRASTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_VIGENCIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_VIGENCIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_CONCEPTOCDGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_CONCEPTOCDG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_ESTRATOCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_ESTRATOCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_DESTINOCD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_DESTINOCD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_BASEGRAVABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_BASEGRAVABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_TARIFAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_TARIFA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_CAPITALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_CAPITAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_INTERESESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_INTERESES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_EXPEDIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_EXPEDIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_FECHADOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_FECHADOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_EFIPERDESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_EFIPERDES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_EFIPERHASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_EFIPERHAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_PAGOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_PAGOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_FECHARACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_FECHARAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_DOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_DOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_ESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_DOCSYSTEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_DOCSYSTEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_CONMOVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_CONMOV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MAN_COBRADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAN_COBRADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DOCUMENTO_MASIVORow
            Get
                Return CType(Me.Rows(index),DOCUMENTO_MASIVORow)
            End Get
        End Property
        
        Public Event DOCUMENTO_MASIVORowChanging As DOCUMENTO_MASIVORowChangeEventHandler
        
        Public Event DOCUMENTO_MASIVORowChanged As DOCUMENTO_MASIVORowChangeEventHandler
        
        Public Event DOCUMENTO_MASIVORowDeleting As DOCUMENTO_MASIVORowChangeEventHandler
        
        Public Event DOCUMENTO_MASIVORowDeleted As DOCUMENTO_MASIVORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDOCUMENTO_MASIVORow(ByVal row As DOCUMENTO_MASIVORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDOCUMENTO_MASIVORow( _
                    ByVal MAN_DEUSDOR As String,  _
                    ByVal MAN_IMPUESTO As String,  _
                    ByVal MAN_VALORMANDA As Decimal,  _
                    ByVal MAN_NOMDEUDOR As String,  _
                    ByVal MAN_DIRECCION As String,  _
                    ByVal MAN_DIR_ESTABL As String,  _
                    ByVal MAN_REFCATRASTAL As String,  _
                    ByVal MAN_VIGENCIA As String,  _
                    ByVal MAN_CONCEPTOCDG As String,  _
                    ByVal MAN_ESTRATOCD As String,  _
                    ByVal MAN_DESTINOCD2 As String,  _
                    ByVal MAN_BASEGRAVABLE As String,  _
                    ByVal MAN_TARIFA As Decimal,  _
                    ByVal MAN_CAPITAL As Decimal,  _
                    ByVal MAN_INTERESES As Decimal,  _
                    ByVal MAN_TOTAL As Decimal,  _
                    ByVal MAN_EXPEDIENTE As String,  _
                    ByVal MAN_FECHADOC As String,  _
                    ByVal MAN_EFIPERDES As String,  _
                    ByVal MAN_EFIPERHAS As String,  _
                    ByVal MAN_PAGOS As Decimal,  _
                    ByVal MAN_FECHARAC As Date,  _
                    ByVal MAN_DOCUMENTO As String,  _
                    ByVal MAN_ESTADO As Boolean,  _
                    ByVal MAN_DOCSYSTEM As String,  _
                    ByVal MAN_COBRADOR As String) As DOCUMENTO_MASIVORow
            Dim rowDOCUMENTO_MASIVORow As DOCUMENTO_MASIVORow = CType(Me.NewRow,DOCUMENTO_MASIVORow)
            Dim columnValuesArray() As Object = New Object() {MAN_DEUSDOR, MAN_IMPUESTO, MAN_VALORMANDA, MAN_NOMDEUDOR, MAN_DIRECCION, MAN_DIR_ESTABL, MAN_REFCATRASTAL, MAN_VIGENCIA, MAN_CONCEPTOCDG, MAN_ESTRATOCD, MAN_DESTINOCD2, MAN_BASEGRAVABLE, MAN_TARIFA, MAN_CAPITAL, MAN_INTERESES, MAN_TOTAL, MAN_EXPEDIENTE, MAN_FECHADOC, MAN_EFIPERDES, MAN_EFIPERHAS, MAN_PAGOS, MAN_FECHARAC, MAN_DOCUMENTO, MAN_ESTADO, MAN_DOCSYSTEM, Nothing, MAN_COBRADOR}
            rowDOCUMENTO_MASIVORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDOCUMENTO_MASIVORow)
            Return rowDOCUMENTO_MASIVORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMAN_CONMOV(ByVal MAN_CONMOV As Integer) As DOCUMENTO_MASIVORow
            Return CType(Me.Rows.Find(New Object() {MAN_CONMOV}),DOCUMENTO_MASIVORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DOCUMENTO_MASIVODataTable = CType(MyBase.Clone,DOCUMENTO_MASIVODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DOCUMENTO_MASIVODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMAN_DEUSDOR = MyBase.Columns("MAN_DEUSDOR")
            Me.columnMAN_IMPUESTO = MyBase.Columns("MAN_IMPUESTO")
            Me.columnMAN_VALORMANDA = MyBase.Columns("MAN_VALORMANDA")
            Me.columnMAN_NOMDEUDOR = MyBase.Columns("MAN_NOMDEUDOR")
            Me.columnMAN_DIRECCION = MyBase.Columns("MAN_DIRECCION")
            Me.columnMAN_DIR_ESTABL = MyBase.Columns("MAN_DIR_ESTABL")
            Me.columnMAN_REFCATRASTAL = MyBase.Columns("MAN_REFCATRASTAL")
            Me.columnMAN_VIGENCIA = MyBase.Columns("MAN_VIGENCIA")
            Me.columnMAN_CONCEPTOCDG = MyBase.Columns("MAN_CONCEPTOCDG")
            Me.columnMAN_ESTRATOCD = MyBase.Columns("MAN_ESTRATOCD")
            Me.columnMAN_DESTINOCD2 = MyBase.Columns("MAN_DESTINOCD2")
            Me.columnMAN_BASEGRAVABLE = MyBase.Columns("MAN_BASEGRAVABLE")
            Me.columnMAN_TARIFA = MyBase.Columns("MAN_TARIFA")
            Me.columnMAN_CAPITAL = MyBase.Columns("MAN_CAPITAL")
            Me.columnMAN_INTERESES = MyBase.Columns("MAN_INTERESES")
            Me.columnMAN_TOTAL = MyBase.Columns("MAN_TOTAL")
            Me.columnMAN_EXPEDIENTE = MyBase.Columns("MAN_EXPEDIENTE")
            Me.columnMAN_FECHADOC = MyBase.Columns("MAN_FECHADOC")
            Me.columnMAN_EFIPERDES = MyBase.Columns("MAN_EFIPERDES")
            Me.columnMAN_EFIPERHAS = MyBase.Columns("MAN_EFIPERHAS")
            Me.columnMAN_PAGOS = MyBase.Columns("MAN_PAGOS")
            Me.columnMAN_FECHARAC = MyBase.Columns("MAN_FECHARAC")
            Me.columnMAN_DOCUMENTO = MyBase.Columns("MAN_DOCUMENTO")
            Me.columnMAN_ESTADO = MyBase.Columns("MAN_ESTADO")
            Me.columnMAN_DOCSYSTEM = MyBase.Columns("MAN_DOCSYSTEM")
            Me.columnMAN_CONMOV = MyBase.Columns("MAN_CONMOV")
            Me.columnMAN_COBRADOR = MyBase.Columns("MAN_COBRADOR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMAN_DEUSDOR = New Global.System.Data.DataColumn("MAN_DEUSDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_DEUSDOR)
            Me.columnMAN_IMPUESTO = New Global.System.Data.DataColumn("MAN_IMPUESTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_IMPUESTO)
            Me.columnMAN_VALORMANDA = New Global.System.Data.DataColumn("MAN_VALORMANDA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_VALORMANDA)
            Me.columnMAN_NOMDEUDOR = New Global.System.Data.DataColumn("MAN_NOMDEUDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_NOMDEUDOR)
            Me.columnMAN_DIRECCION = New Global.System.Data.DataColumn("MAN_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_DIRECCION)
            Me.columnMAN_DIR_ESTABL = New Global.System.Data.DataColumn("MAN_DIR_ESTABL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_DIR_ESTABL)
            Me.columnMAN_REFCATRASTAL = New Global.System.Data.DataColumn("MAN_REFCATRASTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_REFCATRASTAL)
            Me.columnMAN_VIGENCIA = New Global.System.Data.DataColumn("MAN_VIGENCIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_VIGENCIA)
            Me.columnMAN_CONCEPTOCDG = New Global.System.Data.DataColumn("MAN_CONCEPTOCDG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_CONCEPTOCDG)
            Me.columnMAN_ESTRATOCD = New Global.System.Data.DataColumn("MAN_ESTRATOCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_ESTRATOCD)
            Me.columnMAN_DESTINOCD2 = New Global.System.Data.DataColumn("MAN_DESTINOCD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_DESTINOCD2)
            Me.columnMAN_BASEGRAVABLE = New Global.System.Data.DataColumn("MAN_BASEGRAVABLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_BASEGRAVABLE)
            Me.columnMAN_TARIFA = New Global.System.Data.DataColumn("MAN_TARIFA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_TARIFA)
            Me.columnMAN_CAPITAL = New Global.System.Data.DataColumn("MAN_CAPITAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_CAPITAL)
            Me.columnMAN_INTERESES = New Global.System.Data.DataColumn("MAN_INTERESES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_INTERESES)
            Me.columnMAN_TOTAL = New Global.System.Data.DataColumn("MAN_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_TOTAL)
            Me.columnMAN_EXPEDIENTE = New Global.System.Data.DataColumn("MAN_EXPEDIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_EXPEDIENTE)
            Me.columnMAN_FECHADOC = New Global.System.Data.DataColumn("MAN_FECHADOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_FECHADOC)
            Me.columnMAN_EFIPERDES = New Global.System.Data.DataColumn("MAN_EFIPERDES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_EFIPERDES)
            Me.columnMAN_EFIPERHAS = New Global.System.Data.DataColumn("MAN_EFIPERHAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_EFIPERHAS)
            Me.columnMAN_PAGOS = New Global.System.Data.DataColumn("MAN_PAGOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_PAGOS)
            Me.columnMAN_FECHARAC = New Global.System.Data.DataColumn("MAN_FECHARAC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_FECHARAC)
            Me.columnMAN_DOCUMENTO = New Global.System.Data.DataColumn("MAN_DOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_DOCUMENTO)
            Me.columnMAN_ESTADO = New Global.System.Data.DataColumn("MAN_ESTADO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_ESTADO)
            Me.columnMAN_DOCSYSTEM = New Global.System.Data.DataColumn("MAN_DOCSYSTEM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_DOCSYSTEM)
            Me.columnMAN_CONMOV = New Global.System.Data.DataColumn("MAN_CONMOV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_CONMOV)
            Me.columnMAN_COBRADOR = New Global.System.Data.DataColumn("MAN_COBRADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAN_COBRADOR)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAN_CONMOV}, true))
            Me.columnMAN_DEUSDOR.MaxLength = 200
            Me.columnMAN_IMPUESTO.MaxLength = 200
            Me.columnMAN_NOMDEUDOR.MaxLength = 200
            Me.columnMAN_DIRECCION.MaxLength = 200
            Me.columnMAN_DIR_ESTABL.MaxLength = 200
            Me.columnMAN_REFCATRASTAL.MaxLength = 200
            Me.columnMAN_VIGENCIA.MaxLength = 200
            Me.columnMAN_CONCEPTOCDG.MaxLength = 200
            Me.columnMAN_ESTRATOCD.MaxLength = 200
            Me.columnMAN_DESTINOCD2.MaxLength = 200
            Me.columnMAN_BASEGRAVABLE.MaxLength = 200
            Me.columnMAN_EXPEDIENTE.MaxLength = 200
            Me.columnMAN_FECHADOC.MaxLength = 200
            Me.columnMAN_EFIPERDES.MaxLength = 200
            Me.columnMAN_EFIPERHAS.MaxLength = 200
            Me.columnMAN_DOCUMENTO.AllowDBNull = false
            Me.columnMAN_DOCUMENTO.MaxLength = 200
            Me.columnMAN_ESTADO.AllowDBNull = false
            Me.columnMAN_DOCSYSTEM.MaxLength = 200
            Me.columnMAN_CONMOV.AutoIncrement = true
            Me.columnMAN_CONMOV.AutoIncrementSeed = -1
            Me.columnMAN_CONMOV.AutoIncrementStep = -1
            Me.columnMAN_CONMOV.AllowDBNull = false
            Me.columnMAN_CONMOV.ReadOnly = true
            Me.columnMAN_CONMOV.Unique = true
            Me.columnMAN_COBRADOR.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDOCUMENTO_MASIVORow() As DOCUMENTO_MASIVORow
            Return CType(Me.NewRow,DOCUMENTO_MASIVORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DOCUMENTO_MASIVORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DOCUMENTO_MASIVORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DOCUMENTO_MASIVORowChangedEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVORowChanged(Me, New DOCUMENTO_MASIVORowChangeEvent(CType(e.Row,DOCUMENTO_MASIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DOCUMENTO_MASIVORowChangingEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVORowChanging(Me, New DOCUMENTO_MASIVORowChangeEvent(CType(e.Row,DOCUMENTO_MASIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DOCUMENTO_MASIVORowDeletedEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVORowDeleted(Me, New DOCUMENTO_MASIVORowChangeEvent(CType(e.Row,DOCUMENTO_MASIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DOCUMENTO_MASIVORowDeletingEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_MASIVORowDeleting(Me, New DOCUMENTO_MASIVORowChangeEvent(CType(e.Row,DOCUMENTO_MASIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDOCUMENTO_MASIVORow(ByVal row As DOCUMENTO_MASIVORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DOCUMENTO_MASIVODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class documento_ultimoactoDataTable
        Inherits Global.System.Data.TypedTableBase(Of documento_ultimoactoRow)
        
        Private columnULT_EXPEDIENTE As Global.System.Data.DataColumn
        
        Private columnULT_ACTO As Global.System.Data.DataColumn
        
        Private columnULT_ACTODESCRIP As Global.System.Data.DataColumn
        
        Private columnULT_FECHA As Global.System.Data.DataColumn
        
        Private columnULT_DEUDOR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "documento_ultimoacto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ULT_EXPEDIENTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnULT_EXPEDIENTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ULT_ACTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnULT_ACTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ULT_ACTODESCRIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnULT_ACTODESCRIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ULT_FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnULT_FECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ULT_DEUDORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnULT_DEUDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As documento_ultimoactoRow
            Get
                Return CType(Me.Rows(index),documento_ultimoactoRow)
            End Get
        End Property
        
        Public Event documento_ultimoactoRowChanging As documento_ultimoactoRowChangeEventHandler
        
        Public Event documento_ultimoactoRowChanged As documento_ultimoactoRowChangeEventHandler
        
        Public Event documento_ultimoactoRowDeleting As documento_ultimoactoRowChangeEventHandler
        
        Public Event documento_ultimoactoRowDeleted As documento_ultimoactoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddocumento_ultimoactoRow(ByVal row As documento_ultimoactoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddocumento_ultimoactoRow(ByVal ULT_EXPEDIENTE As String, ByVal ULT_ACTO As String, ByVal ULT_ACTODESCRIP As String, ByVal ULT_FECHA As Date, ByVal ULT_DEUDOR As String) As documento_ultimoactoRow
            Dim rowdocumento_ultimoactoRow As documento_ultimoactoRow = CType(Me.NewRow,documento_ultimoactoRow)
            Dim columnValuesArray() As Object = New Object() {ULT_EXPEDIENTE, ULT_ACTO, ULT_ACTODESCRIP, ULT_FECHA, ULT_DEUDOR}
            rowdocumento_ultimoactoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdocumento_ultimoactoRow)
            Return rowdocumento_ultimoactoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As documento_ultimoactoDataTable = CType(MyBase.Clone,documento_ultimoactoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New documento_ultimoactoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnULT_EXPEDIENTE = MyBase.Columns("ULT_EXPEDIENTE")
            Me.columnULT_ACTO = MyBase.Columns("ULT_ACTO")
            Me.columnULT_ACTODESCRIP = MyBase.Columns("ULT_ACTODESCRIP")
            Me.columnULT_FECHA = MyBase.Columns("ULT_FECHA")
            Me.columnULT_DEUDOR = MyBase.Columns("ULT_DEUDOR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnULT_EXPEDIENTE = New Global.System.Data.DataColumn("ULT_EXPEDIENTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnULT_EXPEDIENTE)
            Me.columnULT_ACTO = New Global.System.Data.DataColumn("ULT_ACTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnULT_ACTO)
            Me.columnULT_ACTODESCRIP = New Global.System.Data.DataColumn("ULT_ACTODESCRIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnULT_ACTODESCRIP)
            Me.columnULT_FECHA = New Global.System.Data.DataColumn("ULT_FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnULT_FECHA)
            Me.columnULT_DEUDOR = New Global.System.Data.DataColumn("ULT_DEUDOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnULT_DEUDOR)
            Me.columnULT_EXPEDIENTE.MaxLength = 50
            Me.columnULT_ACTO.MaxLength = 10
            Me.columnULT_ACTODESCRIP.MaxLength = 200
            Me.columnULT_DEUDOR.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdocumento_ultimoactoRow() As documento_ultimoactoRow
            Return CType(Me.NewRow,documento_ultimoactoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New documento_ultimoactoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(documento_ultimoactoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.documento_ultimoactoRowChangedEvent) Is Nothing) Then
                RaiseEvent documento_ultimoactoRowChanged(Me, New documento_ultimoactoRowChangeEvent(CType(e.Row,documento_ultimoactoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.documento_ultimoactoRowChangingEvent) Is Nothing) Then
                RaiseEvent documento_ultimoactoRowChanging(Me, New documento_ultimoactoRowChangeEvent(CType(e.Row,documento_ultimoactoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.documento_ultimoactoRowDeletedEvent) Is Nothing) Then
                RaiseEvent documento_ultimoactoRowDeleted(Me, New documento_ultimoactoRowChangeEvent(CType(e.Row,documento_ultimoactoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.documento_ultimoactoRowDeletingEvent) Is Nothing) Then
                RaiseEvent documento_ultimoactoRowDeleting(Me, New documento_ultimoactoRowChangeEvent(CType(e.Row,documento_ultimoactoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedocumento_ultimoactoRow(ByVal row As documento_ultimoactoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "documento_ultimoactoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcesoAcumuladoDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProcesoAcumuladoRow)
        
        Private columndocexpediente As Global.System.Data.DataColumn
        
        Private columnfecharadic As Global.System.Data.DataColumn
        
        Private columnchekPpal As Global.System.Data.DataColumn
        
        Private columndocpredio_refecatrastal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcesoAcumulado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docexpedienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocexpediente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecharadicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecharadic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chekPpalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchekPpal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docpredio_refecatrastalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocpredio_refecatrastal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcesoAcumuladoRow
            Get
                Return CType(Me.Rows(index),ProcesoAcumuladoRow)
            End Get
        End Property
        
        Public Event ProcesoAcumuladoRowChanging As ProcesoAcumuladoRowChangeEventHandler
        
        Public Event ProcesoAcumuladoRowChanged As ProcesoAcumuladoRowChangeEventHandler
        
        Public Event ProcesoAcumuladoRowDeleting As ProcesoAcumuladoRowChangeEventHandler
        
        Public Event ProcesoAcumuladoRowDeleted As ProcesoAcumuladoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcesoAcumuladoRow(ByVal row As ProcesoAcumuladoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcesoAcumuladoRow(ByVal docexpediente As String, ByVal fecharadic As String, ByVal chekPpal As String, ByVal docpredio_refecatrastal As String) As ProcesoAcumuladoRow
            Dim rowProcesoAcumuladoRow As ProcesoAcumuladoRow = CType(Me.NewRow,ProcesoAcumuladoRow)
            Dim columnValuesArray() As Object = New Object() {docexpediente, fecharadic, chekPpal, docpredio_refecatrastal}
            rowProcesoAcumuladoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcesoAcumuladoRow)
            Return rowProcesoAcumuladoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcesoAcumuladoDataTable = CType(MyBase.Clone,ProcesoAcumuladoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcesoAcumuladoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndocexpediente = MyBase.Columns("docexpediente")
            Me.columnfecharadic = MyBase.Columns("fecharadic")
            Me.columnchekPpal = MyBase.Columns("chekPpal")
            Me.columndocpredio_refecatrastal = MyBase.Columns("docpredio_refecatrastal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndocexpediente = New Global.System.Data.DataColumn("docexpediente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocexpediente)
            Me.columnfecharadic = New Global.System.Data.DataColumn("fecharadic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecharadic)
            Me.columnchekPpal = New Global.System.Data.DataColumn("chekPpal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchekPpal)
            Me.columndocpredio_refecatrastal = New Global.System.Data.DataColumn("docpredio_refecatrastal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocpredio_refecatrastal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcesoAcumuladoRow() As ProcesoAcumuladoRow
            Return CType(Me.NewRow,ProcesoAcumuladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcesoAcumuladoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcesoAcumuladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcesoAcumuladoRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladoRowChanged(Me, New ProcesoAcumuladoRowChangeEvent(CType(e.Row,ProcesoAcumuladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcesoAcumuladoRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladoRowChanging(Me, New ProcesoAcumuladoRowChangeEvent(CType(e.Row,ProcesoAcumuladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcesoAcumuladoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladoRowDeleted(Me, New ProcesoAcumuladoRowChangeEvent(CType(e.Row,ProcesoAcumuladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcesoAcumuladoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladoRowDeleting(Me, New ProcesoAcumuladoRowChangeEvent(CType(e.Row,ProcesoAcumuladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcesoAcumuladoRow(ByVal row As ProcesoAcumuladoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcesoAcumuladoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcesoAcumuladopredioDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProcesoAcumuladopredioRow)
        
        Private columndocpredio_refecatrastal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcesoAcumuladopredio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property docpredio_refecatrastalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocpredio_refecatrastal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcesoAcumuladopredioRow
            Get
                Return CType(Me.Rows(index),ProcesoAcumuladopredioRow)
            End Get
        End Property
        
        Public Event ProcesoAcumuladopredioRowChanging As ProcesoAcumuladopredioRowChangeEventHandler
        
        Public Event ProcesoAcumuladopredioRowChanged As ProcesoAcumuladopredioRowChangeEventHandler
        
        Public Event ProcesoAcumuladopredioRowDeleting As ProcesoAcumuladopredioRowChangeEventHandler
        
        Public Event ProcesoAcumuladopredioRowDeleted As ProcesoAcumuladopredioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcesoAcumuladopredioRow(ByVal row As ProcesoAcumuladopredioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcesoAcumuladopredioRow(ByVal docpredio_refecatrastal As String) As ProcesoAcumuladopredioRow
            Dim rowProcesoAcumuladopredioRow As ProcesoAcumuladopredioRow = CType(Me.NewRow,ProcesoAcumuladopredioRow)
            Dim columnValuesArray() As Object = New Object() {docpredio_refecatrastal}
            rowProcesoAcumuladopredioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcesoAcumuladopredioRow)
            Return rowProcesoAcumuladopredioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcesoAcumuladopredioDataTable = CType(MyBase.Clone,ProcesoAcumuladopredioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcesoAcumuladopredioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndocpredio_refecatrastal = MyBase.Columns("docpredio_refecatrastal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndocpredio_refecatrastal = New Global.System.Data.DataColumn("docpredio_refecatrastal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocpredio_refecatrastal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcesoAcumuladopredioRow() As ProcesoAcumuladopredioRow
            Return CType(Me.NewRow,ProcesoAcumuladopredioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcesoAcumuladopredioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcesoAcumuladopredioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcesoAcumuladopredioRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladopredioRowChanged(Me, New ProcesoAcumuladopredioRowChangeEvent(CType(e.Row,ProcesoAcumuladopredioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcesoAcumuladopredioRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladopredioRowChanging(Me, New ProcesoAcumuladopredioRowChangeEvent(CType(e.Row,ProcesoAcumuladopredioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcesoAcumuladopredioRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladopredioRowDeleted(Me, New ProcesoAcumuladopredioRowChangeEvent(CType(e.Row,ProcesoAcumuladopredioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcesoAcumuladopredioRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcesoAcumuladopredioRowDeleting(Me, New ProcesoAcumuladopredioRowChangeEvent(CType(e.Row,ProcesoAcumuladopredioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcesoAcumuladopredioRow(ByVal row As ProcesoAcumuladopredioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcesoAcumuladopredioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IMAGENDataTable
        Inherits Global.System.Data.TypedTableBase(Of IMAGENRow)
        
        Private columnPICTURE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IMAGEN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PICTUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPICTURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IMAGENRow
            Get
                Return CType(Me.Rows(index),IMAGENRow)
            End Get
        End Property
        
        Public Event IMAGENRowChanging As IMAGENRowChangeEventHandler
        
        Public Event IMAGENRowChanged As IMAGENRowChangeEventHandler
        
        Public Event IMAGENRowDeleting As IMAGENRowChangeEventHandler
        
        Public Event IMAGENRowDeleted As IMAGENRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIMAGENRow(ByVal row As IMAGENRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIMAGENRow(ByVal PICTURE() As Byte) As IMAGENRow
            Dim rowIMAGENRow As IMAGENRow = CType(Me.NewRow,IMAGENRow)
            Dim columnValuesArray() As Object = New Object() {PICTURE}
            rowIMAGENRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIMAGENRow)
            Return rowIMAGENRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IMAGENDataTable = CType(MyBase.Clone,IMAGENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IMAGENDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPICTURE = MyBase.Columns("PICTURE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPICTURE = New Global.System.Data.DataColumn("PICTURE", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPICTURE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIMAGENRow() As IMAGENRow
            Return CType(Me.NewRow,IMAGENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IMAGENRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IMAGENRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IMAGENRowChangedEvent) Is Nothing) Then
                RaiseEvent IMAGENRowChanged(Me, New IMAGENRowChangeEvent(CType(e.Row,IMAGENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IMAGENRowChangingEvent) Is Nothing) Then
                RaiseEvent IMAGENRowChanging(Me, New IMAGENRowChangeEvent(CType(e.Row,IMAGENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IMAGENRowDeletedEvent) Is Nothing) Then
                RaiseEvent IMAGENRowDeleted(Me, New IMAGENRowChangeEvent(CType(e.Row,IMAGENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IMAGENRowDeletingEvent) Is Nothing) Then
                RaiseEvent IMAGENRowDeleting(Me, New IMAGENRowChangeEvent(CType(e.Row,IMAGENRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIMAGENRow(ByVal row As IMAGENRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IMAGENDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DOCUMENTO_IMPUESTODataTable
        Inherits Global.System.Data.TypedTableBase(Of DOCUMENTO_IMPUESTORow)
        
        Private columnIMP_NOMBRE As Global.System.Data.DataColumn
        
        Private columnIMP_VALUES As Global.System.Data.DataColumn
        
        Private columnIMP_ENTECOBRADOR As Global.System.Data.DataColumn
        
        Private columnIMP_CAMPOCLAVEID As Global.System.Data.DataColumn
        
        Private columnIMP_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DOCUMENTO_IMPUESTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_VALUESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_VALUES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_ENTECOBRADORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_ENTECOBRADOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_CAMPOCLAVEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_CAMPOCLAVEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DOCUMENTO_IMPUESTORow
            Get
                Return CType(Me.Rows(index),DOCUMENTO_IMPUESTORow)
            End Get
        End Property
        
        Public Event DOCUMENTO_IMPUESTORowChanging As DOCUMENTO_IMPUESTORowChangeEventHandler
        
        Public Event DOCUMENTO_IMPUESTORowChanged As DOCUMENTO_IMPUESTORowChangeEventHandler
        
        Public Event DOCUMENTO_IMPUESTORowDeleting As DOCUMENTO_IMPUESTORowChangeEventHandler
        
        Public Event DOCUMENTO_IMPUESTORowDeleted As DOCUMENTO_IMPUESTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDOCUMENTO_IMPUESTORow(ByVal row As DOCUMENTO_IMPUESTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDOCUMENTO_IMPUESTORow(ByVal IMP_NOMBRE As String, ByVal IMP_VALUES As Integer, ByVal IMP_ENTECOBRADOR As String, ByVal IMP_CAMPOCLAVEID As String, ByVal IMP_ID As Integer) As DOCUMENTO_IMPUESTORow
            Dim rowDOCUMENTO_IMPUESTORow As DOCUMENTO_IMPUESTORow = CType(Me.NewRow,DOCUMENTO_IMPUESTORow)
            Dim columnValuesArray() As Object = New Object() {IMP_NOMBRE, IMP_VALUES, IMP_ENTECOBRADOR, IMP_CAMPOCLAVEID, IMP_ID}
            rowDOCUMENTO_IMPUESTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDOCUMENTO_IMPUESTORow)
            Return rowDOCUMENTO_IMPUESTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DOCUMENTO_IMPUESTODataTable = CType(MyBase.Clone,DOCUMENTO_IMPUESTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DOCUMENTO_IMPUESTODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIMP_NOMBRE = MyBase.Columns("IMP_NOMBRE")
            Me.columnIMP_VALUES = MyBase.Columns("IMP_VALUES")
            Me.columnIMP_ENTECOBRADOR = MyBase.Columns("IMP_ENTECOBRADOR")
            Me.columnIMP_CAMPOCLAVEID = MyBase.Columns("IMP_CAMPOCLAVEID")
            Me.columnIMP_ID = MyBase.Columns("IMP_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIMP_NOMBRE = New Global.System.Data.DataColumn("IMP_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_NOMBRE)
            Me.columnIMP_VALUES = New Global.System.Data.DataColumn("IMP_VALUES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_VALUES)
            Me.columnIMP_ENTECOBRADOR = New Global.System.Data.DataColumn("IMP_ENTECOBRADOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_ENTECOBRADOR)
            Me.columnIMP_CAMPOCLAVEID = New Global.System.Data.DataColumn("IMP_CAMPOCLAVEID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_CAMPOCLAVEID)
            Me.columnIMP_ID = New Global.System.Data.DataColumn("IMP_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_ID)
            Me.columnIMP_NOMBRE.MaxLength = 200
            Me.columnIMP_ENTECOBRADOR.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDOCUMENTO_IMPUESTORow() As DOCUMENTO_IMPUESTORow
            Return CType(Me.NewRow,DOCUMENTO_IMPUESTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DOCUMENTO_IMPUESTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DOCUMENTO_IMPUESTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DOCUMENTO_IMPUESTORowChangedEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_IMPUESTORowChanged(Me, New DOCUMENTO_IMPUESTORowChangeEvent(CType(e.Row,DOCUMENTO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DOCUMENTO_IMPUESTORowChangingEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_IMPUESTORowChanging(Me, New DOCUMENTO_IMPUESTORowChangeEvent(CType(e.Row,DOCUMENTO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DOCUMENTO_IMPUESTORowDeletedEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_IMPUESTORowDeleted(Me, New DOCUMENTO_IMPUESTORowChangeEvent(CType(e.Row,DOCUMENTO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DOCUMENTO_IMPUESTORowDeletingEvent) Is Nothing) Then
                RaiseEvent DOCUMENTO_IMPUESTORowDeleting(Me, New DOCUMENTO_IMPUESTORowChangeEvent(CType(e.Row,DOCUMENTO_IMPUESTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDOCUMENTO_IMPUESTORow(ByVal row As DOCUMENTO_IMPUESTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DOCUMENTO_IMPUESTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class usuariosDataTable
        Inherits Global.System.Data.TypedTableBase(Of usuariosRow)
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columndocumento As Global.System.Data.DataColumn
        
        Private columnclave As Global.System.Data.DataColumn
        
        Private columnnivelacces As Global.System.Data.DataColumn
        
        Private columncobrador As Global.System.Data.DataColumn
        
        Private columnapppredial As Global.System.Data.DataColumn
        
        Private columnappvehic As Global.System.Data.DataColumn
        
        Private columnappcuotasp As Global.System.Data.DataColumn
        
        Private columnappindycom As Global.System.Data.DataColumn
        
        Private columnlogin As Global.System.Data.DataColumn
        
        Private columnconuser As Global.System.Data.DataColumn
        
        Private columnuseractivo As Global.System.Data.DataColumn
        
        Private columnuseremail As Global.System.Data.DataColumn
        
        Private columnusercamclave As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "usuarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property documentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property claveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nivelaccesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnivelacces
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cobradorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncobrador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property apppredialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapppredial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appvehicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappvehic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appcuotaspColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappcuotasp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appindycomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappindycom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property loginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conuserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconuser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property useractivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuseractivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property useremailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuseremail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usercamclaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusercamclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As usuariosRow
            Get
                Return CType(Me.Rows(index),usuariosRow)
            End Get
        End Property
        
        Public Event usuariosRowChanging As usuariosRowChangeEventHandler
        
        Public Event usuariosRowChanged As usuariosRowChangeEventHandler
        
        Public Event usuariosRowDeleting As usuariosRowChangeEventHandler
        
        Public Event usuariosRowDeleted As usuariosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddusuariosRow(ByVal row As usuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddusuariosRow(ByVal codigo As String, ByVal nombre As String, ByVal documento As String, ByVal clave As String, ByVal nivelacces As Decimal, ByVal cobrador As String, ByVal apppredial As String, ByVal appvehic As String, ByVal appcuotasp As String, ByVal appindycom As String, ByVal login As String, ByVal useractivo As Boolean, ByVal useremail As String, ByVal usercamclave As Boolean) As usuariosRow
            Dim rowusuariosRow As usuariosRow = CType(Me.NewRow,usuariosRow)
            Dim columnValuesArray() As Object = New Object() {codigo, nombre, documento, clave, nivelacces, cobrador, apppredial, appvehic, appcuotasp, appindycom, login, Nothing, useractivo, useremail, usercamclave}
            rowusuariosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowusuariosRow)
            Return rowusuariosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByconuser(ByVal conuser As Integer) As usuariosRow
            Return CType(Me.Rows.Find(New Object() {conuser}),usuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As usuariosDataTable = CType(MyBase.Clone,usuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New usuariosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columndocumento = MyBase.Columns("documento")
            Me.columnclave = MyBase.Columns("clave")
            Me.columnnivelacces = MyBase.Columns("nivelacces")
            Me.columncobrador = MyBase.Columns("cobrador")
            Me.columnapppredial = MyBase.Columns("apppredial")
            Me.columnappvehic = MyBase.Columns("appvehic")
            Me.columnappcuotasp = MyBase.Columns("appcuotasp")
            Me.columnappindycom = MyBase.Columns("appindycom")
            Me.columnlogin = MyBase.Columns("login")
            Me.columnconuser = MyBase.Columns("conuser")
            Me.columnuseractivo = MyBase.Columns("useractivo")
            Me.columnuseremail = MyBase.Columns("useremail")
            Me.columnusercamclave = MyBase.Columns("usercamclave")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columndocumento = New Global.System.Data.DataColumn("documento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocumento)
            Me.columnclave = New Global.System.Data.DataColumn("clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclave)
            Me.columnnivelacces = New Global.System.Data.DataColumn("nivelacces", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnivelacces)
            Me.columncobrador = New Global.System.Data.DataColumn("cobrador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncobrador)
            Me.columnapppredial = New Global.System.Data.DataColumn("apppredial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapppredial)
            Me.columnappvehic = New Global.System.Data.DataColumn("appvehic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappvehic)
            Me.columnappcuotasp = New Global.System.Data.DataColumn("appcuotasp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappcuotasp)
            Me.columnappindycom = New Global.System.Data.DataColumn("appindycom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappindycom)
            Me.columnlogin = New Global.System.Data.DataColumn("login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin)
            Me.columnconuser = New Global.System.Data.DataColumn("conuser", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconuser)
            Me.columnuseractivo = New Global.System.Data.DataColumn("useractivo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuseractivo)
            Me.columnuseremail = New Global.System.Data.DataColumn("useremail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuseremail)
            Me.columnusercamclave = New Global.System.Data.DataColumn("usercamclave", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusercamclave)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnconuser}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 50
            Me.columnnombre.MaxLength = 50
            Me.columndocumento.MaxLength = 50
            Me.columnclave.MaxLength = 62
            Me.columncobrador.MaxLength = 2
            Me.columnapppredial.MaxLength = 1
            Me.columnappvehic.MaxLength = 1
            Me.columnappcuotasp.MaxLength = 1
            Me.columnappindycom.MaxLength = 1
            Me.columnlogin.MaxLength = 50
            Me.columnconuser.AutoIncrement = true
            Me.columnconuser.AutoIncrementSeed = -1
            Me.columnconuser.AutoIncrementStep = -1
            Me.columnconuser.AllowDBNull = false
            Me.columnconuser.ReadOnly = true
            Me.columnconuser.Unique = true
            Me.columnuseremail.MaxLength = 100
            Me.columnusercamclave.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewusuariosRow() As usuariosRow
            Return CType(Me.NewRow,usuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New usuariosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(usuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.usuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent usuariosRowChanged(Me, New usuariosRowChangeEvent(CType(e.Row,usuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.usuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent usuariosRowChanging(Me, New usuariosRowChangeEvent(CType(e.Row,usuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.usuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent usuariosRowDeleted(Me, New usuariosRowChangeEvent(CType(e.Row,usuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.usuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent usuariosRowDeleting(Me, New usuariosRowChangeEvent(CType(e.Row,usuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveusuariosRow(ByVal row As usuariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "usuariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACTOS_ADMINISTRATIVOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of ACTOS_ADMINISTRATIVOSRow)
        
        Private columnCODIGO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnIDETAPA As Global.System.Data.DataColumn
        
        Private columnNOMBREETAPA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACTOS_ADMINISTRATIVOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDETAPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDETAPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREETAPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBREETAPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACTOS_ADMINISTRATIVOSRow
            Get
                Return CType(Me.Rows(index),ACTOS_ADMINISTRATIVOSRow)
            End Get
        End Property
        
        Public Event ACTOS_ADMINISTRATIVOSRowChanging As ACTOS_ADMINISTRATIVOSRowChangeEventHandler
        
        Public Event ACTOS_ADMINISTRATIVOSRowChanged As ACTOS_ADMINISTRATIVOSRowChangeEventHandler
        
        Public Event ACTOS_ADMINISTRATIVOSRowDeleting As ACTOS_ADMINISTRATIVOSRowChangeEventHandler
        
        Public Event ACTOS_ADMINISTRATIVOSRowDeleted As ACTOS_ADMINISTRATIVOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACTOS_ADMINISTRATIVOSRow(ByVal row As ACTOS_ADMINISTRATIVOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACTOS_ADMINISTRATIVOSRow(ByVal CODIGO As String, ByVal NOMBRE As String, ByVal IDETAPA As String, ByVal NOMBREETAPA As String) As ACTOS_ADMINISTRATIVOSRow
            Dim rowACTOS_ADMINISTRATIVOSRow As ACTOS_ADMINISTRATIVOSRow = CType(Me.NewRow,ACTOS_ADMINISTRATIVOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO, NOMBRE, IDETAPA, NOMBREETAPA}
            rowACTOS_ADMINISTRATIVOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACTOS_ADMINISTRATIVOSRow)
            Return rowACTOS_ADMINISTRATIVOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACTOS_ADMINISTRATIVOSDataTable = CType(MyBase.Clone,ACTOS_ADMINISTRATIVOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACTOS_ADMINISTRATIVOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO = MyBase.Columns("CODIGO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnIDETAPA = MyBase.Columns("IDETAPA")
            Me.columnNOMBREETAPA = MyBase.Columns("NOMBREETAPA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO = New Global.System.Data.DataColumn("CODIGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnIDETAPA = New Global.System.Data.DataColumn("IDETAPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDETAPA)
            Me.columnNOMBREETAPA = New Global.System.Data.DataColumn("NOMBREETAPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBREETAPA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACTOS_ADMINISTRATIVOSRow() As ACTOS_ADMINISTRATIVOSRow
            Return CType(Me.NewRow,ACTOS_ADMINISTRATIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACTOS_ADMINISTRATIVOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACTOS_ADMINISTRATIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACTOS_ADMINISTRATIVOSRowChangedEvent) Is Nothing) Then
                RaiseEvent ACTOS_ADMINISTRATIVOSRowChanged(Me, New ACTOS_ADMINISTRATIVOSRowChangeEvent(CType(e.Row,ACTOS_ADMINISTRATIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACTOS_ADMINISTRATIVOSRowChangingEvent) Is Nothing) Then
                RaiseEvent ACTOS_ADMINISTRATIVOSRowChanging(Me, New ACTOS_ADMINISTRATIVOSRowChangeEvent(CType(e.Row,ACTOS_ADMINISTRATIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACTOS_ADMINISTRATIVOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACTOS_ADMINISTRATIVOSRowDeleted(Me, New ACTOS_ADMINISTRATIVOSRowChangeEvent(CType(e.Row,ACTOS_ADMINISTRATIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACTOS_ADMINISTRATIVOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACTOS_ADMINISTRATIVOSRowDeleting(Me, New ACTOS_ADMINISTRATIVOSRowChangeEvent(CType(e.Row,ACTOS_ADMINISTRATIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACTOS_ADMINISTRATIVOSRow(ByVal row As ACTOS_ADMINISTRATIVOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACTOS_ADMINISTRATIVOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NROPREDIOXDEUDORDataTable
        Inherits Global.System.Data.TypedTableBase(Of NROPREDIOXDEUDORRow)
        
        Private columnEDC_NITCC As Global.System.Data.DataColumn
        
        Private columnEDC_NOMBRE As Global.System.Data.DataColumn
        
        Private columnEDC_ID As Global.System.Data.DataColumn
        
        Private columnEDC_DIRECCION As Global.System.Data.DataColumn
        
        Private columnEDC_ESTRATO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NROPREDIOXDEUDOR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EDC_NITCCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDC_NITCC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EDC_NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDC_NOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EDC_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDC_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EDC_DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDC_DIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EDC_ESTRATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDC_ESTRATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NROPREDIOXDEUDORRow
            Get
                Return CType(Me.Rows(index),NROPREDIOXDEUDORRow)
            End Get
        End Property
        
        Public Event NROPREDIOXDEUDORRowChanging As NROPREDIOXDEUDORRowChangeEventHandler
        
        Public Event NROPREDIOXDEUDORRowChanged As NROPREDIOXDEUDORRowChangeEventHandler
        
        Public Event NROPREDIOXDEUDORRowDeleting As NROPREDIOXDEUDORRowChangeEventHandler
        
        Public Event NROPREDIOXDEUDORRowDeleted As NROPREDIOXDEUDORRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNROPREDIOXDEUDORRow(ByVal row As NROPREDIOXDEUDORRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNROPREDIOXDEUDORRow(ByVal EDC_NITCC As String, ByVal EDC_NOMBRE As String, ByVal EDC_ID As String, ByVal EDC_DIRECCION As String, ByVal EDC_ESTRATO As String) As NROPREDIOXDEUDORRow
            Dim rowNROPREDIOXDEUDORRow As NROPREDIOXDEUDORRow = CType(Me.NewRow,NROPREDIOXDEUDORRow)
            Dim columnValuesArray() As Object = New Object() {EDC_NITCC, EDC_NOMBRE, EDC_ID, EDC_DIRECCION, EDC_ESTRATO}
            rowNROPREDIOXDEUDORRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNROPREDIOXDEUDORRow)
            Return rowNROPREDIOXDEUDORRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NROPREDIOXDEUDORDataTable = CType(MyBase.Clone,NROPREDIOXDEUDORDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NROPREDIOXDEUDORDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEDC_NITCC = MyBase.Columns("EDC_NITCC")
            Me.columnEDC_NOMBRE = MyBase.Columns("EDC_NOMBRE")
            Me.columnEDC_ID = MyBase.Columns("EDC_ID")
            Me.columnEDC_DIRECCION = MyBase.Columns("EDC_DIRECCION")
            Me.columnEDC_ESTRATO = MyBase.Columns("EDC_ESTRATO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEDC_NITCC = New Global.System.Data.DataColumn("EDC_NITCC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDC_NITCC)
            Me.columnEDC_NOMBRE = New Global.System.Data.DataColumn("EDC_NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDC_NOMBRE)
            Me.columnEDC_ID = New Global.System.Data.DataColumn("EDC_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDC_ID)
            Me.columnEDC_DIRECCION = New Global.System.Data.DataColumn("EDC_DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDC_DIRECCION)
            Me.columnEDC_ESTRATO = New Global.System.Data.DataColumn("EDC_ESTRATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDC_ESTRATO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNROPREDIOXDEUDORRow() As NROPREDIOXDEUDORRow
            Return CType(Me.NewRow,NROPREDIOXDEUDORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NROPREDIOXDEUDORRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NROPREDIOXDEUDORRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NROPREDIOXDEUDORRowChangedEvent) Is Nothing) Then
                RaiseEvent NROPREDIOXDEUDORRowChanged(Me, New NROPREDIOXDEUDORRowChangeEvent(CType(e.Row,NROPREDIOXDEUDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NROPREDIOXDEUDORRowChangingEvent) Is Nothing) Then
                RaiseEvent NROPREDIOXDEUDORRowChanging(Me, New NROPREDIOXDEUDORRowChangeEvent(CType(e.Row,NROPREDIOXDEUDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NROPREDIOXDEUDORRowDeletedEvent) Is Nothing) Then
                RaiseEvent NROPREDIOXDEUDORRowDeleted(Me, New NROPREDIOXDEUDORRowChangeEvent(CType(e.Row,NROPREDIOXDEUDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NROPREDIOXDEUDORRowDeletingEvent) Is Nothing) Then
                RaiseEvent NROPREDIOXDEUDORRowDeleting(Me, New NROPREDIOXDEUDORRowChangeEvent(CType(e.Row,NROPREDIOXDEUDORRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNROPREDIOXDEUDORRow(ByVal row As NROPREDIOXDEUDORRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NROPREDIOXDEUDORDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class gridUsuariosDataTable
        Inherits Global.System.Data.TypedTableBase(Of gridUsuariosRow)
        
        Private columncodigo As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columndocumento As Global.System.Data.DataColumn
        
        Private columnclave As Global.System.Data.DataColumn
        
        Private columnnivelacces As Global.System.Data.DataColumn
        
        Private columncobrador As Global.System.Data.DataColumn
        
        Private columnapppredial As Global.System.Data.DataColumn
        
        Private columnappvehic As Global.System.Data.DataColumn
        
        Private columnappcuotasp As Global.System.Data.DataColumn
        
        Private columnappindycom As Global.System.Data.DataColumn
        
        Private columnlogin As Global.System.Data.DataColumn
        
        Private columnconuser As Global.System.Data.DataColumn
        
        Private columnuseractivo As Global.System.Data.DataColumn
        
        Private columnuseremail As Global.System.Data.DataColumn
        
        Private columnusercamclave As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "gridUsuarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property documentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property claveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nivelaccesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnivelacces
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cobradorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncobrador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property apppredialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapppredial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appvehicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappvehic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appcuotaspColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappcuotasp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appindycomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappindycom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property loginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conuserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconuser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property useractivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuseractivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property useremailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuseremail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usercamclaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusercamclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As gridUsuariosRow
            Get
                Return CType(Me.Rows(index),gridUsuariosRow)
            End Get
        End Property
        
        Public Event gridUsuariosRowChanging As gridUsuariosRowChangeEventHandler
        
        Public Event gridUsuariosRowChanged As gridUsuariosRowChangeEventHandler
        
        Public Event gridUsuariosRowDeleting As gridUsuariosRowChangeEventHandler
        
        Public Event gridUsuariosRowDeleted As gridUsuariosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddgridUsuariosRow(ByVal row As gridUsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddgridUsuariosRow(ByVal codigo As String, ByVal nombre As String, ByVal documento As String, ByVal clave As String, ByVal nivelacces As Decimal, ByVal cobrador As String, ByVal apppredial As String, ByVal appvehic As String, ByVal appcuotasp As String, ByVal appindycom As String, ByVal login As String, ByVal useractivo As String, ByVal useremail As String, ByVal usercamclave As Boolean) As gridUsuariosRow
            Dim rowgridUsuariosRow As gridUsuariosRow = CType(Me.NewRow,gridUsuariosRow)
            Dim columnValuesArray() As Object = New Object() {codigo, nombre, documento, clave, nivelacces, cobrador, apppredial, appvehic, appcuotasp, appindycom, login, Nothing, useractivo, useremail, usercamclave}
            rowgridUsuariosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowgridUsuariosRow)
            Return rowgridUsuariosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByconuser(ByVal conuser As Integer) As gridUsuariosRow
            Return CType(Me.Rows.Find(New Object() {conuser}),gridUsuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As gridUsuariosDataTable = CType(MyBase.Clone,gridUsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New gridUsuariosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo = MyBase.Columns("codigo")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columndocumento = MyBase.Columns("documento")
            Me.columnclave = MyBase.Columns("clave")
            Me.columnnivelacces = MyBase.Columns("nivelacces")
            Me.columncobrador = MyBase.Columns("cobrador")
            Me.columnapppredial = MyBase.Columns("apppredial")
            Me.columnappvehic = MyBase.Columns("appvehic")
            Me.columnappcuotasp = MyBase.Columns("appcuotasp")
            Me.columnappindycom = MyBase.Columns("appindycom")
            Me.columnlogin = MyBase.Columns("login")
            Me.columnconuser = MyBase.Columns("conuser")
            Me.columnuseractivo = MyBase.Columns("useractivo")
            Me.columnuseremail = MyBase.Columns("useremail")
            Me.columnusercamclave = MyBase.Columns("usercamclave")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo = New Global.System.Data.DataColumn("codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columndocumento = New Global.System.Data.DataColumn("documento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndocumento)
            Me.columnclave = New Global.System.Data.DataColumn("clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclave)
            Me.columnnivelacces = New Global.System.Data.DataColumn("nivelacces", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnivelacces)
            Me.columncobrador = New Global.System.Data.DataColumn("cobrador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncobrador)
            Me.columnapppredial = New Global.System.Data.DataColumn("apppredial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapppredial)
            Me.columnappvehic = New Global.System.Data.DataColumn("appvehic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappvehic)
            Me.columnappcuotasp = New Global.System.Data.DataColumn("appcuotasp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappcuotasp)
            Me.columnappindycom = New Global.System.Data.DataColumn("appindycom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappindycom)
            Me.columnlogin = New Global.System.Data.DataColumn("login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin)
            Me.columnconuser = New Global.System.Data.DataColumn("conuser", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconuser)
            Me.columnuseractivo = New Global.System.Data.DataColumn("useractivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuseractivo)
            Me.columnuseremail = New Global.System.Data.DataColumn("useremail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuseremail)
            Me.columnusercamclave = New Global.System.Data.DataColumn("usercamclave", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusercamclave)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnconuser}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.MaxLength = 50
            Me.columnnombre.MaxLength = 50
            Me.columndocumento.MaxLength = 50
            Me.columnclave.MaxLength = 62
            Me.columncobrador.MaxLength = 2
            Me.columnapppredial.MaxLength = 1
            Me.columnappvehic.MaxLength = 1
            Me.columnappcuotasp.MaxLength = 1
            Me.columnappindycom.MaxLength = 1
            Me.columnlogin.MaxLength = 50
            Me.columnconuser.AutoIncrement = true
            Me.columnconuser.AutoIncrementSeed = -1
            Me.columnconuser.AutoIncrementStep = -1
            Me.columnconuser.AllowDBNull = false
            Me.columnconuser.ReadOnly = true
            Me.columnconuser.Unique = true
            Me.columnuseremail.MaxLength = 100
            Me.columnusercamclave.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewgridUsuariosRow() As gridUsuariosRow
            Return CType(Me.NewRow,gridUsuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New gridUsuariosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(gridUsuariosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.gridUsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent gridUsuariosRowChanged(Me, New gridUsuariosRowChangeEvent(CType(e.Row,gridUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.gridUsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent gridUsuariosRowChanging(Me, New gridUsuariosRowChangeEvent(CType(e.Row,gridUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.gridUsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent gridUsuariosRowDeleted(Me, New gridUsuariosRowChangeEvent(CType(e.Row,gridUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.gridUsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent gridUsuariosRowDeleting(Me, New gridUsuariosRowChangeEvent(CType(e.Row,gridUsuariosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovegridUsuariosRow(ByVal row As gridUsuariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatasetForm = New DatasetForm
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "gridUsuariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MAESTRO_BANCOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAESTRO_BANCOS As MAESTRO_BANCOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAESTRO_BANCOS = CType(Me.Table,MAESTRO_BANCOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAN_CODIGO() As String
            Get
                Return CType(Me(Me.tableMAESTRO_BANCOS.BAN_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableMAESTRO_BANCOS.BAN_CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BAN_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAESTRO_BANCOS.BAN_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BAN_NOMBRE' de la tabla 'MAESTRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAESTRO_BANCOS.BAN_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBAN_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableMAESTRO_BANCOS.BAN_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBAN_NOMBRENull()
            Me(Me.tableMAESTRO_BANCOS.BAN_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class abogadosRow
        Inherits Global.System.Data.DataRow
        
        Private tableabogados As abogadosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableabogados = CType(Me.Table,abogadosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cedula() As String
            Get
                Return CType(Me(Me.tableabogados.cedulaColumn),String)
            End Get
            Set
                Me(Me.tableabogados.cedulaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombres() As String
            Get
                Return CType(Me(Me.tableabogados.nombresColumn),String)
            End Get
            Set
                Me(Me.tableabogados.nombresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apellidos() As String
            Get
                Return CType(Me(Me.tableabogados.apellidosColumn),String)
            End Get
            Set
                Me(Me.tableabogados.apellidosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tarjetapro() As String
            Get
                Try 
                    Return CType(Me(Me.tableabogados.tarjetaproColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tarjetapro' de la tabla 'abogados' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableabogados.tarjetaproColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstarjetaproNull() As Boolean
            Return Me.IsNull(Me.tableabogados.tarjetaproColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettarjetaproNull()
            Me(Me.tableabogados.tarjetaproColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class documentosRow
        Inherits Global.System.Data.DataRow
        
        Private tabledocumentos As documentosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledocumentos = CType(Me.Table,documentosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property entidad() As String
            Get
                Return CType(Me(Me.tabledocumentos.entidadColumn),String)
            End Get
            Set
                Me(Me.tabledocumentos.entidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idacto() As String
            Get
                Return CType(Me(Me.tabledocumentos.idactoColumn),String)
            End Get
            Set
                Me(Me.tabledocumentos.idactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ruta() As String
            Get
                Return CType(Me(Me.tabledocumentos.rutaColumn),String)
            End Get
            Set
                Me(Me.tabledocumentos.rutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nomarchivo() As String
            Get
                Return CType(Me(Me.tabledocumentos.nomarchivoColumn),String)
            End Get
            Set
                Me(Me.tabledocumentos.nomarchivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Decimal
            Get
                Return CType(Me(Me.tabledocumentos.idColumn),Decimal)
            End Get
            Set
                Me(Me.tabledocumentos.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paginas() As Decimal
            Get
                Return CType(Me(Me.tabledocumentos.paginasColumn),Decimal)
            End Get
            Set
                Me(Me.tabledocumentos.paginasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecharadic() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.fecharadicColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecharadic' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.fecharadicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cobrador() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.cobradorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cobrador' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.cobradorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docexpediente() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docexpedienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docexpediente' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docexpedienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docproceso() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docprocesoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docproceso' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docprocesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docpredio_refecatrastal() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docpredio_refecatrastalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docpredio_refecatrastal' de la tabla 'documentos' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docpredio_refecatrastalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docacumulacio() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docacumulacioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docacumulacio' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docacumulacioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docfechadoc() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docfechadocColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docfechadoc' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docfechadocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docObservaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docObservaciones' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docanular() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docanularColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docanular' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docanularColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docusuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docusuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docusuario' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docusuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docfechasystem() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docfechasystemColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docfechasystem' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docfechasystemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docActivotributario() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docActivotributarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docActivotributario' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docActivotributarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docimpuesto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docimpuestoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docimpuesto' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docimpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docResolucion() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docResolucionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docResolucion' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docResolucionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docActoPre() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumentos.docActoPreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docActoPre' de la tabla 'documentos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumentos.docActoPreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecharadicNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.fecharadicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecharadicNull()
            Me(Me.tabledocumentos.fecharadicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscobradorNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.cobradorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcobradorNull()
            Me(Me.tabledocumentos.cobradorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocexpedienteNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docexpedienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocexpedienteNull()
            Me(Me.tabledocumentos.docexpedienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocprocesoNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docprocesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocprocesoNull()
            Me(Me.tabledocumentos.docprocesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdocpredio_refecatrastalNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docpredio_refecatrastalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdocpredio_refecatrastalNull()
            Me(Me.tabledocumentos.docpredio_refecatrastalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocacumulacioNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docacumulacioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocacumulacioNull()
            Me(Me.tabledocumentos.docacumulacioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocfechadocNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docfechadocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocfechadocNull()
            Me(Me.tabledocumentos.docfechadocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocObservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocObservacionesNull()
            Me(Me.tabledocumentos.docObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocanularNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docanularColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocanularNull()
            Me(Me.tabledocumentos.docanularColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocusuarioNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docusuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocusuarioNull()
            Me(Me.tabledocumentos.docusuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocfechasystemNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docfechasystemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocfechasystemNull()
            Me(Me.tabledocumentos.docfechasystemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocActivotributarioNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docActivotributarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocActivotributarioNull()
            Me(Me.tabledocumentos.docActivotributarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocimpuestoNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docimpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocimpuestoNull()
            Me(Me.tabledocumentos.docimpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocResolucionNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docResolucionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocResolucionNull()
            Me(Me.tabledocumentos.docResolucionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocActoPreNull() As Boolean
            Return Me.IsNull(Me.tabledocumentos.docActoPreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocActoPreNull()
            Me(Me.tabledocumentos.docActoPreColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class etapasRow
        Inherits Global.System.Data.DataRow
        
        Private tableetapas As etapasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableetapas = CType(Me.Table,etapasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableetapas.codigoColumn),String)
            End Get
            Set
                Me(Me.tableetapas.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableetapas.nombreColumn),String)
            End Get
            Set
                Me(Me.tableetapas.nombreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class etapa_actoRow
        Inherits Global.System.Data.DataRow
        
        Private tableetapa_acto As etapa_actoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableetapa_acto = CType(Me.Table,etapa_actoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableetapa_acto.codigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigo' de la tabla 'etapa_acto' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableetapa_acto.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableetapa_acto.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'etapa_acto' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableetapa_acto.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idetapa() As String
            Get
                Try 
                    Return CType(Me(Me.tableetapa_acto.idetapaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idetapa' de la tabla 'etapa_acto' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableetapa_acto.idetapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nometapa() As String
            Get
                Try 
                    Return CType(Me(Me.tableetapa_acto.nometapaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nometapa' de la tabla 'etapa_acto' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableetapa_acto.nometapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoNull() As Boolean
            Return Me.IsNull(Me.tableetapa_acto.codigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoNull()
            Me(Me.tableetapa_acto.codigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableetapa_acto.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableetapa_acto.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidetapaNull() As Boolean
            Return Me.IsNull(Me.tableetapa_acto.idetapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidetapaNull()
            Me(Me.tableetapa_acto.idetapaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnometapaNull() As Boolean
            Return Me.IsNull(Me.tableetapa_acto.nometapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnometapaNull()
            Me(Me.tableetapa_acto.nometapaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class USUARIO_PPALMENURow
        Inherits Global.System.Data.DataRow
        
        Private tableUSUARIO_PPALMENU As USUARIO_PPALMENUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUSUARIO_PPALMENU = CType(Me.Table,USUARIO_PPALMENUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_USUARIO() As String
            Get
                Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_USUARIOColumn),String)
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_OPCIONMENU() As String
            Get
                Try 
                    Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_OPCIONMENUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ME_OPCIONMENU' de la tabla 'USUARIO_PPALMENU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_OPCIONMENUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_PERMISO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_PERMISOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ME_PERMISO' de la tabla 'USUARIO_PPALMENU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_PERMISOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_OPCIONINDEX() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_OPCIONINDEXColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ME_OPCIONINDEX' de la tabla 'USUARIO_PPALMENU' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_OPCIONINDEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_MENU() As String
            Get
                Try 
                    Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_MENUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ME_MENU' de la tabla 'USUARIO_PPALMENU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_MENUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_DETALLEOPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_DETALLEOPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ME_DETALLEOPCION' de la tabla 'USUARIO_PPALMENU' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_DETALLEOPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ME_CONTADORME() As Integer
            Get
                Return CType(Me(Me.tableUSUARIO_PPALMENU.ME_CONTADORMEColumn),Integer)
            End Get
            Set
                Me(Me.tableUSUARIO_PPALMENU.ME_CONTADORMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsME_OPCIONMENUNull() As Boolean
            Return Me.IsNull(Me.tableUSUARIO_PPALMENU.ME_OPCIONMENUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetME_OPCIONMENUNull()
            Me(Me.tableUSUARIO_PPALMENU.ME_OPCIONMENUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsME_PERMISONull() As Boolean
            Return Me.IsNull(Me.tableUSUARIO_PPALMENU.ME_PERMISOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetME_PERMISONull()
            Me(Me.tableUSUARIO_PPALMENU.ME_PERMISOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsME_OPCIONINDEXNull() As Boolean
            Return Me.IsNull(Me.tableUSUARIO_PPALMENU.ME_OPCIONINDEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetME_OPCIONINDEXNull()
            Me(Me.tableUSUARIO_PPALMENU.ME_OPCIONINDEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsME_MENUNull() As Boolean
            Return Me.IsNull(Me.tableUSUARIO_PPALMENU.ME_MENUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetME_MENUNull()
            Me(Me.tableUSUARIO_PPALMENU.ME_MENUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsME_DETALLEOPCIONNull() As Boolean
            Return Me.IsNull(Me.tableUSUARIO_PPALMENU.ME_DETALLEOPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetME_DETALLEOPCIONNull()
            Me(Me.tableUSUARIO_PPALMENU.ME_DETALLEOPCIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PROPIETARIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROPIETARIOS As PROPIETARIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROPIETARIOS = CType(Me.Table,PROPIETARIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEDULA() As String
            Get
                Return CType(Me(Me.tablePROPIETARIOS.CEDULAColumn),String)
            End Get
            Set
                Me(Me.tablePROPIETARIOS.CEDULAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROPIETARIOS.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE' de la tabla 'PROPIETARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROPIETARIOS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROPIETARIOS.DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIRECCION' de la tabla 'PROPIETARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROPIETARIOS.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TELEFONO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROPIETARIOS.TELEFONOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TELEFONO' de la tabla 'PROPIETARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROPIETARIOS.TELEFONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COBRADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROPIETARIOS.COBRADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COBRADOR' de la tabla 'PROPIETARIOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROPIETARIOS.COBRADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As Boolean
            Get
                Return CType(Me(Me.tablePROPIETARIOS.ESTADOColumn),Boolean)
            End Get
            Set
                Me(Me.tablePROPIETARIOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tablePROPIETARIOS.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tablePROPIETARIOS.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tablePROPIETARIOS.DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIRECCIONNull()
            Me(Me.tablePROPIETARIOS.DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTELEFONONull() As Boolean
            Return Me.IsNull(Me.tablePROPIETARIOS.TELEFONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTELEFONONull()
            Me(Me.tablePROPIETARIOS.TELEFONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOBRADORNull() As Boolean
            Return Me.IsNull(Me.tablePROPIETARIOS.COBRADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOBRADORNull()
            Me(Me.tablePROPIETARIOS.COBRADORColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TDIAS_FESTIVOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTDIAS_FESTIVOS As TDIAS_FESTIVOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTDIAS_FESTIVOS = CType(Me.Table,TDIAS_FESTIVOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_DNL() As Integer
            Get
                Return CType(Me(Me.tableTDIAS_FESTIVOS.ID_DNLColumn),Integer)
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS.ID_DNLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTDIAS_FESTIVOS.FECHAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'TDIAS_FESTIVOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTDIAS_FESTIVOS.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'TDIAS_FESTIVOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTDIAS_FESTIVOS.ANNIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANNIO' de la tabla 'TDIAS_FESTIVOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS.ANNIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableTDIAS_FESTIVOS.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableTDIAS_FESTIVOS.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableTDIAS_FESTIVOS.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableTDIAS_FESTIVOS.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNIONull() As Boolean
            Return Me.IsNull(Me.tableTDIAS_FESTIVOS.ANNIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNIONull()
            Me(Me.tableTDIAS_FESTIVOS.ANNIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TDIAS_FESTIVOS_formRow
        Inherits Global.System.Data.DataRow
        
        Private tableTDIAS_FESTIVOS_form As TDIAS_FESTIVOS_formDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTDIAS_FESTIVOS_form = CType(Me.Table,TDIAS_FESTIVOS_formDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_DNL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTDIAS_FESTIVOS_form.ID_DNLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ID_DNL' de la tabla 'TDIAS_FESTIVOS_form' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS_form.ID_DNLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTDIAS_FESTIVOS_form.FECHAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'TDIAS_FESTIVOS_form' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS_form.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTDIAS_FESTIVOS_form.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'TDIAS_FESTIVOS_form' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTDIAS_FESTIVOS_form.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_DNLNull() As Boolean
            Return Me.IsNull(Me.tableTDIAS_FESTIVOS_form.ID_DNLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_DNLNull()
            Me(Me.tableTDIAS_FESTIVOS_form.ID_DNLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableTDIAS_FESTIVOS_form.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableTDIAS_FESTIVOS_form.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableTDIAS_FESTIVOS_form.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableTDIAS_FESTIVOS_form.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcesoExpedienteRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcesoExpediente As ProcesoExpedienteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcesoExpediente = CType(Me.Table,ProcesoExpedienteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.ACTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ACTO' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.ACTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCION' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_R() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.FECHA_RColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_R' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.FECHA_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_P() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.FECHA_PColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_P' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.FECHA_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.DIASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIAS' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.DIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TERMINO() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.TERMINOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TERMINO' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.TERMINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMARCHIVO() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.NOMARCHIVOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMARCHIVO' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.NOMARCHIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAGINAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.PAGINASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PAGINAS' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.PAGINASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.ENTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ENTIDAD' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.ENTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE' de la tabla 'ProcesoExpediente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCOBSERVACIONES() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoExpediente.DOCOBSERVACIONESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOCOBSERVACIONES' de la tabla 'ProcesoExpediente' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoExpediente.DOCOBSERVACIONESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTONull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.ACTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTONull()
            Me(Me.tableProcesoExpediente.ACTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIONNull()
            Me(Me.tableProcesoExpediente.DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_RNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.FECHA_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_RNull()
            Me(Me.tableProcesoExpediente.FECHA_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_PNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.FECHA_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_PNull()
            Me(Me.tableProcesoExpediente.FECHA_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIASNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.DIASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIASNull()
            Me(Me.tableProcesoExpediente.DIASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTERMINONull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.TERMINOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTERMINONull()
            Me(Me.tableProcesoExpediente.TERMINOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMARCHIVONull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.NOMARCHIVOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMARCHIVONull()
            Me(Me.tableProcesoExpediente.NOMARCHIVOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAGINASNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.PAGINASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAGINASNull()
            Me(Me.tableProcesoExpediente.PAGINASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENTIDADNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.ENTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENTIDADNull()
            Me(Me.tableProcesoExpediente.ENTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tableProcesoExpediente.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCOBSERVACIONESNull() As Boolean
            Return Me.IsNull(Me.tableProcesoExpediente.DOCOBSERVACIONESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCOBSERVACIONESNull()
            Me(Me.tableProcesoExpediente.DOCOBSERVACIONESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DEPENDENCIA_ACTUACIONESRow
        Inherits Global.System.Data.DataRow
        
        Private tableDEPENDENCIA_ACTUACIONES As DEPENDENCIA_ACTUACIONESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDEPENDENCIA_ACTUACIONES = CType(Me.Table,DEPENDENCIA_ACTUACIONESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_CODACTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_CODACTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_CODACTO' de la tabla 'DEPENDENCIA_ACTUACIONES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_CODACTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_NOMBREPPAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_NOMBREPPALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_NOMBREPPAL' de la tabla 'DEPENDENCIA_ACTUACIONES' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_NOMBREPPALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_DEPENDENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DEPENDENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_DEPENDENCIA' de la tabla 'DEPENDENCIA_ACTUACIONES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DEPENDENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_DESCRIPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DESCRIPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_DESCRIPCION' de la tabla 'DEPENDENCIA_ACTUACIONES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_TERMINO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TERMINOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_TERMINO' de la tabla 'DEPENDENCIA_ACTUACIONES' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TERMINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_TIPOTERMINO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TIPOTERMINOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_TIPOTERMINO' de la tabla 'DEPENDENCIA_ACTUACIONES' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TIPOTERMINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_EXCEPCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_EXCEPCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_EXCEPCION' de la tabla 'DEPENDENCIA_ACTUACIONES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_EXCEPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_ETAPA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ETAPAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_ETAPA' de la tabla 'DEPENDENCIA_ACTUACIONES' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ETAPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_HISTOPPAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_HISTOPPALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_HISTOPPAL' de la tabla 'DEPENDENCIA_ACTUACIONES' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_HISTOPPALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_ORDEN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ORDENColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEP_ORDEN' de la tabla 'DEPENDENCIA_ACTUACIONES' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ORDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEP_CONMOV() As Integer
            Get
                Return CType(Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_CONMOVColumn),Integer)
            End Get
            Set
                Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_CONMOVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_CODACTONull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_CODACTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_CODACTONull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_CODACTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_NOMBREPPALNull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_NOMBREPPALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_NOMBREPPALNull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_NOMBREPPALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_DEPENDENCIANull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DEPENDENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_DEPENDENCIANull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DEPENDENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_DESCRIPCIONNull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DESCRIPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_DESCRIPCIONNull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_DESCRIPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_TERMINONull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TERMINOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_TERMINONull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TERMINOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_TIPOTERMINONull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TIPOTERMINOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_TIPOTERMINONull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_TIPOTERMINOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_EXCEPCIONNull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_EXCEPCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_EXCEPCIONNull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_EXCEPCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_ETAPANull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ETAPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_ETAPANull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ETAPAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_HISTOPPALNull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_HISTOPPALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_HISTOPPALNull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_HISTOPPALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEP_ORDENNull() As Boolean
            Return Me.IsNull(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ORDENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEP_ORDENNull()
            Me(Me.tableDEPENDENCIA_ACTUACIONES.DEP_ORDENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CAT_CLIENTESRow
        Inherits Global.System.Data.DataRow
        
        Private tableCAT_CLIENTES As CAT_CLIENTESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCAT_CLIENTES = CType(Me.Table,CAT_CLIENTESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID_CLIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_CLIENTES.ID_CLIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ID_CLIENTE' de la tabla 'CAT_CLIENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_CLIENTES.ID_CLIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCAT_CLIENTES.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE' de la tabla 'CAT_CLIENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_CLIENTES.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FOTO() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCAT_CLIENTES.FOTOColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FOTO' de la tabla 'CAT_CLIENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_CLIENTES.FOTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_firma() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCAT_CLIENTES.ent_firmaColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_firma' de la tabla 'CAT_CLIENTES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCAT_CLIENTES.ent_firmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsID_CLIENTENull() As Boolean
            Return Me.IsNull(Me.tableCAT_CLIENTES.ID_CLIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetID_CLIENTENull()
            Me(Me.tableCAT_CLIENTES.ID_CLIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tableCAT_CLIENTES.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tableCAT_CLIENTES.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFOTONull() As Boolean
            Return Me.IsNull(Me.tableCAT_CLIENTES.FOTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFOTONull()
            Me(Me.tableCAT_CLIENTES.FOTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_firmaNull() As Boolean
            Return Me.IsNull(Me.tableCAT_CLIENTES.ent_firmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_firmaNull()
            Me(Me.tableCAT_CLIENTES.ent_firmaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParetoConsolidadoDeudaRow
        Inherits Global.System.Data.DataRow
        
        Private tableParetoConsolidadoDeuda As ParetoConsolidadoDeudaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParetoConsolidadoDeuda = CType(Me.Table,ParetoConsolidadoDeudaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiNit() As String
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.EfiNitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiNit' de la tabla 'ParetoConsolidadoDeuda' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.EfiNitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiNom() As String
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.EfiNomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiNom' de la tabla 'ParetoConsolidadoDeuda' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.EfiNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiValDeu() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.EfiValDeuColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiValDeu' de la tabla 'ParetoConsolidadoDeuda' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.EfiValDeuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiValInt() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.EfiValIntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiValInt' de la tabla 'ParetoConsolidadoDeuda' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.EfiValIntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.totalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'total' de la tabla 'ParetoConsolidadoDeuda' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acumulado() As Double
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.acumuladoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'acumulado' de la tabla 'ParetoConsolidadoDeuda' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.acumuladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property por() As String
            Get
                Try 
                    Return CType(Me(Me.tableParetoConsolidadoDeuda.porColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'por' de la tabla 'ParetoConsolidadoDeuda' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParetoConsolidadoDeuda.porColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiNitNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.EfiNitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiNitNull()
            Me(Me.tableParetoConsolidadoDeuda.EfiNitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiNomNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.EfiNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiNomNull()
            Me(Me.tableParetoConsolidadoDeuda.EfiNomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiValDeuNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.EfiValDeuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiValDeuNull()
            Me(Me.tableParetoConsolidadoDeuda.EfiValDeuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiValIntNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.EfiValIntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiValIntNull()
            Me(Me.tableParetoConsolidadoDeuda.EfiValIntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalNull()
            Me(Me.tableParetoConsolidadoDeuda.totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsacumuladoNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.acumuladoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetacumuladoNull()
            Me(Me.tableParetoConsolidadoDeuda.acumuladoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsporNull() As Boolean
            Return Me.IsNull(Me.tableParetoConsolidadoDeuda.porColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetporNull()
            Me(Me.tableParetoConsolidadoDeuda.porColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class entescobradoresRow
        Inherits Global.System.Data.DataRow
        
        Private tableentescobradores As entescobradoresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableentescobradores = CType(Me.Table,entescobradoresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableentescobradores.codigoColumn),String)
            End Get
            Set
                Me(Me.tableentescobradores.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableentescobradores.nombreColumn),String)
            End Get
            Set
                Me(Me.tableentescobradores.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_foto() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_fotoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_foto' de la tabla 'entescobradores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_fotoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_firma() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_firmaColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_firma' de la tabla 'entescobradores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_firmaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_ruta() As String
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_rutaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_ruta' de la tabla 'entescobradores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_rutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_rutalocal() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_rutalocalColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_rutalocal' de la tabla 'entescobradores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_rutalocalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_direccionlocalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_direccionlocalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_direccionlocalidad' de la tabla 'entescobradores' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_direccionlocalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_telefonoslocalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_telefonoslocalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_telefonoslocalidad' de la tabla 'entescobradores' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_telefonoslocalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ent_localidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableentescobradores.ent_localidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ent_localidad' de la tabla 'entescobradores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentescobradores.ent_localidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_fotoNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_fotoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_fotoNull()
            Me(Me.tableentescobradores.ent_fotoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_firmaNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_firmaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_firmaNull()
            Me(Me.tableentescobradores.ent_firmaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_rutaNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_rutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_rutaNull()
            Me(Me.tableentescobradores.ent_rutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_rutalocalNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_rutalocalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_rutalocalNull()
            Me(Me.tableentescobradores.ent_rutalocalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_direccionlocalidadNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_direccionlocalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_direccionlocalidadNull()
            Me(Me.tableentescobradores.ent_direccionlocalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_telefonoslocalidadNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_telefonoslocalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_telefonoslocalidadNull()
            Me(Me.tableentescobradores.ent_telefonoslocalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isent_localidadNull() As Boolean
            Return Me.IsNull(Me.tableentescobradores.ent_localidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setent_localidadNull()
            Me(Me.tableentescobradores.ent_localidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class entesdbfRow
        Inherits Global.System.Data.DataRow
        
        Private tableentesdbf As entesdbfDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableentesdbf = CType(Me.Table,entesdbfDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_nit() As String
            Get
                Return CType(Me(Me.tableentesdbf.codigo_nitColumn),String)
            End Get
            Set
                Me(Me.tableentesdbf.codigo_nitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableentesdbf.nombreColumn),String)
            End Get
            Set
                Me(Me.tableentesdbf.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cobrador() As String
            Get
                Try 
                    Return CType(Me(Me.tableentesdbf.cobradorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cobrador' de la tabla 'entesdbf' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentesdbf.cobradorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableentesdbf.direccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'direccion' de la tabla 'entesdbf' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentesdbf.direccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableentesdbf.telefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'telefono' de la tabla 'entesdbf' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentesdbf.telefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableentesdbf.estadoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'entesdbf' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableentesdbf.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscobradorNull() As Boolean
            Return Me.IsNull(Me.tableentesdbf.cobradorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcobradorNull()
            Me(Me.tableentesdbf.cobradorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdireccionNull() As Boolean
            Return Me.IsNull(Me.tableentesdbf.direccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdireccionNull()
            Me(Me.tableentesdbf.direccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelefonoNull() As Boolean
            Return Me.IsNull(Me.tableentesdbf.telefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelefonoNull()
            Me(Me.tableentesdbf.telefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableentesdbf.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableentesdbf.estadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class actuacionesRow
        Inherits Global.System.Data.DataRow
        
        Private tableactuaciones As actuacionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableactuaciones = CType(Me.Table,actuacionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableactuaciones.codigoColumn),String)
            End Get
            Set
                Me(Me.tableactuaciones.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableactuaciones.nombreColumn),String)
            End Get
            Set
                Me(Me.tableactuaciones.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idetapa() As String
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.idetapaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idetapa' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.idetapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manejaterm() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.manejatermColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'manejaterm' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.manejatermColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property termino() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.terminoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'termino' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.terminoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dependen1() As String
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.dependen1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dependen1' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.dependen1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dependen2() As String
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.dependen2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dependen2' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.dependen2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prioridad() As String
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.prioridadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'prioridad' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.prioridadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property historial() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.historialColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'historial' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.historialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actOrden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.actOrdenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'actOrden' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.actOrdenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property actMasivo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.actMasivoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'actMasivo' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.actMasivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechasys() As Date
            Get
                Try 
                    Return CType(Me(Me.tableactuaciones.fechasysColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechasys' de la tabla 'actuaciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactuaciones.fechasysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidetapaNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.idetapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidetapaNull()
            Me(Me.tableactuaciones.idetapaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanejatermNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.manejatermColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanejatermNull()
            Me(Me.tableactuaciones.manejatermColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsterminoNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.terminoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetterminoNull()
            Me(Me.tableactuaciones.terminoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdependen1Null() As Boolean
            Return Me.IsNull(Me.tableactuaciones.dependen1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdependen1Null()
            Me(Me.tableactuaciones.dependen1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdependen2Null() As Boolean
            Return Me.IsNull(Me.tableactuaciones.dependen2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdependen2Null()
            Me(Me.tableactuaciones.dependen2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprioridadNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.prioridadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprioridadNull()
            Me(Me.tableactuaciones.prioridadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshistorialNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.historialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethistorialNull()
            Me(Me.tableactuaciones.historialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsactOrdenNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.actOrdenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetactOrdenNull()
            Me(Me.tableactuaciones.actOrdenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsactMasivoNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.actMasivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetactMasivoNull()
            Me(Me.tableactuaciones.actMasivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechasysNull() As Boolean
            Return Me.IsNull(Me.tableactuaciones.fechasysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechasysNull()
            Me(Me.tableactuaciones.fechasysColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DOCUMENTO_MASIVO_HEADRow
        Inherits Global.System.Data.DataRow
        
        Private tableDOCUMENTO_MASIVO_HEAD As DOCUMENTO_MASIVO_HEADDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDOCUMENTO_MASIVO_HEAD = CType(Me.Table,DOCUMENTO_MASIVO_HEADDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_DOCUMENTO() As String
            Get
                Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_DOCUMENTOColumn),String)
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_DOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_FECHA' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_DETALLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_DETALLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_DETALLE' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_USUARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_USUARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_USUARIO' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_USUARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_COBRADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_COBRADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_COBRADOR' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_COBRADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_IMPUSTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_IMPUSTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_IMPUSTO' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_IMPUSTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_SEPARADO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_SEPARADOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_SEPARADO' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_SEPARADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DELL_ACTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_ACTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DELL_ACTO' de la tabla 'DOCUMENTO_MASIVO_HEAD' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_ACTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_FECHANull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_FECHANull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_DETALLENull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_DETALLENull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_USUARIONull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_USUARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_USUARIONull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_USUARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_COBRADORNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_COBRADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_COBRADORNull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_COBRADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_IMPUSTONull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_IMPUSTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_IMPUSTONull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_IMPUSTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_SEPARADONull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_SEPARADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_SEPARADONull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_SEPARADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDELL_ACTONull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_ACTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDELL_ACTONull()
            Me(Me.tableDOCUMENTO_MASIVO_HEAD.DELL_ACTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DOCUMENTO_MASIVORow
        Inherits Global.System.Data.DataRow
        
        Private tableDOCUMENTO_MASIVO As DOCUMENTO_MASIVODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDOCUMENTO_MASIVO = CType(Me.Table,DOCUMENTO_MASIVODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_DEUSDOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_DEUSDORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_DEUSDOR' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_DEUSDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_IMPUESTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_IMPUESTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_IMPUESTO' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_IMPUESTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_VALORMANDA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_VALORMANDAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_VALORMANDA' de la tabla 'DOCUMENTO_MASIVO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_VALORMANDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_NOMDEUDOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_NOMDEUDORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_NOMDEUDOR' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_NOMDEUDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_DIRECCION' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_DIR_ESTABL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_DIR_ESTABLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_DIR_ESTABL' de la tabla 'DOCUMENTO_MASIVO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_DIR_ESTABLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_REFCATRASTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_REFCATRASTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_REFCATRASTAL' de la tabla 'DOCUMENTO_MASIVO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_REFCATRASTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_VIGENCIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_VIGENCIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_VIGENCIA' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_VIGENCIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_CONCEPTOCDG() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_CONCEPTOCDGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_CONCEPTOCDG' de la tabla 'DOCUMENTO_MASIVO' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_CONCEPTOCDGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_ESTRATOCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_ESTRATOCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_ESTRATOCD' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_ESTRATOCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_DESTINOCD2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_DESTINOCD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_DESTINOCD2' de la tabla 'DOCUMENTO_MASIVO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_DESTINOCD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_BASEGRAVABLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_BASEGRAVABLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_BASEGRAVABLE' de la tabla 'DOCUMENTO_MASIVO' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_BASEGRAVABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_TARIFA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_TARIFAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_TARIFA' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_TARIFAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_CAPITAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_CAPITALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_CAPITAL' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_CAPITALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_INTERESES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_INTERESESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_INTERESES' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_INTERESESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_TOTAL' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_EXPEDIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_EXPEDIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_EXPEDIENTE' de la tabla 'DOCUMENTO_MASIVO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_EXPEDIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_FECHADOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_FECHADOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_FECHADOC' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_FECHADOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_EFIPERDES() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERDESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_EFIPERDES' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERDESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_EFIPERHAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERHASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_EFIPERHAS' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERHASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_PAGOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_PAGOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_PAGOS' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_PAGOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_FECHARAC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_FECHARACColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_FECHARAC' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_FECHARACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_DOCUMENTO() As String
            Get
                Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_DOCUMENTOColumn),String)
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_DOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_ESTADO() As Boolean
            Get
                Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_ESTADOColumn),Boolean)
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_DOCSYSTEM() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_DOCSYSTEMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_DOCSYSTEM' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_DOCSYSTEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_CONMOV() As Integer
            Get
                Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_CONMOVColumn),Integer)
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_CONMOVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MAN_COBRADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_MASIVO.MAN_COBRADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MAN_COBRADOR' de la tabla 'DOCUMENTO_MASIVO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_MASIVO.MAN_COBRADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_DEUSDORNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_DEUSDORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_DEUSDORNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_DEUSDORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_IMPUESTONull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_IMPUESTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_IMPUESTONull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_IMPUESTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_VALORMANDANull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_VALORMANDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_VALORMANDANull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_VALORMANDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_NOMDEUDORNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_NOMDEUDORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_NOMDEUDORNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_NOMDEUDORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_DIRECCIONNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_DIR_ESTABLNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_DIR_ESTABLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_DIR_ESTABLNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_DIR_ESTABLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_REFCATRASTALNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_REFCATRASTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_REFCATRASTALNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_REFCATRASTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_VIGENCIANull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_VIGENCIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_VIGENCIANull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_VIGENCIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_CONCEPTOCDGNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_CONCEPTOCDGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_CONCEPTOCDGNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_CONCEPTOCDGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_ESTRATOCDNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_ESTRATOCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_ESTRATOCDNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_ESTRATOCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_DESTINOCD2Null() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_DESTINOCD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_DESTINOCD2Null()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_DESTINOCD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_BASEGRAVABLENull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_BASEGRAVABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_BASEGRAVABLENull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_BASEGRAVABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_TARIFANull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_TARIFAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_TARIFANull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_TARIFAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_CAPITALNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_CAPITALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_CAPITALNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_CAPITALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_INTERESESNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_INTERESESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_INTERESESNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_INTERESESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_TOTALNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_EXPEDIENTENull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_EXPEDIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_EXPEDIENTENull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_EXPEDIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_FECHADOCNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_FECHADOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_FECHADOCNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_FECHADOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_EFIPERDESNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERDESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_EFIPERDESNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERDESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_EFIPERHASNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERHASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_EFIPERHASNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_EFIPERHASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_PAGOSNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_PAGOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_PAGOSNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_PAGOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_FECHARACNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_FECHARACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_FECHARACNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_FECHARACColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_DOCSYSTEMNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_DOCSYSTEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_DOCSYSTEMNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_DOCSYSTEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMAN_COBRADORNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_MASIVO.MAN_COBRADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMAN_COBRADORNull()
            Me(Me.tableDOCUMENTO_MASIVO.MAN_COBRADORColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class documento_ultimoactoRow
        Inherits Global.System.Data.DataRow
        
        Private tabledocumento_ultimoacto As documento_ultimoactoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledocumento_ultimoacto = CType(Me.Table,documento_ultimoactoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ULT_EXPEDIENTE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumento_ultimoacto.ULT_EXPEDIENTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ULT_EXPEDIENTE' de la tabla 'documento_ultimoacto' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumento_ultimoacto.ULT_EXPEDIENTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ULT_ACTO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumento_ultimoacto.ULT_ACTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ULT_ACTO' de la tabla 'documento_ultimoacto' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumento_ultimoacto.ULT_ACTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ULT_ACTODESCRIP() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumento_ultimoacto.ULT_ACTODESCRIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ULT_ACTODESCRIP' de la tabla 'documento_ultimoacto' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumento_ultimoacto.ULT_ACTODESCRIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ULT_FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledocumento_ultimoacto.ULT_FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ULT_FECHA' de la tabla 'documento_ultimoacto' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumento_ultimoacto.ULT_FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ULT_DEUDOR() As String
            Get
                Try 
                    Return CType(Me(Me.tabledocumento_ultimoacto.ULT_DEUDORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ULT_DEUDOR' de la tabla 'documento_ultimoacto' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledocumento_ultimoacto.ULT_DEUDORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsULT_EXPEDIENTENull() As Boolean
            Return Me.IsNull(Me.tabledocumento_ultimoacto.ULT_EXPEDIENTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetULT_EXPEDIENTENull()
            Me(Me.tabledocumento_ultimoacto.ULT_EXPEDIENTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsULT_ACTONull() As Boolean
            Return Me.IsNull(Me.tabledocumento_ultimoacto.ULT_ACTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetULT_ACTONull()
            Me(Me.tabledocumento_ultimoacto.ULT_ACTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsULT_ACTODESCRIPNull() As Boolean
            Return Me.IsNull(Me.tabledocumento_ultimoacto.ULT_ACTODESCRIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetULT_ACTODESCRIPNull()
            Me(Me.tabledocumento_ultimoacto.ULT_ACTODESCRIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsULT_FECHANull() As Boolean
            Return Me.IsNull(Me.tabledocumento_ultimoacto.ULT_FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetULT_FECHANull()
            Me(Me.tabledocumento_ultimoacto.ULT_FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsULT_DEUDORNull() As Boolean
            Return Me.IsNull(Me.tabledocumento_ultimoacto.ULT_DEUDORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetULT_DEUDORNull()
            Me(Me.tabledocumento_ultimoacto.ULT_DEUDORColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcesoAcumuladoRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcesoAcumulado As ProcesoAcumuladoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcesoAcumulado = CType(Me.Table,ProcesoAcumuladoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docexpediente() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoAcumulado.docexpedienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docexpediente' de la tabla 'ProcesoAcumulado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoAcumulado.docexpedienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecharadic() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoAcumulado.fecharadicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecharadic' de la tabla 'ProcesoAcumulado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoAcumulado.fecharadicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chekPpal() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoAcumulado.chekPpalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'chekPpal' de la tabla 'ProcesoAcumulado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoAcumulado.chekPpalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docpredio_refecatrastal() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoAcumulado.docpredio_refecatrastalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docpredio_refecatrastal' de la tabla 'ProcesoAcumulado' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoAcumulado.docpredio_refecatrastalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocexpedienteNull() As Boolean
            Return Me.IsNull(Me.tableProcesoAcumulado.docexpedienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocexpedienteNull()
            Me(Me.tableProcesoAcumulado.docexpedienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecharadicNull() As Boolean
            Return Me.IsNull(Me.tableProcesoAcumulado.fecharadicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecharadicNull()
            Me(Me.tableProcesoAcumulado.fecharadicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IschekPpalNull() As Boolean
            Return Me.IsNull(Me.tableProcesoAcumulado.chekPpalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetchekPpalNull()
            Me(Me.tableProcesoAcumulado.chekPpalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdocpredio_refecatrastalNull() As Boolean
            Return Me.IsNull(Me.tableProcesoAcumulado.docpredio_refecatrastalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdocpredio_refecatrastalNull()
            Me(Me.tableProcesoAcumulado.docpredio_refecatrastalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcesoAcumuladopredioRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcesoAcumuladopredio As ProcesoAcumuladopredioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcesoAcumuladopredio = CType(Me.Table,ProcesoAcumuladopredioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property docpredio_refecatrastal() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcesoAcumuladopredio.docpredio_refecatrastalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'docpredio_refecatrastal' de la tabla 'ProcesoAcumuladopre"& _ 
                            "dio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcesoAcumuladopredio.docpredio_refecatrastalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdocpredio_refecatrastalNull() As Boolean
            Return Me.IsNull(Me.tableProcesoAcumuladopredio.docpredio_refecatrastalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdocpredio_refecatrastalNull()
            Me(Me.tableProcesoAcumuladopredio.docpredio_refecatrastalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IMAGENRow
        Inherits Global.System.Data.DataRow
        
        Private tableIMAGEN As IMAGENDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIMAGEN = CType(Me.Table,IMAGENDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PICTURE() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIMAGEN.PICTUREColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PICTURE' de la tabla 'IMAGEN' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIMAGEN.PICTUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPICTURENull() As Boolean
            Return Me.IsNull(Me.tableIMAGEN.PICTUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPICTURENull()
            Me(Me.tableIMAGEN.PICTUREColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DOCUMENTO_IMPUESTORow
        Inherits Global.System.Data.DataRow
        
        Private tableDOCUMENTO_IMPUESTO As DOCUMENTO_IMPUESTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDOCUMENTO_IMPUESTO = CType(Me.Table,DOCUMENTO_IMPUESTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_IMPUESTO.IMP_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_NOMBRE' de la tabla 'DOCUMENTO_IMPUESTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_IMPUESTO.IMP_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_VALUES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_IMPUESTO.IMP_VALUESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_VALUES' de la tabla 'DOCUMENTO_IMPUESTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_IMPUESTO.IMP_VALUESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_ENTECOBRADOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_IMPUESTO.IMP_ENTECOBRADORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_ENTECOBRADOR' de la tabla 'DOCUMENTO_IMPUESTO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_IMPUESTO.IMP_ENTECOBRADORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_CAMPOCLAVEID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_IMPUESTO.IMP_CAMPOCLAVEIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_CAMPOCLAVEID' de la tabla 'DOCUMENTO_IMPUESTO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_IMPUESTO.IMP_CAMPOCLAVEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDOCUMENTO_IMPUESTO.IMP_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_ID' de la tabla 'DOCUMENTO_IMPUESTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDOCUMENTO_IMPUESTO.IMP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_IMPUESTO.IMP_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_NOMBRENull()
            Me(Me.tableDOCUMENTO_IMPUESTO.IMP_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_VALUESNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_IMPUESTO.IMP_VALUESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_VALUESNull()
            Me(Me.tableDOCUMENTO_IMPUESTO.IMP_VALUESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ENTECOBRADORNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_IMPUESTO.IMP_ENTECOBRADORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ENTECOBRADORNull()
            Me(Me.tableDOCUMENTO_IMPUESTO.IMP_ENTECOBRADORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_CAMPOCLAVEIDNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_IMPUESTO.IMP_CAMPOCLAVEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_CAMPOCLAVEIDNull()
            Me(Me.tableDOCUMENTO_IMPUESTO.IMP_CAMPOCLAVEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_IDNull() As Boolean
            Return Me.IsNull(Me.tableDOCUMENTO_IMPUESTO.IMP_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_IDNull()
            Me(Me.tableDOCUMENTO_IMPUESTO.IMP_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class usuariosRow
        Inherits Global.System.Data.DataRow
        
        Private tableusuarios As usuariosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableusuarios = CType(Me.Table,usuariosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tableusuarios.codigoColumn),String)
            End Get
            Set
                Me(Me.tableusuarios.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property documento() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.documentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'documento' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.documentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clave() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.claveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'clave' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.claveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nivelacces() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.nivelaccesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nivelacces' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.nivelaccesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cobrador() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.cobradorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cobrador' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.cobradorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apppredial() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.apppredialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'apppredial' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.apppredialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appvehic() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.appvehicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'appvehic' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.appvehicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appcuotasp() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.appcuotaspColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'appcuotasp' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.appcuotaspColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appindycom() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.appindycomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'appindycom' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.appindycomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.loginColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'login' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.loginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conuser() As Integer
            Get
                Return CType(Me(Me.tableusuarios.conuserColumn),Integer)
            End Get
            Set
                Me(Me.tableusuarios.conuserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property useractivo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.useractivoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'useractivo' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.useractivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property useremail() As String
            Get
                Try 
                    Return CType(Me(Me.tableusuarios.useremailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'useremail' de la tabla 'usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableusuarios.useremailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usercamclave() As Boolean
            Get
                Return CType(Me(Me.tableusuarios.usercamclaveColumn),Boolean)
            End Get
            Set
                Me(Me.tableusuarios.usercamclaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableusuarios.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocumentoNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.documentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocumentoNull()
            Me(Me.tableusuarios.documentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclaveNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.claveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclaveNull()
            Me(Me.tableusuarios.claveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnivelaccesNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.nivelaccesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnivelaccesNull()
            Me(Me.tableusuarios.nivelaccesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscobradorNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.cobradorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcobradorNull()
            Me(Me.tableusuarios.cobradorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsapppredialNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.apppredialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetapppredialNull()
            Me(Me.tableusuarios.apppredialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsappvehicNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.appvehicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetappvehicNull()
            Me(Me.tableusuarios.appvehicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsappcuotaspNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.appcuotaspColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetappcuotaspNull()
            Me(Me.tableusuarios.appcuotaspColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsappindycomNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.appindycomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetappindycomNull()
            Me(Me.tableusuarios.appindycomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsloginNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.loginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetloginNull()
            Me(Me.tableusuarios.loginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuseractivoNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.useractivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuseractivoNull()
            Me(Me.tableusuarios.useractivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuseremailNull() As Boolean
            Return Me.IsNull(Me.tableusuarios.useremailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuseremailNull()
            Me(Me.tableusuarios.useremailColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACTOS_ADMINISTRATIVOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableACTOS_ADMINISTRATIVOS As ACTOS_ADMINISTRATIVOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACTOS_ADMINISTRATIVOS = CType(Me.Table,ACTOS_ADMINISTRATIVOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableACTOS_ADMINISTRATIVOS.CODIGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODIGO' de la tabla 'ACTOS_ADMINISTRATIVOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACTOS_ADMINISTRATIVOS.CODIGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACTOS_ADMINISTRATIVOS.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBRE' de la tabla 'ACTOS_ADMINISTRATIVOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACTOS_ADMINISTRATIVOS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDETAPA() As String
            Get
                Try 
                    Return CType(Me(Me.tableACTOS_ADMINISTRATIVOS.IDETAPAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IDETAPA' de la tabla 'ACTOS_ADMINISTRATIVOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACTOS_ADMINISTRATIVOS.IDETAPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBREETAPA() As String
            Get
                Try 
                    Return CType(Me(Me.tableACTOS_ADMINISTRATIVOS.NOMBREETAPAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NOMBREETAPA' de la tabla 'ACTOS_ADMINISTRATIVOS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableACTOS_ADMINISTRATIVOS.NOMBREETAPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGONull() As Boolean
            Return Me.IsNull(Me.tableACTOS_ADMINISTRATIVOS.CODIGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGONull()
            Me(Me.tableACTOS_ADMINISTRATIVOS.CODIGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tableACTOS_ADMINISTRATIVOS.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tableACTOS_ADMINISTRATIVOS.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDETAPANull() As Boolean
            Return Me.IsNull(Me.tableACTOS_ADMINISTRATIVOS.IDETAPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDETAPANull()
            Me(Me.tableACTOS_ADMINISTRATIVOS.IDETAPAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBREETAPANull() As Boolean
            Return Me.IsNull(Me.tableACTOS_ADMINISTRATIVOS.NOMBREETAPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBREETAPANull()
            Me(Me.tableACTOS_ADMINISTRATIVOS.NOMBREETAPAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NROPREDIOXDEUDORRow
        Inherits Global.System.Data.DataRow
        
        Private tableNROPREDIOXDEUDOR As NROPREDIOXDEUDORDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNROPREDIOXDEUDOR = CType(Me.Table,NROPREDIOXDEUDORDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EDC_NITCC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNROPREDIOXDEUDOR.EDC_NITCCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EDC_NITCC' de la tabla 'NROPREDIOXDEUDOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNROPREDIOXDEUDOR.EDC_NITCCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EDC_NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNROPREDIOXDEUDOR.EDC_NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EDC_NOMBRE' de la tabla 'NROPREDIOXDEUDOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNROPREDIOXDEUDOR.EDC_NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EDC_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNROPREDIOXDEUDOR.EDC_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EDC_ID' de la tabla 'NROPREDIOXDEUDOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNROPREDIOXDEUDOR.EDC_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EDC_DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableNROPREDIOXDEUDOR.EDC_DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EDC_DIRECCION' de la tabla 'NROPREDIOXDEUDOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNROPREDIOXDEUDOR.EDC_DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EDC_ESTRATO() As String
            Get
                Try 
                    Return CType(Me(Me.tableNROPREDIOXDEUDOR.EDC_ESTRATOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EDC_ESTRATO' de la tabla 'NROPREDIOXDEUDOR' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNROPREDIOXDEUDOR.EDC_ESTRATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEDC_NITCCNull() As Boolean
            Return Me.IsNull(Me.tableNROPREDIOXDEUDOR.EDC_NITCCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEDC_NITCCNull()
            Me(Me.tableNROPREDIOXDEUDOR.EDC_NITCCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEDC_NOMBRENull() As Boolean
            Return Me.IsNull(Me.tableNROPREDIOXDEUDOR.EDC_NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEDC_NOMBRENull()
            Me(Me.tableNROPREDIOXDEUDOR.EDC_NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEDC_IDNull() As Boolean
            Return Me.IsNull(Me.tableNROPREDIOXDEUDOR.EDC_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEDC_IDNull()
            Me(Me.tableNROPREDIOXDEUDOR.EDC_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEDC_DIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableNROPREDIOXDEUDOR.EDC_DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEDC_DIRECCIONNull()
            Me(Me.tableNROPREDIOXDEUDOR.EDC_DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEDC_ESTRATONull() As Boolean
            Return Me.IsNull(Me.tableNROPREDIOXDEUDOR.EDC_ESTRATOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEDC_ESTRATONull()
            Me(Me.tableNROPREDIOXDEUDOR.EDC_ESTRATOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class gridUsuariosRow
        Inherits Global.System.Data.DataRow
        
        Private tablegridUsuarios As gridUsuariosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegridUsuarios = CType(Me.Table,gridUsuariosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo() As String
            Get
                Return CType(Me(Me.tablegridUsuarios.codigoColumn),String)
            End Get
            Set
                Me(Me.tablegridUsuarios.codigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property documento() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.documentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'documento' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.documentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.claveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'clave' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.claveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nivelacces() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.nivelaccesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nivelacces' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.nivelaccesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cobrador() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.cobradorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cobrador' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.cobradorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apppredial() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.apppredialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'apppredial' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.apppredialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appvehic() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.appvehicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'appvehic' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.appvehicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appcuotasp() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.appcuotaspColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'appcuotasp' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.appcuotaspColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appindycom() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.appindycomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'appindycom' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.appindycomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.loginColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'login' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.loginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conuser() As Integer
            Get
                Return CType(Me(Me.tablegridUsuarios.conuserColumn),Integer)
            End Get
            Set
                Me(Me.tablegridUsuarios.conuserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property useractivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.useractivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'useractivo' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.useractivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property useremail() As String
            Get
                Try 
                    Return CType(Me(Me.tablegridUsuarios.useremailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'useremail' de la tabla 'gridUsuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegridUsuarios.useremailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usercamclave() As Boolean
            Get
                Return CType(Me(Me.tablegridUsuarios.usercamclaveColumn),Boolean)
            End Get
            Set
                Me(Me.tablegridUsuarios.usercamclaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tablegridUsuarios.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdocumentoNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.documentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdocumentoNull()
            Me(Me.tablegridUsuarios.documentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclaveNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.claveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclaveNull()
            Me(Me.tablegridUsuarios.claveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnivelaccesNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.nivelaccesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnivelaccesNull()
            Me(Me.tablegridUsuarios.nivelaccesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscobradorNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.cobradorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcobradorNull()
            Me(Me.tablegridUsuarios.cobradorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsapppredialNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.apppredialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetapppredialNull()
            Me(Me.tablegridUsuarios.apppredialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsappvehicNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.appvehicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetappvehicNull()
            Me(Me.tablegridUsuarios.appvehicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsappcuotaspNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.appcuotaspColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetappcuotaspNull()
            Me(Me.tablegridUsuarios.appcuotaspColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsappindycomNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.appindycomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetappindycomNull()
            Me(Me.tablegridUsuarios.appindycomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsloginNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.loginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetloginNull()
            Me(Me.tablegridUsuarios.loginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuseractivoNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.useractivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuseractivoNull()
            Me(Me.tablegridUsuarios.useractivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuseremailNull() As Boolean
            Return Me.IsNull(Me.tablegridUsuarios.useremailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuseremailNull()
            Me(Me.tablegridUsuarios.useremailColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MAESTRO_BANCOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAESTRO_BANCOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MAESTRO_BANCOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MAESTRO_BANCOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class abogadosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As abogadosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As abogadosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As abogadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class documentosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As documentosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As documentosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As documentosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class etapasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As etapasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As etapasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As etapasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class etapa_actoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As etapa_actoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As etapa_actoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As etapa_actoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class USUARIO_PPALMENURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As USUARIO_PPALMENURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As USUARIO_PPALMENURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As USUARIO_PPALMENURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PROPIETARIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROPIETARIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PROPIETARIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PROPIETARIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TDIAS_FESTIVOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TDIAS_FESTIVOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TDIAS_FESTIVOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TDIAS_FESTIVOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TDIAS_FESTIVOS_formRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TDIAS_FESTIVOS_formRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TDIAS_FESTIVOS_formRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TDIAS_FESTIVOS_formRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcesoExpedienteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcesoExpedienteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcesoExpedienteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcesoExpedienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DEPENDENCIA_ACTUACIONESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DEPENDENCIA_ACTUACIONESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DEPENDENCIA_ACTUACIONESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DEPENDENCIA_ACTUACIONESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CAT_CLIENTESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CAT_CLIENTESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CAT_CLIENTESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CAT_CLIENTESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParetoConsolidadoDeudaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ParetoConsolidadoDeudaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParetoConsolidadoDeudaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParetoConsolidadoDeudaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class entescobradoresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As entescobradoresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As entescobradoresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As entescobradoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class entesdbfRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As entesdbfRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As entesdbfRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As entesdbfRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class actuacionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As actuacionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As actuacionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As actuacionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DOCUMENTO_MASIVO_HEADRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DOCUMENTO_MASIVO_HEADRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DOCUMENTO_MASIVO_HEADRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DOCUMENTO_MASIVO_HEADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DOCUMENTO_MASIVORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DOCUMENTO_MASIVORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DOCUMENTO_MASIVORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DOCUMENTO_MASIVORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class documento_ultimoactoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As documento_ultimoactoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As documento_ultimoactoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As documento_ultimoactoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcesoAcumuladoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcesoAcumuladoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcesoAcumuladoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcesoAcumuladoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcesoAcumuladopredioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcesoAcumuladopredioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcesoAcumuladopredioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcesoAcumuladopredioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IMAGENRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IMAGENRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IMAGENRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IMAGENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DOCUMENTO_IMPUESTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DOCUMENTO_IMPUESTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DOCUMENTO_IMPUESTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DOCUMENTO_IMPUESTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class usuariosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As usuariosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As usuariosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As usuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACTOS_ADMINISTRATIVOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACTOS_ADMINISTRATIVOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACTOS_ADMINISTRATIVOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACTOS_ADMINISTRATIVOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NROPREDIOXDEUDORRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NROPREDIOXDEUDORRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NROPREDIOXDEUDORRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NROPREDIOXDEUDORRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class gridUsuariosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As gridUsuariosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As gridUsuariosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As gridUsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DatasetFormTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAESTRO_BANCOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAESTRO_BANCOS"
            tableMapping.ColumnMappings.Add("BAN_CODIGO", "BAN_CODIGO")
            tableMapping.ColumnMappings.Add("BAN_NOMBRE", "BAN_NOMBRE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MAESTRO_BANCOS] WHERE (([BAN_CODIGO] = @Original_BAN_CODIGO) A"& _ 
                "ND ((@IsNull_BAN_NOMBRE = 1 AND [BAN_NOMBRE] IS NULL) OR ([BAN_NOMBRE] = @Origin"& _ 
                "al_BAN_NOMBRE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAN_CODIGO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BAN_NOMBRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_NOMBRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAN_NOMBRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MAESTRO_BANCOS] ([BAN_CODIGO], [BAN_NOMBRE]) VALUES (@BAN_CODI"& _ 
                "GO, @BAN_NOMBRE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT BAN_CODIGO, BAN_NOMBRE FROM MAESTRO_BANCOS WHERE (BAN_"& _ 
                "CODIGO = @BAN_CODIGO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAN_CODIGO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAN_NOMBRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MAESTRO_BANCOS] SET [BAN_CODIGO] = @BAN_CODIGO, [BAN_NOMBRE] = @BAN"& _ 
                "_NOMBRE WHERE (([BAN_CODIGO] = @Original_BAN_CODIGO) AND ((@IsNull_BAN_NOMBRE = "& _ 
                "1 AND [BAN_NOMBRE] IS NULL) OR ([BAN_NOMBRE] = @Original_BAN_NOMBRE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "BAN_CODIGO, BAN_NOMBRE FROM MAESTRO_BANCOS WHERE (BAN_CODIGO = @BAN_CODIGO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAN_CODIGO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_CODIGO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BAN_NOMBRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAN_CODIGO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_CODIGO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BAN_NOMBRE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_NOMBRE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BAN_NOMBRE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BAN_NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Funciones.CadenaConexion
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT BAN_CODIGO, BAN_NOMBRE FROM dbo.MAESTRO_BANCOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DatasetForm.MAESTRO_BANCOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As DatasetForm.MAESTRO_BANCOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DatasetForm.MAESTRO_BANCOSDataTable = New DatasetForm.MAESTRO_BANCOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DatasetForm.MAESTRO_BANCOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DatasetForm) As Integer
            Return Me.Adapter.Update(dataSet, "MAESTRO_BANCOS")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_BAN_CODIGO As String, ByVal Original_BAN_NOMBRE As String) As Integer
            If (Original_BAN_CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BAN_CODIGO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_BAN_CODIGO, String)
            End If
            If (Original_BAN_NOMBRE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_BAN_NOMBRE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal BAN_CODIGO As String, ByVal BAN_NOMBRE As String) As Integer
            If (BAN_CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BAN_CODIGO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(BAN_CODIGO, String)
            End If
            If (BAN_NOMBRE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(BAN_NOMBRE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal BAN_CODIGO As String, ByVal BAN_NOMBRE As String, ByVal Original_BAN_CODIGO As String, ByVal Original_BAN_NOMBRE As String) As Integer
            If (BAN_CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("BAN_CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(BAN_CODIGO, String)
            End If
            If (BAN_NOMBRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(BAN_NOMBRE, String)
            End If
            If (Original_BAN_CODIGO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_BAN_CODIGO")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_BAN_CODIGO, String)
            End If
            If (Original_BAN_NOMBRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_BAN_NOMBRE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal BAN_NOMBRE As String, ByVal Original_BAN_CODIGO As String, ByVal Original_BAN_NOMBRE As String) As Integer
            Return Me.Update(Original_BAN_CODIGO, BAN_NOMBRE, Original_BAN_CODIGO, Original_BAN_NOMBRE)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class abogadosTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = Value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "abogados"
            tableMapping.ColumnMappings.Add("cedula", "cedula")
            tableMapping.ColumnMappings.Add("nombres", "nombres")
            tableMapping.ColumnMappings.Add("apellidos", "apellidos")
            tableMapping.ColumnMappings.Add("tarjetapro", "tarjetapro")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[abogados] WHERE (([cedula] = @Original_cedula))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cedula", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cedula", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[abogados] ([cedula], [nombres], [apellidos], [tarjetapro]) VAL" & _
                "UES (@cedula, @nombres, @apellidos, @tarjetapro)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cedula", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cedula", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nombres", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nombres", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@apellidos", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "apellidos", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tarjetapro", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tarjetapro", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[abogados] SET [cedula] = @cedula, [nombres] = @nombres, [apellidos]" & _
                " = @apellidos, [tarjetapro] = @tarjetapro WHERE (([cedula] = @Original_cedula))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cedula", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cedula", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nombres", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nombres", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@apellidos", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "apellidos", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tarjetapro", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tarjetapro", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cedula", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cedula", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Funciones.CadenaConexion
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cedula, nombres, apellidos, tarjetapro FROM dbo.abogados"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DatasetForm.abogadosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As DatasetForm.abogadosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DatasetForm.abogadosDataTable = New DatasetForm.abogadosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DatasetForm.abogadosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DatasetForm) As Integer
            Return Me.Adapter.Update(dataSet, "abogados")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_cedula As String) As Integer
            If (Original_cedula Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cedula")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cedula, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal cedula As String, ByVal nombres As String, ByVal apellidos As String, ByVal tarjetapro As String) As Integer
            If (cedula Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cedula")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(cedula, String)
            End If
            If (nombres Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nombres")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombres, String)
            End If
            If (apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("apellidos")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(apellidos, String)
            End If
            If (tarjetapro Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(tarjetapro, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal cedula As String, ByVal nombres As String, ByVal apellidos As String, ByVal tarjetapro As String, ByVal Original_cedula As String) As Integer
            If (cedula Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cedula")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cedula, String)
            End If
            If (nombres Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nombres")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombres, String)
            End If
            If (apellidos Is Nothing) Then
                Throw New Global.System.ArgumentNullException("apellidos")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(apellidos, String)
            End If
            If (tarjetapro Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tarjetapro, String)
            End If
            If (Original_cedula Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cedula")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_cedula, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal nombres As String, ByVal apellidos As String, ByVal tarjetapro As String, ByVal Original_cedula As String) As Integer
            Return Me.Update(Original_cedula, nombres, apellidos, tarjetapro, Original_cedula)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class documentosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "documentos"
            tableMapping.ColumnMappings.Add("entidad", "entidad")
            tableMapping.ColumnMappings.Add("idacto", "idacto")
            tableMapping.ColumnMappings.Add("ruta", "ruta")
            tableMapping.ColumnMappings.Add("nomarchivo", "nomarchivo")
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("paginas", "paginas")
            tableMapping.ColumnMappings.Add("fecharadic", "fecharadic")
            tableMapping.ColumnMappings.Add("cobrador", "cobrador")
            tableMapping.ColumnMappings.Add("docexpediente", "docexpediente")
            tableMapping.ColumnMappings.Add("docproceso", "docproceso")
            tableMapping.ColumnMappings.Add("docpredio_refecatrastal", "docpredio_refecatrastal")
            tableMapping.ColumnMappings.Add("docacumulacio", "docacumulacio")
            tableMapping.ColumnMappings.Add("docfechadoc", "docfechadoc")
            tableMapping.ColumnMappings.Add("docObservaciones", "docObservaciones")
            tableMapping.ColumnMappings.Add("docanular", "docanular")
            tableMapping.ColumnMappings.Add("docusuario", "docusuario")
            tableMapping.ColumnMappings.Add("docfechasystem", "docfechasystem")
            tableMapping.ColumnMappings.Add("docActivotributario", "docActivotributario")
            tableMapping.ColumnMappings.Add("docimpuesto", "docimpuesto")
            tableMapping.ColumnMappings.Add("docResolucion", "docResolucion")
            tableMapping.ColumnMappings.Add("docActoPre", "docActoPre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[documentos] WHERE (([id] = @Original_id))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[documentos] ([entidad], [idacto], [ruta], [nomarchivo], [pagin"& _ 
                "as], [fecharadic], [cobrador], [docexpediente], [docproceso], [docpredio_refecat"& _ 
                "rastal], [docacumulacio], [docfechadoc], [docObservaciones], [docanular], [docus"& _ 
                "uario], [docfechasystem], [docActivotributario], [docimpuesto], [docResolucion],"& _ 
                " [docActoPre]) VALUES (@entidad, @idacto, @ruta, @nomarchivo, @paginas, @fechara"& _ 
                "dic, @cobrador, @docexpediente, @docproceso, @docpredio_refecatrastal, @docacumu"& _ 
                "lacio, @docfechadoc, @docObservaciones, @docanular, @docusuario, @docfechasystem"& _ 
                ", @docActivotributario, @docimpuesto, @docResolucion, @docActoPre)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entidad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entidad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idacto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idacto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ruta", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ruta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomarchivo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomarchivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@paginas", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "paginas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecharadic", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecharadic", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cobrador", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cobrador", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docexpediente", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docexpediente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docproceso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docproceso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docpredio_refecatrastal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docpredio_refecatrastal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docacumulacio", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docacumulacio", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docfechadoc", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docfechadoc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docObservaciones", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docObservaciones", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docanular", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docanular", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docusuario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docusuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docfechasystem", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docfechasystem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docActivotributario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docActivotributario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docimpuesto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docimpuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docResolucion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docResolucion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docActoPre", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docActoPre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[documentos] SET [entidad] = @entidad, [idacto] = @idacto, [ruta] = "& _ 
                "@ruta, [nomarchivo] = @nomarchivo, [paginas] = @paginas, [fecharadic] = @fechara"& _ 
                "dic, [cobrador] = @cobrador, [docexpediente] = @docexpediente, [docproceso] = @d"& _ 
                "ocproceso, [docpredio_refecatrastal] = @docpredio_refecatrastal, [docacumulacio]"& _ 
                " = @docacumulacio, [docfechadoc] = @docfechadoc, [docObservaciones] = @docObserv"& _ 
                "aciones, [docanular] = @docanular, [docusuario] = @docusuario, [docfechasystem] "& _ 
                "= @docfechasystem, [docActivotributario] = @docActivotributario, [docimpuesto] ="& _ 
                " @docimpuesto, [docResolucion] = @docResolucion, [docActoPre] = @docActoPre WHER"& _ 
                "E (([id] = @Original_id))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entidad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entidad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idacto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idacto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ruta", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ruta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nomarchivo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nomarchivo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@paginas", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "paginas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecharadic", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecharadic", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cobrador", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cobrador", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docexpediente", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docexpediente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docproceso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docproceso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docpredio_refecatrastal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docpredio_refecatrastal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docacumulacio", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docacumulacio", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docfechadoc", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docfechadoc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docObservaciones", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docObservaciones", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docanular", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docanular", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docusuario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docusuario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docfechasystem", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docfechasystem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docActivotributario", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docActivotributario", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docimpuesto", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docimpuesto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docResolucion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docResolucion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docActoPre", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "docActoPre", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 0, "id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Funciones.CadenaConexion
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT entidad, idacto, ruta, nomarchivo, id, paginas, fecharadic, cobrador, doce"& _ 
                "xpediente, docproceso, docpredio_refecatrastal, docacumulacio, docfechadoc, docO"& _ 
                "bservaciones, docanular, docusuario, docfechasystem, docActivotributario, docimp"& _ 
                "uesto, docResolucion, docActoPre FROM dbo.documentos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT entidad, idacto, ruta, nomarchivo, id, paginas, fecharadic, cobrador, doce"& _ 
                "xpediente, docproceso, docpredio_refecatrastal, docacumulacio, docfechadoc, docO"& _ 
                "bservaciones, docanular, docusuario, docfechasystem, docActivotributario, docimp"& _ 
                "uesto, docResolucion, docActoPre FROM dbo.documentos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where docexpediente = @doc"& _ 
                "expediente"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docexpediente", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "docexpediente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT entidad, idacto, ruta, nomarchivo, id, paginas, fecharadic, cobrador, doce"& _ 
                "xpediente, docproceso, docpredio_refecatrastal, docacumulacio, docfechadoc, docO"& _ 
                "bservaciones, docanular, docusuario, docfechasystem, docActivotributario, docimp"& _ 
                "uesto, docResolucion, docActoPre FROM dbo.documentos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where  docexpediente = @do"& _ 
                "cexpediente and idacto = @idacto "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@docexpediente", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "docexpediente", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idacto", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "idacto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DatasetForm.documentosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DatasetForm.documentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DatasetForm.documentosDataTable = New DatasetForm.documentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy_docexpediente(ByVal dataTable As DatasetForm.documentosDataTable, ByVal docexpediente As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (docexpediente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(docexpediente,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy_docexpediente(ByVal docexpediente As String) As DatasetForm.documentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (docexpediente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(docexpediente,String)
            End If
            Dim dataTable As DatasetForm.documentosDataTable = New DatasetForm.documentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy_docexpediente_digi(ByVal dataTable As DatasetForm.documentosDataTable, ByVal docexpediente As String, ByVal idacto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (docexpediente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(docexpediente,String)
            End If
            If (idacto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idacto")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(idacto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy_docexpediente_digi(ByVal docexpediente As String, ByVal idacto As String) As DatasetForm.documentosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (docexpediente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(docexpediente,String)
            End If
            If (idacto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idacto")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(idacto,String)
            End If
            Dim dataTable As DatasetForm.documentosDataTable = New DatasetForm.documentosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DatasetForm.documentosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DatasetForm) As Integer
            Return Me.Adapter.Update(dataSet, "documentos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal entidad As String,  _
                    ByVal idacto As String,  _
                    ByVal ruta As String,  _
                    ByVal nomarchivo As String,  _
                    ByVal paginas As Decimal,  _
                    ByVal fecharadic As Global.System.Nullable(Of Date),  _
                    ByVal cobrador As String,  _
                    ByVal docexpediente As String,  _
                    ByVal docproceso As String,  _
                    ByVal docpredio_refecatrastal As String,  _
                    ByVal docacumulacio As String,  _
                    ByVal docfechadoc As Global.System.Nullable(Of Date),  _
                    ByVal docObservaciones As String,  _
                    ByVal docanular As Global.System.Nullable(Of Boolean),  _
                    ByVal docusuario As String,  _
                    ByVal docfechasystem As Global.System.Nullable(Of Date),  _
                    ByVal docActivotributario As String,  _
                    ByVal docimpuesto As Global.System.Nullable(Of Integer),  _
                    ByVal docResolucion As String,  _
                    ByVal docActoPre As String) As Integer
            If (entidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entidad")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(entidad,String)
            End If
            If (idacto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idacto")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(idacto,String)
            End If
            If (ruta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ruta")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ruta,String)
            End If
            If (nomarchivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomarchivo")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(nomarchivo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(paginas,Decimal)
            If (fecharadic.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(fecharadic.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (cobrador Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(cobrador,String)
            End If
            If (docexpediente Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(docexpediente,String)
            End If
            If (docproceso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(docproceso,String)
            End If
            If (docpredio_refecatrastal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(docpredio_refecatrastal,String)
            End If
            If (docacumulacio Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(docacumulacio,String)
            End If
            If (docfechadoc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(docfechadoc.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (docObservaciones Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(docObservaciones,String)
            End If
            If (docanular.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(docanular.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (docusuario Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(docusuario,String)
            End If
            If (docfechasystem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(docfechasystem.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (docActivotributario Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(docActivotributario,String)
            End If
            If (docimpuesto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(docimpuesto.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (docResolucion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(docResolucion,String)
            End If
            If (docActoPre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(docActoPre,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal entidad As String,  _
                    ByVal idacto As String,  _
                    ByVal ruta As String,  _
                    ByVal nomarchivo As String,  _
                    ByVal paginas As Decimal,  _
                    ByVal fecharadic As Global.System.Nullable(Of Date),  _
                    ByVal cobrador As String,  _
                    ByVal docexpediente As String,  _
                    ByVal docproceso As String,  _
                    ByVal docpredio_refecatrastal As String,  _
                    ByVal docacumulacio As String,  _
                    ByVal docfechadoc As Global.System.Nullable(Of Date),  _
                    ByVal docObservaciones As String,  _
                    ByVal docanular As Global.System.Nullable(Of Boolean),  _
                    ByVal docusuario As String,  _
                    ByVal docfechasystem As Global.System.Nullable(Of Date),  _
                    ByVal docActivotributario As String,  _
                    ByVal docimpuesto As Global.System.Nullable(Of Integer),  _
                    ByVal docResolucion As String,  _
                    ByVal docActoPre As String,  _
                    ByVal Original_id As Decimal) As Integer
            If (entidad Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entidad")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(entidad,String)
            End If
            If (idacto Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idacto")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(idacto,String)
            End If
            If (ruta Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ruta")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ruta,String)
            End If
            If (nomarchivo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nomarchivo")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(nomarchivo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(paginas,Decimal)
            If (fecharadic.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(fecharadic.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (cobrador Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cobrador,String)
            End If
            If (docexpediente Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(docexpediente,String)
            End If
            If (docproceso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(docproceso,String)
            End If
            If (docpredio_refecatrastal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(docpredio_refecatrastal,String)
            End If
            If (docacumulacio Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(docacumulacio,String)
            End If
            If (docfechadoc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(docfechadoc.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (docObservaciones Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(docObservaciones,String)
            End If
            If (docanular.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(docanular.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (docusuario Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(docusuario,String)
            End If
            If (docfechasystem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(docfechasystem.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (docActivotributario Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(docActivotributario,String)
            End If
            If (docimpuesto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(docimpuesto.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (docResolucion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(docResolucion,String)
            End If
            If (docActoPre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(docActoPre,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_id,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _mAESTRO_BANCOSTableAdapter As MAESTRO_BANCOSTableAdapter
        
        Private _abogadosTableAdapter As abogadosTableAdapter
        
        Private _documentosTableAdapter As documentosTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAESTRO_BANCOSTableAdapter() As MAESTRO_BANCOSTableAdapter
            Get
                Return Me._mAESTRO_BANCOSTableAdapter
            End Get
            Set
                Me._mAESTRO_BANCOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property abogadosTableAdapter() As abogadosTableAdapter
            Get
                Return Me._abogadosTableAdapter
            End Get
            Set
                Me._abogadosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property documentosTableAdapter() As documentosTableAdapter
            Get
                Return Me._documentosTableAdapter
            End Get
            Set
                Me._documentosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAESTRO_BANCOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAESTRO_BANCOSTableAdapter.Connection
                End If
                If ((Not (Me._abogadosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._abogadosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._abogadosTableAdapter.Connection
                End If
                If ((Not (Me._documentosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._documentosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._documentosTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._abogadosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._documentosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DatasetForm, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._documentosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.documentos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._documentosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAESTRO_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAESTRO_BANCOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._abogadosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.abogados.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._abogadosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DatasetForm, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._documentosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.documentos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._documentosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAESTRO_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAESTRO_BANCOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._abogadosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.abogados.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._abogadosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DatasetForm, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._abogadosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.abogados.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._abogadosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAESTRO_BANCOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAESTRO_BANCOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._documentosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.documentos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._documentosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DatasetForm) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAESTRO_BANCOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._abogadosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._abogadosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._documentosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._documentosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAESTRO_BANCOSTableAdapter, Me._mAESTRO_BANCOSTableAdapter.Connection)
                    Me._mAESTRO_BANCOSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mAESTRO_BANCOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mAESTRO_BANCOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAESTRO_BANCOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAESTRO_BANCOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._abogadosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._abogadosTableAdapter, Me._abogadosTableAdapter.Connection)
                    Me._abogadosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._abogadosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._abogadosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._abogadosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._abogadosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._documentosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._documentosTableAdapter, Me._documentosTableAdapter.Connection)
                    Me._documentosTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._documentosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._documentosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._documentosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._documentosTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._mAESTRO_BANCOSTableAdapter) Is Nothing) Then
                    Me._mAESTRO_BANCOSTableAdapter.Connection = CType(revertConnections(Me._mAESTRO_BANCOSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mAESTRO_BANCOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._abogadosTableAdapter) Is Nothing) Then
                    Me._abogadosTableAdapter.Connection = CType(revertConnections(Me._abogadosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._abogadosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._documentosTableAdapter) Is Nothing) Then
                    Me._documentosTableAdapter.Connection = CType(revertConnections(Me._documentosTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._documentosTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
