'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5420
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsEstadoCuenta"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsEstadoCuenta
    Inherits Global.System.Data.DataSet
    
    Private tableEstadoCuentaMix As EstadoCuentaMixDataTable
    
    Private tableDetalleProceso As DetalleProcesoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EstadoCuentaMix")) Is Nothing) Then
                MyBase.Tables.Add(New EstadoCuentaMixDataTable(ds.Tables("EstadoCuentaMix")))
            End If
            If (Not (ds.Tables("DetalleProceso")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleProcesoDataTable(ds.Tables("DetalleProceso")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EstadoCuentaMix() As EstadoCuentaMixDataTable
        Get
            Return Me.tableEstadoCuentaMix
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetalleProceso() As DetalleProcesoDataTable
        Get
            Return Me.tableDetalleProceso
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsEstadoCuenta = CType(MyBase.Clone,dsEstadoCuenta)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("EstadoCuentaMix")) Is Nothing) Then
                MyBase.Tables.Add(New EstadoCuentaMixDataTable(ds.Tables("EstadoCuentaMix")))
            End If
            If (Not (ds.Tables("DetalleProceso")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleProcesoDataTable(ds.Tables("DetalleProceso")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEstadoCuentaMix = CType(MyBase.Tables("EstadoCuentaMix"),EstadoCuentaMixDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEstadoCuentaMix) Is Nothing) Then
                Me.tableEstadoCuentaMix.InitVars
            End If
        End If
        Me.tableDetalleProceso = CType(MyBase.Tables("DetalleProceso"),DetalleProcesoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleProceso) Is Nothing) Then
                Me.tableDetalleProceso.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsEstadoCuenta"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsEstadoCuenta.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEstadoCuentaMix = New EstadoCuentaMixDataTable
        MyBase.Tables.Add(Me.tableEstadoCuentaMix)
        Me.tableDetalleProceso = New DetalleProcesoDataTable
        MyBase.Tables.Add(Me.tableDetalleProceso)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEstadoCuentaMix() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleProceso() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsEstadoCuenta = New dsEstadoCuenta
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub EstadoCuentaMixRowChangeEventHandler(ByVal sender As Object, ByVal e As EstadoCuentaMixRowChangeEvent)
    
    Public Delegate Sub DetalleProcesoRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleProcesoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EstadoCuentaMixDataTable
        Inherits Global.System.Data.TypedTableBase(Of EstadoCuentaMixRow)
        
        Private columnPreNum As Global.System.Data.DataColumn
        
        Private columnPreMatInm As Global.System.Data.DataColumn
        
        Private columnPreCod As Global.System.Data.DataColumn
        
        Private columnPreDir As Global.System.Data.DataColumn
        
        Private columnPreDirCob As Global.System.Data.DataColumn
        
        Private columnPreEstMun2 As Global.System.Data.DataColumn
        
        Private columnPreEstVal As Global.System.Data.DataColumn
        
        Private columnPreMult As Global.System.Data.DataColumn
        
        Private columnPreLegMun As Global.System.Data.DataColumn
        
        Private columnPreRecUltP As Global.System.Data.DataColumn
        
        Private columnPreFecUltP As Global.System.Data.DataColumn
        
        Private columnPreValUltP As Global.System.Data.DataColumn
        
        Private columnPrePerDes As Global.System.Data.DataColumn
        
        Private columnPrePrsDoc As Global.System.Data.DataColumn
        
        Private columnPrePrsNom As Global.System.Data.DataColumn
        
        Private columnUltresol As Global.System.Data.DataColumn
        
        Private columnchequesDev As Global.System.Data.DataColumn
        
        Private columnNroExp As Global.System.Data.DataColumn
        
        Private columnUltunidad As Global.System.Data.DataColumn
        
        Private columnUltexpediente As Global.System.Data.DataColumn
        
        Private columnUltresolucion As Global.System.Data.DataColumn
        
        Private columnremanente As Global.System.Data.DataColumn
        
        Private columnPreSubDes As Global.System.Data.DataColumn
        
        Private columnPrePerCan As Global.System.Data.DataColumn
        
        Private columnPreSubCan As Global.System.Data.DataColumn
        
        Private columnperiodo As Global.System.Data.DataColumn
        
        Private columnavaluo As Global.System.Data.DataColumn
        
        Private columndest1 As Global.System.Data.DataColumn
        
        Private columndest2 As Global.System.Data.DataColumn
        
        Private columnidEstrato As Global.System.Data.DataColumn
        
        Private columnNomEstrato As Global.System.Data.DataColumn
        
        Private columnidUbic As Global.System.Data.DataColumn
        
        Private columnNomUbicacion As Global.System.Data.DataColumn
        
        Private columnidTipo As Global.System.Data.DataColumn
        
        Private columnNomTipo As Global.System.Data.DataColumn
        
        Private columnAterreno As Global.System.Data.DataColumn
        
        Private columnAConstruida As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EstadoCuentaMix"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreMatInmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreMatInm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreCodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreCod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreDirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreDir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreDirCobColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreDirCob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreEstMun2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreEstMun2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreEstValColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreEstVal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreMultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreMult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreLegMunColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreLegMun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreRecUltPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreRecUltP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreFecUltPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreFecUltP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreValUltPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreValUltP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePerDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePerDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePrsNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePrsNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltresolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltresol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chequesDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchequesDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroExpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroExp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltunidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltexpedienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltexpediente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UltresolucionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUltresolucion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remanenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremanente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreSubDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreSubDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrePerCanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrePerCan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreSubCanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreSubCan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property periodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnperiodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property avaluoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavaluo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dest1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndest1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dest2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndest2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idEstratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidEstrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomEstratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomEstrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idUbicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidUbic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomUbicacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomUbicacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idTipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NomTipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNomTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AterrenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAterreno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AConstruidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAConstruida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EstadoCuentaMixRow
            Get
                Return CType(Me.Rows(index),EstadoCuentaMixRow)
            End Get
        End Property
        
        Public Event EstadoCuentaMixRowChanging As EstadoCuentaMixRowChangeEventHandler
        
        Public Event EstadoCuentaMixRowChanged As EstadoCuentaMixRowChangeEventHandler
        
        Public Event EstadoCuentaMixRowDeleting As EstadoCuentaMixRowChangeEventHandler
        
        Public Event EstadoCuentaMixRowDeleted As EstadoCuentaMixRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEstadoCuentaMixRow(ByVal row As EstadoCuentaMixRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEstadoCuentaMixRow( _
                    ByVal PreNum As String,  _
                    ByVal PreMatInm As String,  _
                    ByVal PreCod As Integer,  _
                    ByVal PreDir As String,  _
                    ByVal PreDirCob As String,  _
                    ByVal PreEstMun2 As Short,  _
                    ByVal PreEstVal As Short,  _
                    ByVal PreMult As Decimal,  _
                    ByVal PreLegMun As Short,  _
                    ByVal PreRecUltP As String,  _
                    ByVal PreFecUltP As Date,  _
                    ByVal PreValUltP As Decimal,  _
                    ByVal PrePerDes As Short,  _
                    ByVal PrePrsDoc As String,  _
                    ByVal PrePrsNom As String,  _
                    ByVal Ultresol As String,  _
                    ByVal chequesDev As String,  _
                    ByVal NroExp As String,  _
                    ByVal Ultunidad As String,  _
                    ByVal Ultexpediente As String,  _
                    ByVal Ultresolucion As String,  _
                    ByVal remanente As String,  _
                    ByVal PreSubDes As Short,  _
                    ByVal PrePerCan As Short,  _
                    ByVal PreSubCan As Short,  _
                    ByVal periodo As String,  _
                    ByVal avaluo As String,  _
                    ByVal dest1 As String,  _
                    ByVal dest2 As String,  _
                    ByVal idEstrato As String,  _
                    ByVal NomEstrato As String,  _
                    ByVal idUbic As String,  _
                    ByVal NomUbicacion As String,  _
                    ByVal idTipo As String,  _
                    ByVal NomTipo As String,  _
                    ByVal Aterreno As String,  _
                    ByVal AConstruida As String) As EstadoCuentaMixRow
            Dim rowEstadoCuentaMixRow As EstadoCuentaMixRow = CType(Me.NewRow,EstadoCuentaMixRow)
            Dim columnValuesArray() As Object = New Object() {PreNum, PreMatInm, PreCod, PreDir, PreDirCob, PreEstMun2, PreEstVal, PreMult, PreLegMun, PreRecUltP, PreFecUltP, PreValUltP, PrePerDes, PrePrsDoc, PrePrsNom, Ultresol, chequesDev, NroExp, Ultunidad, Ultexpediente, Ultresolucion, remanente, PreSubDes, PrePerCan, PreSubCan, periodo, avaluo, dest1, dest2, idEstrato, NomEstrato, idUbic, NomUbicacion, idTipo, NomTipo, Aterreno, AConstruida}
            rowEstadoCuentaMixRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEstadoCuentaMixRow)
            Return rowEstadoCuentaMixRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EstadoCuentaMixDataTable = CType(MyBase.Clone,EstadoCuentaMixDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EstadoCuentaMixDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPreNum = MyBase.Columns("PreNum")
            Me.columnPreMatInm = MyBase.Columns("PreMatInm")
            Me.columnPreCod = MyBase.Columns("PreCod")
            Me.columnPreDir = MyBase.Columns("PreDir")
            Me.columnPreDirCob = MyBase.Columns("PreDirCob")
            Me.columnPreEstMun2 = MyBase.Columns("PreEstMun2")
            Me.columnPreEstVal = MyBase.Columns("PreEstVal")
            Me.columnPreMult = MyBase.Columns("PreMult")
            Me.columnPreLegMun = MyBase.Columns("PreLegMun")
            Me.columnPreRecUltP = MyBase.Columns("PreRecUltP")
            Me.columnPreFecUltP = MyBase.Columns("PreFecUltP")
            Me.columnPreValUltP = MyBase.Columns("PreValUltP")
            Me.columnPrePerDes = MyBase.Columns("PrePerDes")
            Me.columnPrePrsDoc = MyBase.Columns("PrePrsDoc")
            Me.columnPrePrsNom = MyBase.Columns("PrePrsNom")
            Me.columnUltresol = MyBase.Columns("Ultresol")
            Me.columnchequesDev = MyBase.Columns("chequesDev")
            Me.columnNroExp = MyBase.Columns("NroExp")
            Me.columnUltunidad = MyBase.Columns("Ultunidad")
            Me.columnUltexpediente = MyBase.Columns("Ultexpediente")
            Me.columnUltresolucion = MyBase.Columns("Ultresolucion")
            Me.columnremanente = MyBase.Columns("remanente")
            Me.columnPreSubDes = MyBase.Columns("PreSubDes")
            Me.columnPrePerCan = MyBase.Columns("PrePerCan")
            Me.columnPreSubCan = MyBase.Columns("PreSubCan")
            Me.columnperiodo = MyBase.Columns("periodo")
            Me.columnavaluo = MyBase.Columns("avaluo")
            Me.columndest1 = MyBase.Columns("dest1")
            Me.columndest2 = MyBase.Columns("dest2")
            Me.columnidEstrato = MyBase.Columns("idEstrato")
            Me.columnNomEstrato = MyBase.Columns("NomEstrato")
            Me.columnidUbic = MyBase.Columns("idUbic")
            Me.columnNomUbicacion = MyBase.Columns("NomUbicacion")
            Me.columnidTipo = MyBase.Columns("idTipo")
            Me.columnNomTipo = MyBase.Columns("NomTipo")
            Me.columnAterreno = MyBase.Columns("Aterreno")
            Me.columnAConstruida = MyBase.Columns("AConstruida")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPreNum = New Global.System.Data.DataColumn("PreNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreNum)
            Me.columnPreMatInm = New Global.System.Data.DataColumn("PreMatInm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreMatInm)
            Me.columnPreCod = New Global.System.Data.DataColumn("PreCod", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreCod)
            Me.columnPreDir = New Global.System.Data.DataColumn("PreDir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreDir)
            Me.columnPreDirCob = New Global.System.Data.DataColumn("PreDirCob", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreDirCob)
            Me.columnPreEstMun2 = New Global.System.Data.DataColumn("PreEstMun2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreEstMun2)
            Me.columnPreEstVal = New Global.System.Data.DataColumn("PreEstVal", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreEstVal)
            Me.columnPreMult = New Global.System.Data.DataColumn("PreMult", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreMult)
            Me.columnPreLegMun = New Global.System.Data.DataColumn("PreLegMun", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreLegMun)
            Me.columnPreRecUltP = New Global.System.Data.DataColumn("PreRecUltP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreRecUltP)
            Me.columnPreFecUltP = New Global.System.Data.DataColumn("PreFecUltP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreFecUltP)
            Me.columnPreValUltP = New Global.System.Data.DataColumn("PreValUltP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreValUltP)
            Me.columnPrePerDes = New Global.System.Data.DataColumn("PrePerDes", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePerDes)
            Me.columnPrePrsDoc = New Global.System.Data.DataColumn("PrePrsDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePrsDoc)
            Me.columnPrePrsNom = New Global.System.Data.DataColumn("PrePrsNom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePrsNom)
            Me.columnUltresol = New Global.System.Data.DataColumn("Ultresol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltresol)
            Me.columnchequesDev = New Global.System.Data.DataColumn("chequesDev", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchequesDev)
            Me.columnNroExp = New Global.System.Data.DataColumn("NroExp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroExp)
            Me.columnUltunidad = New Global.System.Data.DataColumn("Ultunidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltunidad)
            Me.columnUltexpediente = New Global.System.Data.DataColumn("Ultexpediente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltexpediente)
            Me.columnUltresolucion = New Global.System.Data.DataColumn("Ultresolucion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUltresolucion)
            Me.columnremanente = New Global.System.Data.DataColumn("remanente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremanente)
            Me.columnPreSubDes = New Global.System.Data.DataColumn("PreSubDes", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreSubDes)
            Me.columnPrePerCan = New Global.System.Data.DataColumn("PrePerCan", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrePerCan)
            Me.columnPreSubCan = New Global.System.Data.DataColumn("PreSubCan", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreSubCan)
            Me.columnperiodo = New Global.System.Data.DataColumn("periodo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnperiodo)
            Me.columnavaluo = New Global.System.Data.DataColumn("avaluo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavaluo)
            Me.columndest1 = New Global.System.Data.DataColumn("dest1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndest1)
            Me.columndest2 = New Global.System.Data.DataColumn("dest2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndest2)
            Me.columnidEstrato = New Global.System.Data.DataColumn("idEstrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidEstrato)
            Me.columnNomEstrato = New Global.System.Data.DataColumn("NomEstrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomEstrato)
            Me.columnidUbic = New Global.System.Data.DataColumn("idUbic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidUbic)
            Me.columnNomUbicacion = New Global.System.Data.DataColumn("NomUbicacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomUbicacion)
            Me.columnidTipo = New Global.System.Data.DataColumn("idTipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidTipo)
            Me.columnNomTipo = New Global.System.Data.DataColumn("NomTipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomTipo)
            Me.columnAterreno = New Global.System.Data.DataColumn("Aterreno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAterreno)
            Me.columnAConstruida = New Global.System.Data.DataColumn("AConstruida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAConstruida)
            Me.columnPreNum.AllowDBNull = false
            Me.columnPreNum.MaxLength = 15
            Me.columnPreMatInm.MaxLength = 18
            Me.columnPreDir.MaxLength = 50
            Me.columnPreDirCob.MaxLength = 50
            Me.columnPreRecUltP.MaxLength = 17
            Me.columnPrePrsDoc.MaxLength = 12
            Me.columnPrePrsNom.MaxLength = 50
            Me.columnUltresol.ReadOnly = true
            Me.columnUltresol.MaxLength = 35
            Me.columnchequesDev.ReadOnly = true
            Me.columnchequesDev.MaxLength = 2
            Me.columnNroExp.ReadOnly = true
            Me.columnNroExp.MaxLength = 2
            Me.columnUltunidad.ReadOnly = true
            Me.columnUltunidad.MaxLength = 2
            Me.columnUltexpediente.ReadOnly = true
            Me.columnUltexpediente.MaxLength = 10
            Me.columnUltresolucion.ReadOnly = true
            Me.columnUltresolucion.MaxLength = 8
            Me.columnremanente.ReadOnly = true
            Me.columnremanente.MaxLength = 55
            Me.columnperiodo.ReadOnly = true
            Me.columnperiodo.MaxLength = 4
            Me.columnavaluo.ReadOnly = true
            Me.columnavaluo.MaxLength = 12
            Me.columndest1.ReadOnly = true
            Me.columndest1.MaxLength = 2
            Me.columndest2.ReadOnly = true
            Me.columndest2.MaxLength = 15
            Me.columnidEstrato.ReadOnly = true
            Me.columnidEstrato.MaxLength = 2
            Me.columnNomEstrato.ReadOnly = true
            Me.columnNomEstrato.MaxLength = 14
            Me.columnidUbic.ReadOnly = true
            Me.columnidUbic.MaxLength = 2
            Me.columnNomUbicacion.ReadOnly = true
            Me.columnNomUbicacion.MaxLength = 14
            Me.columnidTipo.ReadOnly = true
            Me.columnidTipo.MaxLength = 2
            Me.columnNomTipo.ReadOnly = true
            Me.columnNomTipo.MaxLength = 14
            Me.columnAterreno.ReadOnly = true
            Me.columnAterreno.MaxLength = 5
            Me.columnAConstruida.ReadOnly = true
            Me.columnAConstruida.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEstadoCuentaMixRow() As EstadoCuentaMixRow
            Return CType(Me.NewRow,EstadoCuentaMixRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EstadoCuentaMixRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EstadoCuentaMixRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EstadoCuentaMixRowChangedEvent) Is Nothing) Then
                RaiseEvent EstadoCuentaMixRowChanged(Me, New EstadoCuentaMixRowChangeEvent(CType(e.Row,EstadoCuentaMixRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EstadoCuentaMixRowChangingEvent) Is Nothing) Then
                RaiseEvent EstadoCuentaMixRowChanging(Me, New EstadoCuentaMixRowChangeEvent(CType(e.Row,EstadoCuentaMixRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EstadoCuentaMixRowDeletedEvent) Is Nothing) Then
                RaiseEvent EstadoCuentaMixRowDeleted(Me, New EstadoCuentaMixRowChangeEvent(CType(e.Row,EstadoCuentaMixRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EstadoCuentaMixRowDeletingEvent) Is Nothing) Then
                RaiseEvent EstadoCuentaMixRowDeleting(Me, New EstadoCuentaMixRowChangeEvent(CType(e.Row,EstadoCuentaMixRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEstadoCuentaMixRow(ByVal row As EstadoCuentaMixRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsEstadoCuenta = New dsEstadoCuenta
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EstadoCuentaMixDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleProcesoDataTable
        Inherits Global.System.Data.TypedTableBase(Of DetalleProcesoRow)
        
        Private columnPreNum As Global.System.Data.DataColumn
        
        Private columnEfiNroExp As Global.System.Data.DataColumn
        
        Private columnEfiUni As Global.System.Data.DataColumn
        
        Private columnEfiGenNuev As Global.System.Data.DataColumn
        
        Private columnEfiCon As Global.System.Data.DataColumn
        
        Private columnEfiResTip As Global.System.Data.DataColumn
        
        Private columnEfiResFec As Global.System.Data.DataColumn
        
        Private columnEfiResNum As Global.System.Data.DataColumn
        
        Private columnEfiResTes As Global.System.Data.DataColumn
        
        Private columnEfiResCar As Global.System.Data.DataColumn
        
        Private columnEfiResAbo As Global.System.Data.DataColumn
        
        Private columnEfiResOb1 As Global.System.Data.DataColumn
        
        Private columnPasDes As Global.System.Data.DataColumn
        
        Private columnFunCarNom As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleProceso"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiNroExpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiNroExp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiUniColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiUni
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiGenNuevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiGenNuev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiConColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiCon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResTipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResTip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResFecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResFec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResTesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResTes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResCarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResCar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResAboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResAbo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EfiResOb1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEfiResOb1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasDesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPasDes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FunCarNomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFunCarNom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleProcesoRow
            Get
                Return CType(Me.Rows(index),DetalleProcesoRow)
            End Get
        End Property
        
        Public Event DetalleProcesoRowChanging As DetalleProcesoRowChangeEventHandler
        
        Public Event DetalleProcesoRowChanged As DetalleProcesoRowChangeEventHandler
        
        Public Event DetalleProcesoRowDeleting As DetalleProcesoRowChangeEventHandler
        
        Public Event DetalleProcesoRowDeleted As DetalleProcesoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleProcesoRow(ByVal row As DetalleProcesoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleProcesoRow(ByVal PreNum As String, ByVal EfiNroExp As Integer, ByVal EfiUni As Short, ByVal EfiGenNuev As String, ByVal EfiCon As Integer, ByVal EfiResTip As String, ByVal EfiResFec As Date, ByVal EfiResNum As Integer, ByVal EfiResTes As Integer, ByVal EfiResCar As Short, ByVal EfiResAbo As Short, ByVal EfiResOb1 As String, ByVal PasDes As String, ByVal FunCarNom As String) As DetalleProcesoRow
            Dim rowDetalleProcesoRow As DetalleProcesoRow = CType(Me.NewRow,DetalleProcesoRow)
            Dim columnValuesArray() As Object = New Object() {PreNum, EfiNroExp, EfiUni, EfiGenNuev, EfiCon, EfiResTip, EfiResFec, EfiResNum, EfiResTes, EfiResCar, EfiResAbo, EfiResOb1, PasDes, FunCarNom}
            rowDetalleProcesoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetalleProcesoRow)
            Return rowDetalleProcesoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DetalleProcesoDataTable = CType(MyBase.Clone,DetalleProcesoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DetalleProcesoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPreNum = MyBase.Columns("PreNum")
            Me.columnEfiNroExp = MyBase.Columns("EfiNroExp")
            Me.columnEfiUni = MyBase.Columns("EfiUni")
            Me.columnEfiGenNuev = MyBase.Columns("EfiGenNuev")
            Me.columnEfiCon = MyBase.Columns("EfiCon")
            Me.columnEfiResTip = MyBase.Columns("EfiResTip")
            Me.columnEfiResFec = MyBase.Columns("EfiResFec")
            Me.columnEfiResNum = MyBase.Columns("EfiResNum")
            Me.columnEfiResTes = MyBase.Columns("EfiResTes")
            Me.columnEfiResCar = MyBase.Columns("EfiResCar")
            Me.columnEfiResAbo = MyBase.Columns("EfiResAbo")
            Me.columnEfiResOb1 = MyBase.Columns("EfiResOb1")
            Me.columnPasDes = MyBase.Columns("PasDes")
            Me.columnFunCarNom = MyBase.Columns("FunCarNom")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPreNum = New Global.System.Data.DataColumn("PreNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreNum)
            Me.columnEfiNroExp = New Global.System.Data.DataColumn("EfiNroExp", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiNroExp)
            Me.columnEfiUni = New Global.System.Data.DataColumn("EfiUni", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiUni)
            Me.columnEfiGenNuev = New Global.System.Data.DataColumn("EfiGenNuev", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiGenNuev)
            Me.columnEfiCon = New Global.System.Data.DataColumn("EfiCon", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiCon)
            Me.columnEfiResTip = New Global.System.Data.DataColumn("EfiResTip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResTip)
            Me.columnEfiResFec = New Global.System.Data.DataColumn("EfiResFec", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResFec)
            Me.columnEfiResNum = New Global.System.Data.DataColumn("EfiResNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResNum)
            Me.columnEfiResTes = New Global.System.Data.DataColumn("EfiResTes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResTes)
            Me.columnEfiResCar = New Global.System.Data.DataColumn("EfiResCar", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResCar)
            Me.columnEfiResAbo = New Global.System.Data.DataColumn("EfiResAbo", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResAbo)
            Me.columnEfiResOb1 = New Global.System.Data.DataColumn("EfiResOb1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEfiResOb1)
            Me.columnPasDes = New Global.System.Data.DataColumn("PasDes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPasDes)
            Me.columnFunCarNom = New Global.System.Data.DataColumn("FunCarNom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFunCarNom)
            Me.columnPreNum.MaxLength = 15
            Me.columnEfiGenNuev.MaxLength = 15
            Me.columnEfiCon.AllowDBNull = false
            Me.columnEfiResTip.AllowDBNull = false
            Me.columnEfiResTip.MaxLength = 3
            Me.columnEfiResNum.AllowDBNull = false
            Me.columnEfiResOb1.MaxLength = 2147483647
            Me.columnPasDes.MaxLength = 60
            Me.columnFunCarNom.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleProcesoRow() As DetalleProcesoRow
            Return CType(Me.NewRow,DetalleProcesoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DetalleProcesoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DetalleProcesoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleProcesoRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleProcesoRowChanged(Me, New DetalleProcesoRowChangeEvent(CType(e.Row,DetalleProcesoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleProcesoRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleProcesoRowChanging(Me, New DetalleProcesoRowChangeEvent(CType(e.Row,DetalleProcesoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleProcesoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleProcesoRowDeleted(Me, New DetalleProcesoRowChangeEvent(CType(e.Row,DetalleProcesoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleProcesoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleProcesoRowDeleting(Me, New DetalleProcesoRowChangeEvent(CType(e.Row,DetalleProcesoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleProcesoRow(ByVal row As DetalleProcesoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsEstadoCuenta = New dsEstadoCuenta
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleProcesoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EstadoCuentaMixRow
        Inherits Global.System.Data.DataRow
        
        Private tableEstadoCuentaMix As EstadoCuentaMixDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEstadoCuentaMix = CType(Me.Table,EstadoCuentaMixDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreNum() As String
            Get
                Return CType(Me(Me.tableEstadoCuentaMix.PreNumColumn),String)
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreMatInm() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreMatInmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreMatInm' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreMatInmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreCod() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreCodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreCod' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreCodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreDir() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreDirColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreDir' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreDirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreDirCob() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreDirCobColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreDirCob' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreDirCobColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreEstMun2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreEstMun2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreEstMun2' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreEstMun2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreEstVal() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreEstValColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreEstVal' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreEstValColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreMult() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreMultColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreMult' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreMultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreLegMun() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreLegMunColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreLegMun' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreLegMunColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreRecUltP() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreRecUltPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreRecUltP' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreRecUltPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreFecUltP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreFecUltPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreFecUltP' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreFecUltPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreValUltP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreValUltPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreValUltP' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreValUltPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePerDes() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PrePerDesColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrePerDes' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PrePerDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PrePrsDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrePrsDoc' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PrePrsDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePrsNom() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PrePrsNomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrePrsNom' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PrePrsNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ultresol() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.UltresolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ultresol' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.UltresolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chequesDev() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.chequesDevColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'chequesDev' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.chequesDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroExp() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.NroExpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NroExp' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.NroExpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ultunidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.UltunidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ultunidad' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.UltunidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ultexpediente() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.UltexpedienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ultexpediente' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.UltexpedienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ultresolucion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.UltresolucionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ultresolucion' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.UltresolucionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remanente() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.remanenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'remanente' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.remanenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreSubDes() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreSubDesColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreSubDes' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreSubDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrePerCan() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PrePerCanColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrePerCan' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PrePerCanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreSubCan() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.PreSubCanColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreSubCan' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.PreSubCanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property periodo() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.periodoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'periodo' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.periodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property avaluo() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.avaluoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'avaluo' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.avaluoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dest1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.dest1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dest1' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.dest1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dest2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.dest2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dest2' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.dest2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idEstrato() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.idEstratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idEstrato' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.idEstratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomEstrato() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.NomEstratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NomEstrato' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.NomEstratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idUbic() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.idUbicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idUbic' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.idUbicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomUbicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.NomUbicacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NomUbicacion' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.NomUbicacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idTipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.idTipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idTipo' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.idTipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomTipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.NomTipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NomTipo' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.NomTipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aterreno() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.AterrenoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Aterreno' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.AterrenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AConstruida() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstadoCuentaMix.AConstruidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AConstruida' de la tabla 'EstadoCuentaMix' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstadoCuentaMix.AConstruidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreMatInmNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreMatInmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreMatInmNull()
            Me(Me.tableEstadoCuentaMix.PreMatInmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreCodNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreCodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreCodNull()
            Me(Me.tableEstadoCuentaMix.PreCodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreDirNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreDirColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreDirNull()
            Me(Me.tableEstadoCuentaMix.PreDirColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreDirCobNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreDirCobColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreDirCobNull()
            Me(Me.tableEstadoCuentaMix.PreDirCobColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreEstMun2Null() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreEstMun2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreEstMun2Null()
            Me(Me.tableEstadoCuentaMix.PreEstMun2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreEstValNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreEstValColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreEstValNull()
            Me(Me.tableEstadoCuentaMix.PreEstValColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreMultNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreMultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreMultNull()
            Me(Me.tableEstadoCuentaMix.PreMultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreLegMunNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreLegMunColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreLegMunNull()
            Me(Me.tableEstadoCuentaMix.PreLegMunColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreRecUltPNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreRecUltPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreRecUltPNull()
            Me(Me.tableEstadoCuentaMix.PreRecUltPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreFecUltPNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreFecUltPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreFecUltPNull()
            Me(Me.tableEstadoCuentaMix.PreFecUltPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreValUltPNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreValUltPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreValUltPNull()
            Me(Me.tableEstadoCuentaMix.PreValUltPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePerDesNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PrePerDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePerDesNull()
            Me(Me.tableEstadoCuentaMix.PrePerDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsDocNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PrePrsDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsDocNull()
            Me(Me.tableEstadoCuentaMix.PrePrsDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePrsNomNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PrePrsNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePrsNomNull()
            Me(Me.tableEstadoCuentaMix.PrePrsNomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltresolNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.UltresolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltresolNull()
            Me(Me.tableEstadoCuentaMix.UltresolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IschequesDevNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.chequesDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetchequesDevNull()
            Me(Me.tableEstadoCuentaMix.chequesDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNroExpNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.NroExpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNroExpNull()
            Me(Me.tableEstadoCuentaMix.NroExpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltunidadNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.UltunidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltunidadNull()
            Me(Me.tableEstadoCuentaMix.UltunidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltexpedienteNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.UltexpedienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltexpedienteNull()
            Me(Me.tableEstadoCuentaMix.UltexpedienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUltresolucionNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.UltresolucionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUltresolucionNull()
            Me(Me.tableEstadoCuentaMix.UltresolucionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsremanenteNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.remanenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetremanenteNull()
            Me(Me.tableEstadoCuentaMix.remanenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreSubDesNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreSubDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreSubDesNull()
            Me(Me.tableEstadoCuentaMix.PreSubDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrePerCanNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PrePerCanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrePerCanNull()
            Me(Me.tableEstadoCuentaMix.PrePerCanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreSubCanNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.PreSubCanColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreSubCanNull()
            Me(Me.tableEstadoCuentaMix.PreSubCanColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsperiodoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.periodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetperiodoNull()
            Me(Me.tableEstadoCuentaMix.periodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsavaluoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.avaluoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetavaluoNull()
            Me(Me.tableEstadoCuentaMix.avaluoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdest1Null() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.dest1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdest1Null()
            Me(Me.tableEstadoCuentaMix.dest1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdest2Null() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.dest2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdest2Null()
            Me(Me.tableEstadoCuentaMix.dest2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidEstratoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.idEstratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidEstratoNull()
            Me(Me.tableEstadoCuentaMix.idEstratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomEstratoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.NomEstratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomEstratoNull()
            Me(Me.tableEstadoCuentaMix.NomEstratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidUbicNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.idUbicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidUbicNull()
            Me(Me.tableEstadoCuentaMix.idUbicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomUbicacionNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.NomUbicacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomUbicacionNull()
            Me(Me.tableEstadoCuentaMix.NomUbicacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidTipoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.idTipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidTipoNull()
            Me(Me.tableEstadoCuentaMix.idTipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomTipoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.NomTipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomTipoNull()
            Me(Me.tableEstadoCuentaMix.NomTipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAterrenoNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.AterrenoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAterrenoNull()
            Me(Me.tableEstadoCuentaMix.AterrenoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAConstruidaNull() As Boolean
            Return Me.IsNull(Me.tableEstadoCuentaMix.AConstruidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAConstruidaNull()
            Me(Me.tableEstadoCuentaMix.AConstruidaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DetalleProcesoRow
        Inherits Global.System.Data.DataRow
        
        Private tableDetalleProceso As DetalleProcesoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleProceso = CType(Me.Table,DetalleProcesoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.PreNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PreNum' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.PreNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiNroExp() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiNroExpColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiNroExp' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiNroExpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiUni() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiUniColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiUni' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiUniColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiGenNuev() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiGenNuevColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiGenNuev' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiGenNuevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiCon() As Integer
            Get
                Return CType(Me(Me.tableDetalleProceso.EfiConColumn),Integer)
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiConColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResTip() As String
            Get
                Return CType(Me(Me.tableDetalleProceso.EfiResTipColumn),String)
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResTipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResFec() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiResFecColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiResFec' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResFecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResNum() As Integer
            Get
                Return CType(Me(Me.tableDetalleProceso.EfiResNumColumn),Integer)
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResTes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiResTesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiResTes' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResTesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResCar() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiResCarColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiResCar' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResCarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResAbo() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiResAboColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiResAbo' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResAboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EfiResOb1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.EfiResOb1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EfiResOb1' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.EfiResOb1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PasDes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.PasDesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PasDes' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.PasDesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FunCarNom() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleProceso.FunCarNomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FunCarNom' de la tabla 'DetalleProceso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleProceso.FunCarNomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreNumNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.PreNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreNumNull()
            Me(Me.tableDetalleProceso.PreNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiNroExpNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiNroExpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiNroExpNull()
            Me(Me.tableDetalleProceso.EfiNroExpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiUniNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiUniColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiUniNull()
            Me(Me.tableDetalleProceso.EfiUniColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiGenNuevNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiGenNuevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiGenNuevNull()
            Me(Me.tableDetalleProceso.EfiGenNuevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiResFecNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiResFecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiResFecNull()
            Me(Me.tableDetalleProceso.EfiResFecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiResTesNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiResTesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiResTesNull()
            Me(Me.tableDetalleProceso.EfiResTesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiResCarNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiResCarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiResCarNull()
            Me(Me.tableDetalleProceso.EfiResCarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiResAboNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiResAboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiResAboNull()
            Me(Me.tableDetalleProceso.EfiResAboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEfiResOb1Null() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.EfiResOb1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEfiResOb1Null()
            Me(Me.tableDetalleProceso.EfiResOb1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasDesNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.PasDesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasDesNull()
            Me(Me.tableDetalleProceso.PasDesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFunCarNomNull() As Boolean
            Return Me.IsNull(Me.tableDetalleProceso.FunCarNomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFunCarNomNull()
            Me(Me.tableDetalleProceso.FunCarNomColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EstadoCuentaMixRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EstadoCuentaMixRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EstadoCuentaMixRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EstadoCuentaMixRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DetalleProcesoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DetalleProcesoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleProcesoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleProcesoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsEstadoCuentaTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EstadoCuentaMixTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EstadoCuentaMix"
            tableMapping.ColumnMappings.Add("PreNum", "PreNum")
            tableMapping.ColumnMappings.Add("PreMatInm", "PreMatInm")
            tableMapping.ColumnMappings.Add("PreCod", "PreCod")
            tableMapping.ColumnMappings.Add("PreDir", "PreDir")
            tableMapping.ColumnMappings.Add("PreDirCob", "PreDirCob")
            tableMapping.ColumnMappings.Add("PreEstMun2", "PreEstMun2")
            tableMapping.ColumnMappings.Add("PreEstVal", "PreEstVal")
            tableMapping.ColumnMappings.Add("PreMult", "PreMult")
            tableMapping.ColumnMappings.Add("PreLegMun", "PreLegMun")
            tableMapping.ColumnMappings.Add("PreRecUltP", "PreRecUltP")
            tableMapping.ColumnMappings.Add("PreFecUltP", "PreFecUltP")
            tableMapping.ColumnMappings.Add("PreValUltP", "PreValUltP")
            tableMapping.ColumnMappings.Add("PrePerDes", "PrePerDes")
            tableMapping.ColumnMappings.Add("PrePrsDoc", "PrePrsDoc")
            tableMapping.ColumnMappings.Add("PrePrsNom", "PrePrsNom")
            tableMapping.ColumnMappings.Add("Ultresol", "Ultresol")
            tableMapping.ColumnMappings.Add("chequesDev", "chequesDev")
            tableMapping.ColumnMappings.Add("NroExp", "NroExp")
            tableMapping.ColumnMappings.Add("Ultunidad", "Ultunidad")
            tableMapping.ColumnMappings.Add("Ultexpediente", "Ultexpediente")
            tableMapping.ColumnMappings.Add("Ultresolucion", "Ultresolucion")
            tableMapping.ColumnMappings.Add("remanente", "remanente")
            tableMapping.ColumnMappings.Add("PreSubDes", "PreSubDes")
            tableMapping.ColumnMappings.Add("PrePerCan", "PrePerCan")
            tableMapping.ColumnMappings.Add("PreSubCan", "PreSubCan")
            tableMapping.ColumnMappings.Add("periodo", "periodo")
            tableMapping.ColumnMappings.Add("avaluo", "avaluo")
            tableMapping.ColumnMappings.Add("dest1", "dest1")
            tableMapping.ColumnMappings.Add("dest2", "dest2")
            tableMapping.ColumnMappings.Add("idEstrato", "idEstrato")
            tableMapping.ColumnMappings.Add("NomEstrato", "NomEstrato")
            tableMapping.ColumnMappings.Add("idUbic", "idUbic")
            tableMapping.ColumnMappings.Add("NomUbicacion", "NomUbicacion")
            tableMapping.ColumnMappings.Add("idTipo", "idTipo")
            tableMapping.ColumnMappings.Add("NomTipo", "NomTipo")
            tableMapping.ColumnMappings.Add("Aterreno", "Aterreno")
            tableMapping.ColumnMappings.Add("AConstruida", "AConstruida")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("impuestosConnectionString2").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PREDIOS.PreNum, PREDIOS.PreMatInm, PREDIOS.PreCod, PREDIOS.PreDir, PRE"& _ 
                "DIOS.PreDirCob, PREDIOS.PreEstMun2, PREDIOS.PreEstVal, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      P"& _ 
                "REDIOS.PreMult, PREDIOS.PreLegMun, PREDIOS.PreRecUltP, PREDIOS.PreFecUltP, PREDI"& _ 
                "OS.PreValUltP, PREDIOS.PrePerDes, PREDIOS.PreSubDes, PREDIOS.PrePerCan, PREDIOS."& _ 
                "PreSubCan,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PREDIOS3.PrePrsDoc, PREDIOS3.PrePrsNom,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'    "& _ 
                "                               ' AS Ultresol, '  ' AS chequesDev, '  ' AS NroExp"& _ 
                ", '  ' AS Ultunidad, '          ' AS Ultexpediente, '        ' AS Ultresolucion,"& _ 
                " '                                                       ' AS remanente,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'    '"& _ 
                " AS periodo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"'            ' AS avaluo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"'  ' AS dest1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"'             "& _ 
                "  ' AS dest2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"'  ' AS idEstrato,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '              ' AS NomEstrato, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "        '  ' AS idUbic, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '              ' AS NomUbicacion, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        ' "& _ 
                " ' AS idTipo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '              ' AS NomTipo,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '     ' AS Aterren"& _ 
                "o,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        '     ' AS AConstruida "&Global.Microsoft.VisualBasic.ChrW(9)&" "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         PREDIOS INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              PREDIOS3 ON RTRIM(PREDIOS.PreNum) = RTRIM(PREDIOS3.PreNum)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "    (PREDIOS3.PreEstPer = 1)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsEstadoCuenta.EstadoCuentaMixDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsEstadoCuenta.EstadoCuentaMixDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsEstadoCuenta.EstadoCuentaMixDataTable = New dsEstadoCuenta.EstadoCuentaMixDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DetalleProcesoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleProceso"
            tableMapping.ColumnMappings.Add("PreNum", "PreNum")
            tableMapping.ColumnMappings.Add("EfiNroExp", "EfiNroExp")
            tableMapping.ColumnMappings.Add("EfiUni", "EfiUni")
            tableMapping.ColumnMappings.Add("EfiGenNuev", "EfiGenNuev")
            tableMapping.ColumnMappings.Add("EfiCon", "EfiCon")
            tableMapping.ColumnMappings.Add("EfiResTip", "EfiResTip")
            tableMapping.ColumnMappings.Add("EfiResFec", "EfiResFec")
            tableMapping.ColumnMappings.Add("EfiResNum", "EfiResNum")
            tableMapping.ColumnMappings.Add("EfiResTes", "EfiResTes")
            tableMapping.ColumnMappings.Add("EfiResCar", "EfiResCar")
            tableMapping.ColumnMappings.Add("EfiResAbo", "EfiResAbo")
            tableMapping.ColumnMappings.Add("EfiResOb1", "EfiResOb1")
            tableMapping.ColumnMappings.Add("PasDes", "PasDes")
            tableMapping.ColumnMappings.Add("FunCarNom", "FunCarNom")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("impuestosConnectionString2").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT  EJEFISGLOBAL.PreNum,EJEFISGLOBAL.EfiNroExp,EJEFISGLOBAL.EfiUni,EJEFISGLOB"& _ 
                "AL.EfiGenNuev,EJEFISGLOBAL.EfiCon,EJEFISGLOBAL2.EfiResTip,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"EJEFISGLOBAL2.EfiR"& _ 
                "esFec,EJEFISGLOBAL2.EfiResNum,EJEFISGLOBAL2.EfiResTes,EJEFISGLOBAL2.EfiResCar,EJ"& _ 
                "EFISGLOBAL2.EfiResAbo, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"EJEFISGLOBAL2.EfiResOb1, pasos.PasDes, cargofu1.FunCa"& _ 
                "rNom "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM EJEFISGLOBAL, pasos, EJEFISGLOBAL2 LEFT OUTER JOIN cargofu1 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ON EJE"& _ 
                "FISGLOBAL2.EfiResCar = cargofu1.FunCarCod AND EJEFISGLOBAL2.EfiResAbo = cargofu1"& _ 
                ".FunCon "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE EJEFISGLOBAL.EfiCon = EJEFISGLOBAL2.EfiCon AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"  EJEFISGLOBAL"& _ 
                "2.EfiResTip = pasos.PasCod AND "&Global.Microsoft.VisualBasic.ChrW(9)&"  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"  RTRIM(EJEFISGLOBAL2.EfiResTip) > '201' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"  ORDER BY EJEFISGLOBAL2.PefCod, EJEFISGLOBAL2.EfiCon"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsEstadoCuenta.DetalleProcesoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsEstadoCuenta.DetalleProcesoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsEstadoCuenta.DetalleProcesoDataTable = New dsEstadoCuenta.DetalleProcesoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsEstadoCuenta, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsEstadoCuenta, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsEstadoCuenta, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsEstadoCuenta) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
