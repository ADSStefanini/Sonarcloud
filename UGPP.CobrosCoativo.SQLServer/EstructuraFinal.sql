ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [FK_MAESTRO_TITULOS_EJEFISGLOBAL]
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [FK_MAESTRO_TITULOS_TIPOS_TITULO]
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [FK_MAESTRO_TITULOS_PROCEDENCIA_TITULOS]
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [FK_MAESTRO_TITULOS_FORMAS_NOTIFICACION2]
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [FK_MAESTRO_TITULOS_FORMAS_NOTIFICACION1]
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [FK_MAESTRO_TITULOS_FORMAS_NOTIFICACION]
GO
ALTER TABLE [dbo].[PERFILES] DROP CONSTRAINT [PK_roles]
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [PK_MAESTRO_TITULOS]
GO
DROP VIEW [dbo].[VTA_APORTANTES_Y_APODERADOS]
GO
ALTER TABLE [dbo].[TIPOS_TITULO] ADD 
[ID_TIPO_CARTERA] [int] NULL,
[COD_PROCEDENCIA] [int] NULL,
[DIAS_MAX_GESTION_AMARILLO] [int] NULL,
[DIAS_MAX_GESTION_ROJO] [int] NULL,
[ANOS_FECHA_PRESCRIPCION] [int] NULL
GO
ALTER TABLE [dbo].[SOLICITUDES_CAMBIOESTADO] ADD 
[efietapaprocesal] [int] NULL
GO
ALTER TABLE [dbo].[TIPOS_APORTANTES] ADD 
[ind_estado] [bit] NULL CONSTRAINT [DF_TIPOS_APORTANTES_ind_estado] DEFAULT ((1))
GO
ALTER TABLE [dbo].[TIPOS_IDENTIFICACION] ADD 
[ind_estado] [bit] NULL CONSTRAINT [DF_TIPOS_IDENTIFICACION_ind_estado] DEFAULT ((1))
GO
ALTER TABLE [dbo].[TIPOS_PERSONA] ADD 
[ind_estado] [bit] NULL CONSTRAINT [DF_TIPOS_PERSONA_ind_estado] DEFAULT ((1))
GO
ALTER TABLE [dbo].[USUARIOS] ADD 
[ind_gestor_estudios] [bit] NULL CONSTRAINT [DF_USUARIOS_ind_gestor_estudios] DEFAULT ((0)),
[ind_gestor_expedientes] [bit] NULL CONSTRAINT [DF_USUARIOS_ind_gestor_expedientes] DEFAULT ((0))
GO
ALTER TABLE [dbo].[PAGOS] ADD 
[SnContabilizar] [bit] NOT NULL CONSTRAINT [DF__PAGOS__SnContabi__5A94EABE] DEFAULT ((1)),
[pagNroRadicadoSalida] [float] NULL
GO
ALTER TABLE [dbo].[TIPOS_PROCESOS_CONCURSALES] ADD 
[PROCESO_JURIDICO] [int] NULL,
[PROCESO_NATURAL] [int] NULL,
[ESTADO_PROCESO_J] [varchar] (5) COLLATE Modern_Spanish_CI_AS NULL,
[ESTADO_PROCESO_N] [varchar] (5) COLLATE Modern_Spanish_CI_AS NULL
GO
ALTER TABLE [dbo].[DIRECCIONES] ADD 
[ID_FUENTE] [int] NULL,
[OTRA_FUENTE] [varchar] (20) COLLATE Modern_Spanish_CI_AS NULL
GO
ALTER TABLE [dbo].[EJEFISGLOBAL] ADD 
[EFIETAPAPROCESAL] [int] NULL
GO
ALTER TABLE [dbo].[CAMBIOS_ESTADO] ADD 
[estadooperativo] [int] NULL,
[etapaprocesal] [int] NULL
GO
ALTER TABLE [dbo].[ENTES_DEUDORES] ADD 
[VAL_NO_MATRICULA_MERCANTIL] [varchar] (60) COLLATE Modern_Spanish_CI_AS NULL
GO
ALTER TABLE [dbo].[LOG_AUDITORIA] ADD 
[LOG_NEGOCIO] [varchar] (5000) COLLATE Modern_Spanish_CI_AS NULL
GO
ALTER TABLE [dbo].[ESTADOS_PROCESO] ADD 
[max_dias_gestion_amarillo] [int] NULL,
[max_dias_gestion_rojo] [int] NULL
GO
ALTER TABLE [dbo].[DEUDORES_EXPEDIENTES] ADD 
[ID_MAESTRO_TITULOS] [bigint] NULL
GO
CREATE TABLE [dbo].[ESTADOS_PROCESO_GESTOR]
(
	[VAL_USUARIO] [nvarchar] (150) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[COD_ID_ESTADOS_PROCESOS] [char] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL,
	[ETAPA_PROCESAL] [int] NULL,
	[USUARIO_ACTUALIZACION] [nvarchar] (10) COLLATE Modern_Spanish_CI_AS NULL,
	[FECHA_ACTUALIZACION] [date] NULL
)
GO

CREATE TABLE [dbo].[PERFIL_MODULO]
(
	[fk_perfil_id] [bigint] NOT NULL,
	[fk_modulo_id] [int] NOT NULL,
	[ind_estado] [bit] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ESTADO_OPERATIVO]
(
	[ID_ESTADO_OPERATIVOS] [int] IDENTITY (1,1) NOT NULL,
	[COD_TIPO_OBJ] [int] NOT NULL,
	[VAL_NOMBRE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[DEC_ESTADO_OPERATIVO] [varchar] (140) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL CONSTRAINT [DF_ESTADO_OPERATIVO_IND_ESTADO] DEFAULT ((1)),
	CONSTRAINT [PK_ESTADO_OPERATIVO] PRIMARY KEY CLUSTERED
	(
		[ID_ESTADO_OPERATIVOS] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[DOMINIO_DETALLE]
(
	[ID_DOMINIO_DETALLE] [int] IDENTITY (1,1) NOT NULL,
	[ID_DOMINIO] [int] NOT NULL,
	[VAL_NOMBRE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[DESC_DESCRIPCION] [varchar] (250) COLLATE Modern_Spanish_CI_AS NULL,
	[VAL_VALOR] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RELACION_ESTADO_ETAPA]
(
	[codigo_estado] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[codigo_etapa] [int] NOT NULL,
	CONSTRAINT [PK_RELACION_ESTADO_ETAPA] PRIMARY KEY CLUSTERED
	(
		[codigo_estado] ASC,
		[codigo_etapa] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[DOMINIO]
(
	[ID_DOMINIO] [int] IDENTITY (1,1) NOT NULL,
	[DESCRIPCION] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[DOCUMENTO_TITULO_TIPO_TITULO]
(
	[ID_DOCUMENTO_TITULO] [int] NULL,
	[COD_TIPO_TITULO] [char] (2) COLLATE Modern_Spanish_CI_AS NULL,
	[VAL_ESTADO] [bit] NULL,
	[VAL_OBLIGATORIO] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[RESPUESTA_PREGUNTA_CLASIFICACION]
(
	[ID_RESPUESTA_PREGUNTA_CLASIFICACION] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_TITULO] [bigint] NOT NULL,
	[VAL_RESPUESTA] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ID_PREGUNTA] [int] NOT NULL,
	CONSTRAINT [PK_RESPUESTAS_PREGUNTAS_CLASIFICACION] PRIMARY KEY CLUSTERED
	(
		[ID_RESPUESTA_PREGUNTA_CLASIFICACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[PERFIL_PAGINA]
(
	[fk_perfil_id] [bigint] NOT NULL,
	[fk_pagina_id] [int] NOT NULL,
	[ind_puede_ver] [bit] NOT NULL,
	[ind_puede_editar] [bit] NOT NULL,
	[ind_estado] [bit] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[PAGINA]
(
	[pk_codigo] [int] IDENTITY (1,1) NOT NULL,
	[val_nombre] [nvarchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[val_url] [nvarchar] (100) COLLATE Modern_Spanish_CI_AS NULL,
	[fk_padre] [int] NULL,
	[ind_pagina_interna] [bit] NOT NULL CONSTRAINT [DF_PAGINA_ind_pagina_interna] DEFAULT ((0)),
	[ind_estado] [bit] NOT NULL,
	CONSTRAINT [PK_PAGINA] PRIMARY KEY CLUSTERED
	(
		[pk_codigo] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPO_OBLIGACION_VALORES]
(
	[ID_TIPO_OBLIGACION_VALORES] [char] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[VALOR_OBLIGACION] [bit] NULL,
	[PARTIDA_GLOBAL] [bit] NULL,
	[SANCION_OMISION] [bit] NULL,
	[SANCION_INEXACTITUD] [bit] NULL,
	[SANCION_MORA] [bit] NULL,
	CONSTRAINT [FK_TIPOS_TITULO_TIPO_OBLIGACION_VALORES] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_OBLIGACION_VALORES] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[DOCUMENTO_TITULO]
(
	[ID_DOCUMENTO_TITULO] [int] IDENTITY (1,1) NOT NULL,
	[NOMBRE_DOCUMENTO] [varchar] (300) COLLATE Modern_Spanish_CI_AS NULL,
	[ID_TIPO_DOCUMENTAL] [int] NULL,
	CONSTRAINT [PK_DOCUMENTO_TITULO] PRIMARY KEY CLUSTERED
	(
		[ID_DOCUMENTO_TITULO] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[OBSERVACIONESDOC_CUMPLE_NOCUMPLE]
(
	[ID_OBSERVACIONESDOC] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_UNICO_MT] [bigint] NOT NULL,
	[ID_DOCUMENTO] [bigint] NOT NULL,
	[USUARIO] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[DESTINATARIO] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[FCHENVIO] [datetime] NOT NULL,
	[OBSERVACIONES] [varchar] (500) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[CUMPLE_NOCUMPLE] [bit] NOT NULL,
	CONSTRAINT [PK_ID_OBSERVACIONESDOC] PRIMARY KEY CLUSTERED
	(
		[ID_OBSERVACIONESDOC] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[FUENTE_DIRECCION]
(
	[ID_FUENTE_DIRECCION] [int] IDENTITY (1,1) NOT NULL,
	[DES_NOMBRE_FUENTE_DIRECCION] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[ind_estado] [bit] NULL CONSTRAINT [DF_FUENTE_DIRECCION_ind_estado] DEFAULT ((1)),
	CONSTRAINT [PK_ID_FUENTE_DIRECCION] PRIMARY KEY CLUSTERED
	(
		[ID_FUENTE_DIRECCION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[OBSERVACIONES_CUMPLE_NOCUMPLE]
(
	[ID_OBSERVACIONES] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_UNICO_MT] [bigint] NOT NULL,
	[USUARIO] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[FCHOBSERVACIONES] [datetime] NOT NULL,
	[OBSERVACIONES] [varchar] (500) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[DESTINATARIO] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[CUMPLE_NOCUMPLE] [bit] NOT NULL,
	CONSTRAINT [PK_ID_OBSERVACIONES] PRIMARY KEY CLUSTERED
	(
		[ID_OBSERVACIONES] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HISTORICO_CLASIFICACION_MANUAL]
(
	[ID_REGISTRO_CLASIFICACION_MANUAL] [int] IDENTITY (1,1) NOT NULL,
	[ID_EXPEDIENTE] [varchar] (12) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ID_USUARIO] [varchar] (4) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[FECHA] [datetime] NOT NULL,
	[PERSONA_JURIDICA] [bit] NULL,
	[PERSONA_NATURAL] [bit] NULL,
	[PERSONA_VIVA] [bit] NULL,
	[MATRICULA_MERCANTIL] [bit] NULL,
	[ID_MTD_DOCUMENTO] [bigint] NULL,
	[PROCESO_ESPECIAL] [bit] NULL,
	[TIPO_PROCESO] [int] NULL,
	[BENEFICIO_TRIBUTARIO] [bit] NULL,
	[PAGOS_DEUDOR] [bit] NULL,
	[NUMERO_RADICADO] [int] NULL,
	[OBSERVACIONES] [varchar] (1000) COLLATE Modern_Spanish_CI_AS NULL,
	[VALOR_MENOR_UVT] [bit] NULL,
	CONSTRAINT [PK_dbo.HISTORICO_CLASIFICACION_MANUAL] PRIMARY KEY CLUSTERED
	(
		[ID_REGISTRO_CLASIFICACION_MANUAL] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[MODULO]
(
	[pk_codigo] [int] IDENTITY (1,1) NOT NULL,
	[val_nombre] [nvarchar] (150) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[val_url] [nvarchar] (150) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[val_url_icono] [nvarchar] (150) COLLATE Modern_Spanish_CI_AS NULL,
	[ind_estado] [bit] NOT NULL,
	CONSTRAINT [PK_MODULO] PRIMARY KEY CLUSTERED
	(
		[pk_codigo] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HISTORICO_TAREA_ASIGNADA]
(
	[ID_HISTORICO_TAREA_ASIGNADA] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_TAREA_ASIGNADA] [bigint] NOT NULL,
	[VAL_USUARIO_NOMBRE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[COD_TIPO_OBJ] [int] NOT NULL,
	[ID_UNICO_TITULO] [bigint] NULL,
	[EFINROEXP_EXPEDIENTE] [varchar] (12) COLLATE Modern_Spanish_CI_AS NULL,
	[FEC_ACTUALIZACION] [datetime] NOT NULL,
	[FEC_ENTREGA_GESTOR] [datetime] NULL,
	[VAL_PRIORIDAD] [int] NOT NULL,
	[COD_ESTADO_OPERATIVO] [int] NOT NULL,
	[IND_TITULO_PRIORIZADO] [bit] NULL,
	[ID_TAREA_OBSERVACION] [int] NULL,
	CONSTRAINT [PK_ID_HISTORICO_TAREA_ASIGNADA] PRIMARY KEY CLUSTERED
	(
		[ID_HISTORICO_TAREA_ASIGNADA] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[MAESTROS_BANCOSBCK]
(
	[BAN_CODIGO] [varchar] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[BAN_NOMBRE] [varchar] (250) COLLATE Modern_Spanish_CI_AS NULL,
	[BAN_DIRECCION] [varchar] (250) COLLATE Modern_Spanish_CI_AS NULL,
	[BAN_TELEFONO] [varchar] (10) COLLATE Modern_Spanish_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[JUSTITICACION_CIERRE_TITULO]
(
	[ID_JUSTIFICACION_CIERRE_TIT] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_UNICO_MT] [bigint] NULL,
	[DESC_JUSTIFICACION_CIERRE] [varchar] (300) COLLATE Modern_Spanish_CI_AS NULL,
	[FEC_JUSTIFICACION_CIERRE] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[MAESTRO_TITULOS_FOR_NOTIFICACION]
(
	[ID_MAESTRO_TITULOS_FOR_NOTIFICACION] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_UNICO_MAESTRO_TITULOS] [bigint] NOT NULL,
	[FEC_NOTIFICACION] [datetime] NULL,
	[COD_FOR_NOT] [char] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[COD_TIPO_NOTIFICACION] [int] NOT NULL,
	CONSTRAINT [PK_MAESTRO_TITULOS_FOR_NOTIFICACION] PRIMARY KEY CLUSTERED
	(
		[ID_MAESTRO_TITULOS_FOR_NOTIFICACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ETAPA_PROCESAL]
(
	[ID_ETAPA_PROCESAL] [int] IDENTITY (1,1) NOT NULL,
	[codigo] [char] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[VAL_ETAPA_PROCESAL] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	CONSTRAINT [PK_ETAPA_PROCESAL] PRIMARY KEY CLUSTERED
	(
		[ID_ETAPA_PROCESAL] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SERIE]
(
	[Id_Serie] [numeric] (18,0) NOT NULL,
	[Id_Direccion_Oficina] [numeric] (18,0) NULL,
	[Codigo_Serie] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[Nombre_Serie] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[Activo] [varchar] (10) COLLATE Modern_Spanish_CI_AS NOT NULL,
	CONSTRAINT [PK_SERIE] PRIMARY KEY CLUSTERED
	(
		[Id_Serie] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[DICCIONARIO_AUDITORIA]
(
	[VALOR_ORIGINAL] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[VALOR_DESTINO] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ACTIVO] [bit] NOT NULL,
	CONSTRAINT [PK_DICCIONARIO_AUDITORIA] PRIMARY KEY CLUSTERED
	(
		[VALOR_ORIGINAL] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SUBSERIE]
(
	[Id_Subserie] [numeric] (18,0) NOT NULL,
	[Id_Serie] [numeric] (18,0) NOT NULL,
	[Codigo_Subserie] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[Nombre_Subserie] [varchar] (64) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[Activo] [varchar] (10) COLLATE Modern_Spanish_CI_AS NOT NULL,
	CONSTRAINT [PK_SUBSERIE] PRIMARY KEY CLUSTERED
	(
		[Id_Subserie] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPOS_CAUSALES_DEVOLUCION]
(
	[ID_TIPO_CAUSAL_DEVOLUCION] [int] NOT NULL,
	[VAL_TIPO_CAUSAL_DEVOLUCION] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL,
	CONSTRAINT [PK_TIPOS_CAUSALES_DEVOLUCION] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_CAUSAL_DEVOLUCION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPOS_CAUSALES_PRIORIZACION]
(
	[ID_TIPO_CAUSAL_PRIORIZACION] [int] NOT NULL,
	[VAL_TIPO_CAUSAL_PRIORIZACION] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL,
	CONSTRAINT [PK_TIPOS_CAUSALES_PRIORIZACION] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_CAUSAL_PRIORIZACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPO_HOMOLOGACION]
(
	[ID_TIPO_HOMOLOGACION] [int] NOT NULL,
	[NOMBRE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ACTIVO] [bit] NOT NULL,
	CONSTRAINT [PK_TIPO_HOMOLOGACION] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_HOMOLOGACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPO_DOCUMENTAL]
(
	[Id_Tipo_Documental] [numeric] (18,0) NOT NULL,
	[Codigo] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[Nombre] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[Id_Serie] [numeric] (18,0) NOT NULL,
	[Id_Subserie] [numeric] (18,0) NULL,
	CONSTRAINT [PK_TIPO_DOCUMENTAL] PRIMARY KEY CLUSTERED
	(
		[Id_Tipo_Documental] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPO_CARTERA]
(
	[ID_TIPO_CARTERA] [int] IDENTITY (1,1) NOT NULL,
	[DEC_TIPO_CARTERA] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	CONSTRAINT [PK_TIPO CARTERA] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_CARTERA] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPIFICACION_ERRORES]
(
	[ID_TIPIFICACION_ERROR] [int] NOT NULL,
	[VAL_TIPIFICACION_ERROR] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL,
	CONSTRAINT [PK_TIPIFICACION_ERRORES] PRIMARY KEY CLUSTERED
	(
		[ID_TIPIFICACION_ERROR] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPIFICACION_CUMPLE_NOCUMPLE]
(
	[ID_TIPIFICACION] [bigint] IDENTITY (1,1) NOT NULL,
	[DESCRIPCION_TIPIFICACION] [varchar] (300) COLLATE Modern_Spanish_CI_AS NULL,
	[HABILITADO] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[MAESTRO_HOMOLOGACION]
(
	[ID_HOMOLOGACION] [int] IDENTITY (1,1) NOT NULL,
	[ID_TIPO_HOMOLOGACION] [int] NOT NULL,
	[FUENTE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[DESTINO] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ACTIVO] [bit] NOT NULL,
	CONSTRAINT [PK_MAESTRO_HOMOLOGACION] PRIMARY KEY CLUSTERED
	(
		[ID_HOMOLOGACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[DIRECCION_OFICINA]
(
	[Id_Direccion_Oficina] [numeric] (18,0) NOT NULL,
	[Descripcion_Oficina] [varchar] (62) COLLATE Modern_Spanish_CI_AS NULL,
	[Activo] [varchar] (10) COLLATE Modern_Spanish_CI_AS NULL,
	[Id_Nivel] [numeric] (18,0) NULL,
	[Cod_Oficina] [varchar] (7) COLLATE Modern_Spanish_CI_AS NULL,
	CONSTRAINT [PK_DIRECCION_OFICINA] PRIMARY KEY CLUSTERED
	(
		[Id_Direccion_Oficina] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPOS_CAUSALES_REASIGNACION]
(
	[ID_TIPO_CAUSAL_REASIGNACION] [int] NOT NULL,
	[VAL_TIPO_CAUSAL_REASIGNACION] [varchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL,
	CONSTRAINT [PK_TIPOS_CAUSALES_REASIGNACION] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_CAUSAL_REASIGNACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[UVT]
(
	[IdUVT] [int] IDENTITY (1,1) NOT NULL,
	[Anio] [int] NULL,
	[Valor] [decimal] (18,0) NULL,
	[Activo] [bit] NULL,
	CONSTRAINT [PK_UVT] PRIMARY KEY CLUSTERED
	(
		[IdUVT] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ALMACENAMIENTO_TEMPORAL]
(
	[ID_ALMACENAMIENTO_TEMPORAL] [bigint] IDENTITY (1,1) NOT NULL,
	[JSON_OBJ] [varchar] (max) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ID_TAREA_ASIGNADA] [bigint] NULL,
	[FEC_ACTUALIZACION] [datetime] NOT NULL,
	CONSTRAINT [PK_ALMACENAMIENTO_TEMPORAL] PRIMARY KEY CLUSTERED
	(
		[ID_ALMACENAMIENTO_TEMPORAL] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TAREA_SOLICITUD]
(
	[ID_TAREA_SOLICITUD] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_TAREA_ASIGNADA] [bigint] NOT NULL,
	[VAL_USUARIO_SOLICITANTE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[VAL_USUARIO_APROBADOR] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[VAL_USUARIO_DESTINO] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[VAL_TIPO_SOLICITUD] [int] NOT NULL,
	[COD_SOLICITUD_CAMBIO_ESTADO] [bigint] NULL,
	[VAL_TIPOLOGIA] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ID_TAREA_OBSERVACION] [int] NULL,
	[IND_SOLICITUD_PROCESADA] [bit] NOT NULL CONSTRAINT [DF_TAREA_SOLICITUD_IND_SOLICITUD_PROCESADA] DEFAULT ((0)),
	[COD_ESTADO_SOLICITUD] [int] NULL,
	[FEC_SOLICITUD] [datetime] NULL,
	CONSTRAINT [PK_ID_TAREA_SOLICITUD ] PRIMARY KEY CLUSTERED
	(
		[ID_TAREA_SOLICITUD] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CONTEXTO_TRANSACCIONAL]
(
	[ID_CONTEXTO] [int] IDENTITY (1,1) NOT NULL,
	[ID_TX] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[FECHA_INICIO] [datetime] NOT NULL,
	[ID_DEF_PROCESO] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[NOMBRE_PROCESO] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[ID_USUARIO_APP] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ID_EMISOR] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[FECHA_CREACION] [datetime] NOT NULL,
	[ID_TITULO] [int] NOT NULL,
	[COD_TX] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	CONSTRAINT [PK_CONTEXTO_TRANSACCIONAL] PRIMARY KEY CLUSTERED
	(
		[ID_CONTEXTO] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TAREA_OBSERVACION]
(
	[COD_ID_TAREA_OBSERVACION] [int] IDENTITY (1,1) NOT NULL,
	[OBSERVACION] [nvarchar] (250) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[IND_ESTADO] [bit] NOT NULL,
	[FEC_CREACION] [datetime] NOT NULL,
	CONSTRAINT [PK_TAREA_OBSERVACION] PRIMARY KEY CLUSTERED
	(
		[COD_ID_TAREA_OBSERVACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CRITERIO_ORDEN_BANDEJA]
(
	[ID_CRITERIO_ORDEN_BANDEJA] [int] IDENTITY (1,1) NOT NULL,
	[VAL_USUARIO_NOMBRE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[FEC_ACTUALIZACION] [datetime] NOT NULL,
	[DEC_CRITERIO] [datetime] NOT NULL,
	[VAL_PRIORIDAD] [int] NOT NULL,
	[VAL_VALOR] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[VAL_ACTIVO] [bit] NOT NULL,
	[COD_TIPO_OBJ] [int] NOT NULL,
	CONSTRAINT [PK_ID_CRITERIO_ORDEN_BANDEJA] PRIMARY KEY CLUSTERED
	(
		[ID_CRITERIO_ORDEN_BANDEJA] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TAREA_ASIGNADA]
(
	[ID_TAREA_ASIGNADA] [bigint] IDENTITY (1,1) NOT NULL,
	[VAL_USUARIO_NOMBRE] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[COD_TIPO_OBJ] [int] NOT NULL,
	[ID_UNICO_TITULO] [bigint] NULL,
	[EFINROEXP_EXPEDIENTE] [varchar] (12) COLLATE Modern_Spanish_CI_AS NULL,
	[FEC_ACTUALIZACION] [datetime] NOT NULL,
	[FEC_ENTREGA_GESTOR] [datetime] NULL,
	[VAL_PRIORIDAD] [int] NOT NULL,
	[IND_TITULO_PRIORIZADO] [bit] NULL,
	[COD_ESTADO_OPERATIVO] [int] NOT NULL,
	[ID_TAREA_OBSERVACION] [int] NULL,
	CONSTRAINT [PK_TAREA_ASIGNADA] PRIMARY KEY CLUSTERED
	(
		[ID_TAREA_ASIGNADA] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TRIGGER [dbo].[TrgHISTORICO_TAREA_ASIGNADA] ON [dbo].[TAREA_ASIGNADA]
	AFTER INSERT,UPDATE
AS
	BEGIN
	INSERT INTO [dbo].[HISTORICO_TAREA_ASIGNADA] (ID_TAREA_ASIGNADA,VAL_USUARIO_NOMBRE,	COD_TIPO_OBJ,ID_UNICO_TITULO,EFINROEXP_EXPEDIENTE,FEC_ACTUALIZACION,FEC_ENTREGA_GESTOR,VAL_PRIORIDAD,COD_ESTADO_OPERATIVO, IND_TITULO_PRIORIZADO, ID_TAREA_OBSERVACION)
				SELECT 
						i.ID_TAREA_ASIGNADA,
						i.VAL_USUARIO_NOMBRE,
						i.COD_TIPO_OBJ,
						i.ID_UNICO_TITULO,
						i.EFINROEXP_EXPEDIENTE,
						i.FEC_ACTUALIZACION,
						i.FEC_ENTREGA_GESTOR,
						i.VAL_PRIORIDAD,
						i.COD_ESTADO_OPERATIVO,
						i.IND_TITULO_PRIORIZADO,
						i.ID_TAREA_OBSERVACION
				FROM inserted i
	IF(UPDATE(VAL_USUARIO_NOMBRE))
	BEGIN 
		UPDATE
				E
			SET
				E.EFIUSUASIG = U.codigo
			FROM
				inserted  AS T
				INNER JOIN EJEFISGLOBAL AS E
					ON T.EFINROEXP_EXPEDIENTE = E.EFINROEXP AND COD_TIPO_OBJ=5
				INNER JOIN USUARIOS U ON T.VAL_USUARIO_NOMBRE= U.[login]
			WHERE T.VAL_USUARIO_NOMBRE<>''
		 END 
	END
GO

CREATE TABLE [dbo].[TIPO_TITULO_PREGUNTA_CLASIFICACION]
(
	[ID_TIPO_TITULO_PREGUNTA_CLASIFICACION] [int] IDENTITY (1,1) NOT NULL,
	[VAL_PREGUNTA] [varchar] (200) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[COD_TIPO_OBLIGACION] [char] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[COD_TIPO_PREGUNTA] [int] NOT NULL,
	[VAL_ACTIVO] [bit] NOT NULL,
	[CODIGO] [char] (2) COLLATE Modern_Spanish_CI_AS NOT NULL,
	CONSTRAINT [PK_preguntas_clasificacion] PRIMARY KEY CLUSTERED
	(
		[ID_TIPO_TITULO_PREGUNTA_CLASIFICACION] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TIPIFICACION_CNC]
(
	[ID_TIPIFICACIONCNC] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_TIPIFICACION] [bigint] NOT NULL,
	[ID_UNICO_MT] [bigint] NOT NULL,
	[USUARIO] [varchar] (100) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[FCHOBSERVACIONES] [datetime] NOT NULL,
	CONSTRAINT [PK_ID_TIPIFICACIONCNC] PRIMARY KEY CLUSTERED
	(
		[ID_TIPIFICACIONCNC] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[MAESTRO_TITULOS_DOCUMENTOS]
(
	[ID_MAESTRO_TITULOS_DOCUMENTOS] [bigint] IDENTITY (1,1) NOT NULL,
	[ID_DOCUMENTO_TITULO] [int] NULL,
	[ID_MAESTRO_TITULO] [bigint] NULL,
	[DES_RUTA_DOCUMENTO] [varchar] (200) COLLATE Modern_Spanish_CI_AS NULL,
	[TIPO_RUTA] [int] NULL,
	[COD_GUID] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[COD_TIPO_DOCUMENTO_AO] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[NOM_DOC_AO] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[OBSERVA_LEGIBILIDAD] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[NUM_PAGINAS] [int] NULL,
	[IND_DOC_SINCRONIZADO] [bit] NULL,
	CONSTRAINT [PK_MAESTRO_TITULOS_DOCUMENTOS] PRIMARY KEY CLUSTERED
	(
		[ID_MAESTRO_TITULOS_DOCUMENTOS] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TempPERFILES]
(
	[codigo] [bigint] IDENTITY (1,1) NOT NULL,
	[nombre] [varchar] (50) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[val_ldap_group] [varchar] (150) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[ind_estado] [bit] NOT NULL

) ON [PRIMARY]
GO

SET IDENTITY_INSERT [dbo].[TempPERFILES] ON
INSERT INTO [dbo].[TempPERFILES] ([codigo],[nombre],[val_ldap_group],[ind_estado]) SELECT [codigo],ISNULL([nombre],''),'',0 FROM [dbo].[PERFILES]
SET IDENTITY_INSERT [dbo].[TempPERFILES] OFF
GO

DROP TABLE [dbo].[PERFILES]
GO
EXEC sp_rename N'[dbo].[TempPERFILES]',N'PERFILES', 'OBJECT'
GO


ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_capitalmulta]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisossalud]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_morasalud]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactossalud]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisospensiones]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_morapensiones]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactospensiones]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisosfondosolpen]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_morafondosolpen]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactosfondosolpen]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisosarl]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_moraarl]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactosarl]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisosicbf]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_moraicbf]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactosicbf]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisossena]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_morasena]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactossena]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_omisossubfamiliar]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_morasubfamiliar]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_inexactossubfamiliar]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_sentenciasjudiciales]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_cuotaspartesacum]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totalmultas]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totalomisos]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totalmora]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totalinexactos]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totalsentencias]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totaldeuda]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF_MAESTRO_TITULOS_totalrepartidor]
ALTER TABLE [dbo].[MAESTRO_TITULOS] DROP CONSTRAINT [DF__MAESTRO_T__estad__4048A6D1]

CREATE TABLE [dbo].[TempMAESTRO_TITULOS]
(
	[MT_nro_titulo] [varchar] (25) COLLATE Modern_Spanish_CI_AS NOT NULL,
	[MT_expediente] [varchar] (12) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_tipo_titulo] [char] (2) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_titulo_acumulado] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_fec_expedicion_titulo] [datetime] NULL,
	[MT_res_resuelve_reposicion] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_fec_expe_resolucion_reposicion] [datetime] NULL,
	[MT_reso_resu_apela_recon] [varchar] (50) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_fec_exp_reso_apela_recon] [datetime] NULL,
	[MT_fecha_ejecutoria] [datetime] NULL,
	[MT_fec_exi_liq] [datetime] NULL,
	[MT_fec_cad_presc] [datetime] NULL,
	[MT_proc_cobro_ini_prev] [bit] NULL,
	[MT_procedencia] [int] NULL,
	[capitalmulta] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_capitalmulta] DEFAULT ((0)),
	[omisossalud] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisossalud] DEFAULT ((0)),
	[morasalud] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_morasalud] DEFAULT ((0)),
	[inexactossalud] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactossalud] DEFAULT ((0)),
	[omisospensiones] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisospensiones] DEFAULT ((0)),
	[morapensiones] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_morapensiones] DEFAULT ((0)),
	[inexactospensiones] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactospensiones] DEFAULT ((0)),
	[omisosfondosolpen] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisosfondosolpen] DEFAULT ((0)),
	[morafondosolpen] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_morafondosolpen] DEFAULT ((0)),
	[inexactosfondosolpen] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactosfondosolpen] DEFAULT ((0)),
	[omisosarl] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisosarl] DEFAULT ((0)),
	[moraarl] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_moraarl] DEFAULT ((0)),
	[inexactosarl] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactosarl] DEFAULT ((0)),
	[omisosicbf] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisosicbf] DEFAULT ((0)),
	[moraicbf] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_moraicbf] DEFAULT ((0)),
	[inexactosicbf] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactosicbf] DEFAULT ((0)),
	[omisossena] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisossena] DEFAULT ((0)),
	[morasena] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_morasena] DEFAULT ((0)),
	[inexactossena] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactossena] DEFAULT ((0)),
	[omisossubfamiliar] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_omisossubfamiliar] DEFAULT ((0)),
	[morasubfamiliar] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_morasubfamiliar] DEFAULT ((0)),
	[inexactossubfamiliar] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_inexactossubfamiliar] DEFAULT ((0)),
	[sentenciasjudiciales] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_sentenciasjudiciales] DEFAULT ((0)),
	[cuotaspartesacum] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_cuotaspartesacum] DEFAULT ((0)),
	[totalmultas] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totalmultas] DEFAULT ((0)),
	[totalomisos] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totalomisos] DEFAULT ((0)),
	[totalmora] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totalmora] DEFAULT ((0)),
	[totalinexactos] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totalinexactos] DEFAULT ((0)),
	[totalsentencias] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totalsentencias] DEFAULT ((0)),
	[totaldeuda] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totaldeuda] DEFAULT ((0)),
	[NumMemoDev] [varchar] (20) COLLATE Modern_Spanish_CI_AS NULL,
	[FecMemoDev] [datetime] NULL,
	[CausalDevol] [int] NULL,
	[ObsDevol] [varchar] (max) COLLATE Modern_Spanish_CI_AS NULL,
	[totalrepartidor] [float] NULL CONSTRAINT [DF_MAESTRO_TITULOS_totalrepartidor] DEFAULT ((0)),
	[estado] [int] NULL CONSTRAINT [DF__MAESTRO_T__estad__4048A6D1] DEFAULT ((1)),
	[idunico] [bigint] IDENTITY (1,1) NOT NULL,
	[MT_totalSancion] [float] NULL,
	[MT_tiposentencia] [char] (1) COLLATE Modern_Spanish_CI_AS NULL,
	[revocatoria] [varchar] (1) COLLATE Modern_Spanish_CI_AS NULL,
	[nroResolRevoca] [int] NULL,
	[fechaRevoca] [date] NULL,
	[valorRevoca] [float] NULL,
	[MT_valor_obligacion] [float] NULL,
	[MT_partida_global] [float] NULL,
	[MT_sancion_omision] [float] NULL,
	[MT_sancion_mora] [float] NULL,
	[MT_sancion_inexactitud] [float] NULL,
	[MT_total_obligacion] [float] NULL,
	[MT_total_partida_global] [float] NULL,
	[Automatico] [bit] NULL,
	[NoExpedienteOrigen] [varchar] (30) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_fec_notificacion_titulo] [datetime] NULL,
	[MT_for_notificacion_titulo] [char] (2) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_fec_not_reso_resu_reposicion] [datetime] NULL,
	[MT_for_not_reso_resu_reposicion] [char] (2) COLLATE Modern_Spanish_CI_AS NULL,
	[MT_fec_not_reso_apela_recon] [datetime] NULL,
	[MT_for_not_reso_apela_recon] [char] (2) COLLATE Modern_Spanish_CI_AS NULL

) ON [PRIMARY]
GO

SET IDENTITY_INSERT [dbo].[TempMAESTRO_TITULOS] ON
INSERT INTO [dbo].[TempMAESTRO_TITULOS] ([MT_nro_titulo],[MT_expediente],[MT_tipo_titulo],[MT_titulo_acumulado],[MT_fec_expedicion_titulo],[MT_res_resuelve_reposicion],[MT_fec_expe_resolucion_reposicion],[MT_reso_resu_apela_recon],[MT_fec_exp_reso_apela_recon],[MT_fecha_ejecutoria],[MT_fec_exi_liq],[MT_fec_cad_presc],[MT_proc_cobro_ini_prev],[MT_procedencia],[capitalmulta],[omisossalud],[morasalud],[inexactossalud],[omisospensiones],[morapensiones],[inexactospensiones],[omisosfondosolpen],[morafondosolpen],[inexactosfondosolpen],[omisosarl],[moraarl],[inexactosarl],[omisosicbf],[moraicbf],[inexactosicbf],[omisossena],[morasena],[inexactossena],[omisossubfamiliar],[morasubfamiliar],[inexactossubfamiliar],[sentenciasjudiciales],[cuotaspartesacum],[totalmultas],[totalomisos],[totalmora],[totalinexactos],[totalsentencias],[totaldeuda],[NumMemoDev],[FecMemoDev],[CausalDevol],[ObsDevol],[totalrepartidor],[estado],[idunico],[MT_totalSancion],[MT_tiposentencia],[revocatoria],[nroResolRevoca],[fechaRevoca],[valorRevoca],[MT_valor_obligacion],[MT_partida_global],[MT_sancion_omision],[MT_sancion_mora],[MT_sancion_inexactitud],[MT_total_obligacion],[MT_total_partida_global],[MT_fec_notificacion_titulo],[MT_for_notificacion_titulo],[MT_fec_not_reso_resu_reposicion],[MT_for_not_reso_resu_reposicion],[MT_fec_not_reso_apela_recon],[MT_for_not_reso_apela_recon]) SELECT [MT_nro_titulo],[MT_expediente],[MT_tipo_titulo],[MT_titulo_acumulado],[MT_fec_expedicion_titulo],[MT_res_resuelve_reposicion],[MT_fec_expe_resolucion_reposicion],[MT_reso_resu_apela_recon],[MT_fec_exp_reso_apela_recon],[MT_fecha_ejecutoria],[MT_fec_exi_liq],[MT_fec_cad_presc],[MT_proc_cobro_ini_prev],[MT_procedencia],[capitalmulta],[omisossalud],[morasalud],[inexactossalud],[omisospensiones],[morapensiones],[inexactospensiones],[omisosfondosolpen],[morafondosolpen],[inexactosfondosolpen],[omisosarl],[moraarl],[inexactosarl],[omisosicbf],[moraicbf],[inexactosicbf],[omisossena],[morasena],[inexactossena],[omisossubfamiliar],[morasubfamiliar],[inexactossubfamiliar],[sentenciasjudiciales],[cuotaspartesacum],[totalmultas],[totalomisos],[totalmora],[totalinexactos],[totalsentencias],[totaldeuda],[NumMemoDev],[FecMemoDev],[CausalDevol],[ObsDevol],[totalrepartidor],[estado],[idunico],[MT_totalSancion],[MT_tiposentencia],[revocatoria],[nroResolRevoca],[fechaRevoca],[valorRevoca],[MT_valor_obligacion],[MT_partida_global],[MT_sancion_omision],[MT_sancion_mora],[MT_sancion_inexactitud],[MT_total_obligacion],[MT_total_partida_global],[MT_fec_notificacion_titulo],[MT_for_notificacion_titulo],[MT_fec_not_reso_resu_reposicion],[MT_for_not_reso_resu_reposicion],[MT_fec_not_reso_apela_recon],[MT_for_not_reso_apela_recon] FROM [dbo].[MAESTRO_TITULOS]
SET IDENTITY_INSERT [dbo].[TempMAESTRO_TITULOS] OFF
GO

DROP TABLE [dbo].[MAESTRO_TITULOS]
GO
EXEC sp_rename N'[dbo].[TempMAESTRO_TITULOS]',N'MAESTRO_TITULOS', 'OBJECT'
GO


CREATE FUNCTION [dbo].[SplitDatos] (
      @InputString                  VARCHAR(8000),
      @Delimiter                    VARCHAR(50)
)

RETURNS @Items TABLE (
      Item                          VARCHAR(8000)
)

AS
BEGIN
	 DECLARE @Item                 VARCHAR(8000)
      DECLARE @ItemList       VARCHAR(8000)
      DECLARE @DelimIndex     INT
      IF @Delimiter = ' '
      BEGIN
            SET @Delimiter = ','
            SET @InputString = REPLACE(@InputString, ' ', @Delimiter)
      END

      IF (@Delimiter IS NULL OR @Delimiter = '')
            SET @Delimiter = ','

      SET @ItemList = @InputString
      SET @DelimIndex = CHARINDEX(@Delimiter, @ItemList, 0)
      WHILE (@DelimIndex != 0)
      BEGIN
            SET @Item = SUBSTRING(@ItemList, 0, @DelimIndex)
            INSERT INTO @Items VALUES (@Item)

            -- Set @ItemList = @ItemList minus one less item
            SET @ItemList = SUBSTRING(@ItemList, @DelimIndex+1, LEN(@ItemList)-@DelimIndex)
            SET @DelimIndex = CHARINDEX(@Delimiter, @ItemList, 0)
      END -- End WHILE

      IF @Item IS NOT NULL -- At least one delimiter was encountered in @InputString
      BEGIN
            SET @Item = @ItemList
            INSERT INTO @Items VALUES (@Item)
      END

      -- No delimiters were encountered in @InputString, so just return @InputString
      ELSE INSERT INTO @Items VALUES (@InputString)

      RETURN

END -- End Function
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] ADD CONSTRAINT [PK_MAESTRO_TITULOS] PRIMARY KEY CLUSTERED
	(
		[idunico] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[PERFILES] ADD CONSTRAINT [PK_roles] PRIMARY KEY CLUSTERED
	(
		[codigo] ASC
	) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ALMACENAMIENTO_TEMPORAL] ADD CONSTRAINT [FK_ALMACENAMIENTO_TEMPORAL_TAREA_ASIGNADA] FOREIGN KEY
	(
		[ID_TAREA_ASIGNADA]
	)
	REFERENCES [dbo].[TAREA_ASIGNADA]
	(
		[ID_TAREA_ASIGNADA]
	)
GO

ALTER TABLE [dbo].[TAREA_SOLICITUD] ADD CONSTRAINT [FK_SOLICITUDES_CAMBIOESTADO_idunico] FOREIGN KEY
	(
		[COD_SOLICITUD_CAMBIO_ESTADO]
	)
	REFERENCES [dbo].[SOLICITUDES_CAMBIOESTADO]
	(
		[idunico]
	)
GO

ALTER TABLE [dbo].[TAREA_SOLICITUD] ADD CONSTRAINT [FK_TAREA_ASIGNADA_ID_TAREA_ASIGNADA] FOREIGN KEY
	(
		[ID_TAREA_ASIGNADA]
	)
	REFERENCES [dbo].[TAREA_ASIGNADA]
	(
		[ID_TAREA_ASIGNADA]
	)
GO

ALTER TABLE [dbo].[TAREA_SOLICITUD] ADD CONSTRAINT [FK_TAREA_SOLICITUD_SOLICITUDES_CAMBIOESTADO] FOREIGN KEY
	(
		[COD_SOLICITUD_CAMBIO_ESTADO]
	)
	REFERENCES [dbo].[SOLICITUDES_CAMBIOESTADO]
	(
		[idunico]
	)
GO

ALTER TABLE [dbo].[TAREA_SOLICITUD] ADD CONSTRAINT [FK_TAREA_SOLICITUD_TAREA_OBSERVACION] FOREIGN KEY
	(
		[ID_TAREA_OBSERVACION]
	)
	REFERENCES [dbo].[TAREA_OBSERVACION]
	(
		[COD_ID_TAREA_OBSERVACION]
	)
GO

ALTER TABLE [dbo].[MAESTRO_TITULOS_DOCUMENTOS] ADD CONSTRAINT [FK_ID_DOCUMENTO_TITULO_MAESTRO_TITULOS_ID_DOCUMENTO_TITULO] FOREIGN KEY
	(
		[ID_DOCUMENTO_TITULO]
	)
	REFERENCES [dbo].[DOCUMENTO_TITULO]
	(
		[ID_DOCUMENTO_TITULO]
	)
GO

ALTER TABLE [dbo].[MAESTRO_TITULOS_DOCUMENTOS] ADD CONSTRAINT [FK_ID_DOCUMENTO_TITULO_MAESTRO_TITULOS_ID_MAESTRO_TITULO] FOREIGN KEY
	(
		[ID_MAESTRO_TITULO]
	)
	REFERENCES [dbo].[MAESTRO_TITULOS]
	(
		[idunico]
	)
GO

ALTER TABLE [dbo].[TIPO_DOCUMENTAL] ADD CONSTRAINT [FK_TIPO_DOCUMENTAL_SERIE] FOREIGN KEY
	(
		[Id_Serie]
	)
	REFERENCES [dbo].[SERIE]
	(
		[Id_Serie]
	) ON UPDATE CASCADE ON DELETE CASCADE
GO

ALTER TABLE [dbo].[TIPO_DOCUMENTAL] ADD CONSTRAINT [FK_TIPO_DOCUMENTAL_SUBSERIE] FOREIGN KEY
	(
		[Id_Subserie]
	)
	REFERENCES [dbo].[SUBSERIE]
	(
		[Id_Subserie]
	)
GO

ALTER TABLE [dbo].[TIPO_TITULO_PREGUNTA_CLASIFICACION] ADD CONSTRAINT [FK_preguntas_clasificacion_TIPOS_TITULO] FOREIGN KEY
	(
		[CODIGO]
	)
	REFERENCES [dbo].[TIPOS_TITULO]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[MAESTRO_HOMOLOGACION] ADD CONSTRAINT [FK_MAESTRO_HOMOLOGACION_TIPO_HOMOLOGACION] FOREIGN KEY
	(
		[ID_TIPO_HOMOLOGACION]
	)
	REFERENCES [dbo].[TIPO_HOMOLOGACION]
	(
		[ID_TIPO_HOMOLOGACION]
	)
GO

ALTER TABLE [dbo].[TAREA_ASIGNADA] ADD CONSTRAINT [FK_TAREA_ASIGNADA_TAREA_OBSERVACION] FOREIGN KEY
	(
		[ID_TAREA_OBSERVACION]
	)
	REFERENCES [dbo].[TAREA_OBSERVACION]
	(
		[COD_ID_TAREA_OBSERVACION]
	)
GO

ALTER TABLE [dbo].[SUBSERIE] ADD CONSTRAINT [FK_SUBSERIE_SERIE] FOREIGN KEY
	(
		[Id_Serie]
	)
	REFERENCES [dbo].[SERIE]
	(
		[Id_Serie]
	) ON UPDATE CASCADE ON DELETE CASCADE
GO

ALTER TABLE [dbo].[HISTORICO_CLASIFICACION_MANUAL] ADD CONSTRAINT [FK_dbo.HISTORICO_CLASIFICACION_MANUAL_EJEFISGLOBAL] FOREIGN KEY
	(
		[ID_EXPEDIENTE]
	)
	REFERENCES [dbo].[EJEFISGLOBAL]
	(
		[EFINROEXP]
	)
GO

ALTER TABLE [dbo].[HISTORICO_CLASIFICACION_MANUAL] ADD CONSTRAINT [FK_dbo.HISTORICO_CLASIFICACION_MANUAL_MAESTRO_TITULOS_DOCUMENTOS] FOREIGN KEY
	(
		[ID_MTD_DOCUMENTO]
	)
	REFERENCES [dbo].[MAESTRO_TITULOS_DOCUMENTOS]
	(
		[ID_MAESTRO_TITULOS_DOCUMENTOS]
	)
GO

ALTER TABLE [dbo].[HISTORICO_CLASIFICACION_MANUAL] ADD CONSTRAINT [FK_dbo.HISTORICO_CLASIFICACION_MANUAL_USUARIOS] FOREIGN KEY
	(
		[ID_USUARIO]
	)
	REFERENCES [dbo].[USUARIOS]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[ETAPA_PROCESAL] ADD CONSTRAINT [FK_ETAPA_PROCESAL_ESTADOS_PROCESO] FOREIGN KEY
	(
		[codigo]
	)
	REFERENCES [dbo].[ESTADOS_PROCESO]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[ESTADOS_PROCESO_GESTOR] ADD CONSTRAINT [FK_ESTADOS_PROCESO_GESTOR_COD_ESTADOS_PROESO] FOREIGN KEY
	(
		[COD_ID_ESTADOS_PROCESOS]
	)
	REFERENCES [dbo].[ESTADOS_PROCESO]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[PAGINA] ADD CONSTRAINT [FK_PAGINA_FK_PADRE] FOREIGN KEY
	(
		[fk_padre]
	)
	REFERENCES [dbo].[PAGINA]
	(
		[pk_codigo]
	)
GO

ALTER TABLE [dbo].[MAESTRO_TITULOS_FOR_NOTIFICACION] ADD CONSTRAINT [FK_MAESTRO_TITULOS_FOR_NOTIFICACION_FORMAS_NOTIFICACION] FOREIGN KEY
	(
		[COD_FOR_NOT]
	)
	REFERENCES [dbo].[FORMAS_NOTIFICACION]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[MAESTRO_TITULOS_FOR_NOTIFICACION] ADD CONSTRAINT [FK_MAESTRO_TITULOS_FOR_NOTIFICACION_MAESTRO_TITULOS] FOREIGN KEY
	(
		[ID_UNICO_MAESTRO_TITULOS]
	)
	REFERENCES [dbo].[MAESTRO_TITULOS]
	(
		[idunico]
	)
GO

ALTER TABLE [dbo].[PERFIL_MODULO] ADD CONSTRAINT [FK_PERFIL_MODULO_MODULO_FK_MODULO_ID] FOREIGN KEY
	(
		[fk_modulo_id]
	)
	REFERENCES [dbo].[MODULO]
	(
		[pk_codigo]
	)
GO

ALTER TABLE [dbo].[PERFIL_MODULO] ADD CONSTRAINT [FK_PERFIL_MODULOS_PERFILES_FK_PERFIL_ID] FOREIGN KEY
	(
		[fk_perfil_id]
	)
	REFERENCES [dbo].[PERFILES]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[SERIE] ADD CONSTRAINT [FK_SERIE_DIRECCION_OFICINA] FOREIGN KEY
	(
		[Id_Direccion_Oficina]
	)
	REFERENCES [dbo].[DIRECCION_OFICINA]
	(
		[Id_Direccion_Oficina]
	) ON UPDATE CASCADE ON DELETE CASCADE
GO

ALTER TABLE [dbo].[RESPUESTA_PREGUNTA_CLASIFICACION] ADD CONSTRAINT [FK_RESPUESTAS_PREGUNTAS_CLASIFICACION_MAESTRO_TITULOS] FOREIGN KEY
	(
		[ID_TITULO]
	)
	REFERENCES [dbo].[MAESTRO_TITULOS]
	(
		[idunico]
	)
GO

ALTER TABLE [dbo].[RESPUESTA_PREGUNTA_CLASIFICACION] ADD CONSTRAINT [FK_RESPUESTAS_PREGUNTAS_CLASIFICACION_PREGUNTA_CLASIFICACION] FOREIGN KEY
	(
		[ID_PREGUNTA]
	)
	REFERENCES [dbo].[TIPO_TITULO_PREGUNTA_CLASIFICACION]
	(
		[ID_TIPO_TITULO_PREGUNTA_CLASIFICACION]
	)
GO

ALTER TABLE [dbo].[DOCUMENTO_TITULO_TIPO_TITULO] ADD CONSTRAINT [FK_COD_TIPO_DOCUMENTO] FOREIGN KEY
	(
		[ID_DOCUMENTO_TITULO]
	)
	REFERENCES [dbo].[DOCUMENTO_TITULO]
	(
		[ID_DOCUMENTO_TITULO]
	)
GO

ALTER TABLE [dbo].[DOCUMENTO_TITULO_TIPO_TITULO] ADD CONSTRAINT [FK_COD_TIPO_TITULO] FOREIGN KEY
	(
		[COD_TIPO_TITULO]
	)
	REFERENCES [dbo].[TIPOS_TITULO]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[DOCUMENTO_TITULO_TIPO_TITULO] ADD CONSTRAINT [FK_ID_DOCUMENTO_TITULO] FOREIGN KEY
	(
		[ID_DOCUMENTO_TITULO]
	)
	REFERENCES [dbo].[DOCUMENTO_TITULO]
	(
		[ID_DOCUMENTO_TITULO]
	)
GO

ALTER TABLE [dbo].[PERFIL_PAGINA] ADD CONSTRAINT [FK_PERFIL_PAGINA_PERFILES_FK_PAGINA_ID] FOREIGN KEY
	(
		[fk_pagina_id]
	)
	REFERENCES [dbo].[PAGINA]
	(
		[pk_codigo]
	)
GO

ALTER TABLE [dbo].[PERFIL_PAGINA] ADD CONSTRAINT [FK_PERFIL_PAGINA_PERFILES_FK_PERFIL_ID] FOREIGN KEY
	(
		[fk_perfil_id]
	)
	REFERENCES [dbo].[PERFILES]
	(
		[codigo]
	)
GO

ALTER TABLE [dbo].[MAESTRO_TITULOS] ADD CONSTRAINT [FK_MAESTRO_TITULOS_EJEFISGLOBAL] FOREIGN KEY
	(
		[MT_expediente]
	)
	REFERENCES [dbo].[EJEFISGLOBAL]
	(
		[EFINROEXP]
	)
GO
ALTER TABLE [dbo].[CAMBIOS_ESTADO] ADD CONSTRAINT [FK_CAMBIOS_ESTADO_ESTADO_OPERATIVO] FOREIGN KEY
	(
		[estadooperativo]
	)
	REFERENCES [dbo].[ESTADO_OPERATIVO]
	(
		[ID_ESTADO_OPERATIVOS]
	)
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] ADD CONSTRAINT [FK_MAESTRO_TITULOS_TIPOS_TITULO] FOREIGN KEY
	(
		[MT_tipo_titulo]
	)
	REFERENCES [dbo].[TIPOS_TITULO]
	(
		[codigo]
	)
GO
ALTER TABLE [dbo].[MAESTRO_TITULOS] ADD CONSTRAINT [FK_MAESTRO_TITULOS_PROCEDENCIA_TITULOS] FOREIGN KEY
	(
		[MT_procedencia]
	)
	REFERENCES [dbo].[PROCEDENCIA_TITULOS]
	(
		[codigo]
	)
GO
ALTER TABLE [dbo].[CAMBIOS_ESTADO] ADD CONSTRAINT [FK_CAMBIOS_ESTADO_ETAPA_PROCESAL] FOREIGN KEY
	(
		[etapaprocesal]
	)
	REFERENCES [dbo].[ETAPA_PROCESAL]
	(
		[ID_ETAPA_PROCESAL]
	)
GO
ALTER TABLE [dbo].[TIPOS_TITULO] ADD CONSTRAINT [FK_TIPOS_TITULO_TIPO CARTERA] FOREIGN KEY
	(
		[ID_TIPO_CARTERA]
	)
	REFERENCES [dbo].[TIPO_CARTERA]
	(
		[ID_TIPO_CARTERA]
	)
GO
ALTER TABLE [dbo].[TIPOS_TITULO] ADD CONSTRAINT [FK_PROCEDENCIA_TITULOS_CODIGO] FOREIGN KEY
	(
		[COD_PROCEDENCIA]
	)
	REFERENCES [dbo].[PROCEDENCIA_TITULOS]
	(
		[codigo]
	)
GO
-- =============================================
-- Author: Luis Mario Lenis Ojeda
-- Create date: 30/11/2018
-- Description: INSERTA LA SOLICITUD DE CAMBIO DE ESTADO
-- =============================================


CREATE PROCEDURE [dbo].[SP_InsertaSolicitudCE] 

   @ID_TAREA_ASIGNADA BIGINT,
   @VAL_USUARIO_SOLICITANTE VARCHAR(50),
   @VAL_USUARIO_APROBADOR VARCHAR(50),
   @VAL_USUARIO_DESTINO VARCHAR(50),
   @VAL_TIPO_SOLICITUD int,
   @COD_SOLICITUD_CAMBIO_ESTADO BIGINT,
   @VAL_TIPOLOGIA VARCHAR(50)

      AS
   
BEGIN                     
      
SET NOCOUNT ON   


INSERT INTO [dbo].[TAREA_SOLICITUD]
           ([ID_TAREA_ASIGNADA]
           ,[VAL_USUARIO_SOLICITANTE]
           ,[VAL_USUARIO_APROBADOR]
           ,[VAL_USUARIO_DESTINO]
           ,[VAL_TIPO_SOLICITUD]
		   ,[COD_SOLICITUD_CAMBIO_ESTADO]
		   ,[VAL_TIPOLOGIA])

     VALUES
        ( @ID_TAREA_ASIGNADA,@VAL_USUARIO_SOLICITANTE,@VAL_USUARIO_APROBADOR,@VAL_USUARIO_DESTINO,@VAL_TIPO_SOLICITUD, @COD_SOLICITUD_CAMBIO_ESTADO,@VAL_TIPOLOGIA)
END
GO
-- =============================================
-- Author:		OSCAR ORLANDO DIAZ
-- Create date: 2018-12-03
-- Description:	Obtiene todos los documentos titulo tipo
-- =============================================
CREATE PROCEDURE [dbo].[SP_DOCUMENTOS_TITULO_TIPO_TITULO]

AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
SELECT
	D.ID_DOCUMENTO_TITULO
   ,DT.NOMBRE_DOCUMENTO AS NOMBRE_DOCUMENTO_TITULO
   ,D.COD_TIPO_TITULO
   ,T.nombre AS NOMBRE_TIPO_TITULO
   ,D.VAL_ESTADO
   ,D.VAL_OBLIGATORIO
FROM DOCUMENTO_TITULO_TIPO_TITULO D
INNER JOIN DOCUMENTO_TITULO DT
	ON DT.ID_DOCUMENTO_TITULO = D.ID_DOCUMENTO_TITULO
INNER JOIN TIPOS_TITULO T
	ON T.codigo = D.COD_TIPO_TITULO
END
GO
CREATE PROCEDURE [dbo].[SP_ALMACENAMIENTO_TEMPORAL_POR_IDTAREA]
	@ID_TAREA_ASIGNADA AS BIGINT
AS
	SELECT  T.[ID_ALMACENAMIENTO_TEMPORAL] ,
			T.[JSON_OBJ] ,
			T.[ID_TAREA_ASIGNADA],
			T.[FEC_ACTUALIZACION]		
	FROM ALMACENAMIENTO_TEMPORAL T	
	WHERE T.[ID_TAREA_ASIGNADA] = @ID_TAREA_ASIGNADA
GO
CREATE PROCEDURE [dbo].[SP_TIPOS_TITULO_POR_CARTERA]
	@ID_TIPO_CARTERA AS INT
AS
	SELECT TT.codigo,TT.nombre,TT.COD_PROCEDENCIA,TT.ID_TIPO_CARTERA FROM TIPOS_TITULO TT 	
	WHERE TT.ID_TIPO_CARTERA = @ID_TIPO_CARTERA
GO
CREATE PROCEDURE [dbo].[SP_TIPOS_CARTERA_POR_PROCEDENCIA]
	@COD_PROCEDENCIA AS INT
AS
	SELECT DISTINCT TC.ID_TIPO_CARTERA,TC.DEC_TIPO_CARTERA FROM TIPO_CARTERA TC 
		INNER JOIN TIPOS_TITULO TT ON TT.ID_TIPO_CARTERA = TC.ID_TIPO_CARTERA  
		INNER JOIN PROCEDENCIA_TITULOS PT ON  PT.codigO = TT.COD_PROCEDENCIA WHERE TT.COD_PROCEDENCIA = @COD_PROCEDENCIA
GO
CREATE PROCEDURE [dbo].[SP_TIPOS_AREA_ORIGEN]
AS
	SELECT P.codigo,P.nombre FROM PROCEDENCIA_TITULOS P
GO
CREATE PROCEDURE [dbo].[SP_DOMINIO_DETALLE_DOMINIOID]
	@ID_DOMINIO AS INT
AS
	SELECT  D.[ID_DOMINIO_DETALLE],
			D.[ID_DOMINIO],
			D.[VAL_NOMBRE],
			D.[DESC_DESCRIPCION],
			D.[VAL_VALOR]
	FROM DOMINIO_DETALLE D	
	WHERE D.ID_DOMINIO = @ID_DOMINIO
GO
-- =============================================
-- Author:		Stefanini - Oscar Diaz
-- Create date: 2018-11-7
-- Description:	Crea / actualiza el contexto transaccional
-- =============================================
CREATE PROCEDURE [dbo].[SP_CONTEXTO_TRANSACCIONAL]
@ID_TX varchar(50),
@FECHA_INICIO datetime,
@ID_DEF_PROCESO varchar(50),
@NOMBRE_PROCESO varchar(50),
@ID_USUARIO_APP varchar(50),
@ID_EMISOR varchar(50),
@ID_TITULO int,
@COD_TX varchar(50)
AS
BEGIN

SET NOCOUNT ON;
--Verificación de existencia
IF NOT EXISTS (SELECT TOP 1
		1
	FROM dbo.CONTEXTO_TRANSACCIONAL
	WHERE ID_TX = @ID_TX
	AND FECHA_INICIO = @FECHA_INICIO
	AND ID_DEF_PROCESO = @ID_DEF_PROCESO
	AND [NOMBRE_PROCESO] = @NOMBRE_PROCESO
	AND [ID_EMISOR] = @ID_EMISOR)
BEGIN

INSERT INTO [dbo].[CONTEXTO_TRANSACCIONAL] ([ID_TX]
, [FECHA_INICIO]
, [ID_DEF_PROCESO]
, [NOMBRE_PROCESO]
, [ID_USUARIO_APP]
, [ID_EMISOR]
, [FECHA_CREACION]
, [ID_TITULO]
,[COD_TX])
	VALUES (@ID_TX, @FECHA_INICIO, @ID_DEF_PROCESO, @NOMBRE_PROCESO, @ID_USUARIO_APP, @ID_EMISOR, GETDATE(), @ID_TITULO, @COD_TX)
END
ELSE
UPDATE [dbo].[CONTEXTO_TRANSACCIONAL]
   SET [ID_TX] = @ID_TX
      ,[FECHA_INICIO] = @FECHA_INICIO
      ,[ID_DEF_PROCESO] = @ID_DEF_PROCESO
      ,[NOMBRE_PROCESO] = @NOMBRE_PROCESO
      ,[ID_USUARIO_APP] = @ID_USUARIO_APP
      ,[ID_EMISOR] = @ID_EMISOR
      ,[ID_TITULO] = @ID_TITULO
	  ,COD_TX =  @COD_TX 
WHERE ID_TX = @ID_TX
	AND FECHA_INICIO = @FECHA_INICIO
	AND ID_DEF_PROCESO = @ID_DEF_PROCESO
	AND [NOMBRE_PROCESO] = @NOMBRE_PROCESO
	AND [ID_EMISOR] = @ID_EMISOR



END
GO
/*
Nombre		:	SP_TAREA_ASIGNADA_INGRESAR
Descripcion	:	Se crea un registro

Historia	:
VERSION 	FECHA 			AUTOR 					DESCRIPCION
1.00.000	2018/11/19		OSCAR GONZALEZ 			CREACION
*/

CREATE PROCEDURE [dbo].[SP_TAREA_ASIGNADA_INGRESAR]
	@VAL_USUARIO_NOMBRE AS varchar(50),
	@COD_TIPO_OBJ AS int,
	@ID_UNICO_TITULO AS bigint = NULL,
	@EFINROEXP_EXPEDIENTE AS varchar(12) = NULL,
	@VAL_PRIORIDAD AS int,
	@COD_ESTADO_OPERATIVO AS int 
AS
	 INSERT INTO [dbo].[TAREA_ASIGNADA]
           (VAL_USUARIO_NOMBRE
           ,COD_TIPO_OBJ
           ,ID_UNICO_TITULO
           ,EFINROEXP_EXPEDIENTE
           ,FEC_ACTUALIZACION
           ,VAL_PRIORIDAD
           ,COD_ESTADO_OPERATIVO)
     VALUES
	 (@VAL_USUARIO_NOMBRE,@COD_TIPO_OBJ,ISNULL(@ID_UNICO_TITULO,NULL),ISNULL(@EFINROEXP_EXPEDIENTE,NULL),GETDATE(),@VAL_PRIORIDAD,@COD_ESTADO_OPERATIVO)
	
	SELECT * FROM TAREA_ASIGNADA WHERE ID_TAREA_ASIGNADA= SCOPE_IDENTITY()
GO
-- =============================================
-- Author:		<Luis Mario Lenis Ojeda>
-- Create date: <27-Nov-2018>
-- Description:	<Designacion de Usuarios Gestores>
-- =============================================
CREATE PROCEDURE [dbo].[ASIGNACION_GESTORES_EXPEDIENTES] 
	-- Add the parameters for the stored procedure here
	@USERS AS VARCHAR(200)
AS
BEGIN
 -- EXEC [dbo].[ASIGNACION_GESTORES_EXPEDIENTES] 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	UPDATE USUARIOS  SET ind_gestor_expedientes=1 WHERE login=@USERS

END
GO
CREATE PROCEDURE [dbo].[SP_ConsultarUsuarios]

AS
	SELECT * FROM USUARIOS
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 21/11/2018
-- Description: INSERTA LA TIPIFICACION DE CUMPLE NO CUMPLE
-- =============================================


CREATE PROCEDURE [dbo].[SP_InsertaTipificacionCNC] 

   @ID_TIPIFICACION BIGINT,
   @ID_UNICO_MT BIGINT,
   @USUARIO VARCHAR(100)

      AS
   
BEGIN                     
      
SET NOCOUNT ON  
 
INSERT INTO [dbo].[TIPIFICACION_CNC]
           ([ID_TIPIFICACION]
           ,[ID_UNICO_MT]
           ,[USUARIO]
           ,[FCHOBSERVACIONES])
     VALUES
          (@ID_TIPIFICACION,@ID_UNICO_MT,@USUARIO,GETDATE())
END
GO
CREATE PROCEDURE [dbo].[sp_getRepartidor]  
	@EFINROEXP	VARCHAR(12)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT	repartidor 
	FROM	CAMBIOS_ESTADO 
	WHERE	idunico IN (SELECT MAX(idunico) FROM CAMBIOS_ESTADO WHERE NroExp = @EFINROEXP)
END
GO
-- =============================================
-- Author:		Edward Fabian Hernández Nieves
-- Create date: 2019-01-11
-- Description:	Verifica si el usuario pasado como parámetro es un usuario de tercer nivel
-- EXEC SP_VERIFICA_SI_USUARIO_ES_TERCER_NIVEL 'LGONZALEZC'
-- =============================================
CREATE PROCEDURE [dbo].[SP_VERIFICA_SI_USUARIO_ES_TERCER_NIVEL]
	@USULOG NVARCHAR(20)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT *
	FROM USUARIOS 
	WHERE codigo IN(
		SELECT superior FROM USUARIOS 
		where codigo IN(
			SELECT DISTINCT superior FROM USUARIOS 
			where codigo IN(
				SELECT DISTINCT superior FROM USUARIOS
			)
		)
	)
	AND login = @USULOG
END
GO
CREATE PROCEDURE [dbo].[sp_getSuperior]  
	@codigo varchar(4)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT	codigo, nombre 
	FROM	usuarios 
	WHERE	codigo = (SELECT superior FROM usuarios WHERE codigo = @codigo); 
END
GO
-- =============================================
-- Author:		Edward Fabian Hernández Nieves
-- Create date: 2019-01-11
-- Description:	Consulta todas las solicitudes de priorización para ser aprobadas
-- EXEC SP_OBTENER_SOLICITUDES_POR_TIPO_SOLICITUD 'LGONZALEZC', 8, '', '', '', 0
-- =============================================
CREATE PROCEDURE [dbo].[SP_OBTENER_SOLICITUDES_POR_TIPO_SOLICITUD]
	@IdTipoSolicitud INT, --Sacdo de la tabla DOMINIO_DETALLE con el ID_COMINIO = 3
	@LoginUsuarioSuperior NVARCHAR(20) = '', -- Login del usuario superior (se realiza con el login para tener en cuenta LDAP)
	@EFINROEXP AS NVARCHAR(20) = '',
	@ID_UNICO_TITULO AS NVARCHAR(20) = '',
	@LoginUsuarioSolicitante AS NVARCHAR(20) = '',
	@EstadoSolicitud AS INT = 0
AS
BEGIN
	SET NOCOUNT ON; 

	--Se actualiza el estado de la solicitud a en espera a todas las solicitudes con este campo en nulo
	UPDATE TAREA_SOLICITUD SET COD_ESTADO_SOLICITUD = 16 WHERE COD_ESTADO_SOLICITUD IS NULL

	-- Se obtiene el código del usuario para buscar por código y por login
	DECLARE @codigoUsuarioSuperior NVARCHAR(20) = (SELECT codigo FROM USUARIOS WHERE login = @LoginUsuarioSuperior)

	SELECT
		TA.ID_TAREA_ASIGNADA,
		TS.ID_TAREA_SOLICITUD,
		TA.EFINROEXP_EXPEDIENTE AS EFINROEXP, -- Número de expediente
		TA.ID_UNICO_TITULO AS ID_UNICO_TITULO, -- ID Temporal para el usuario abogado
		
		USUARIO_SOLICITANTE.nombre AS GESTOR_SOLICITANTE,
		TS.FEC_SOLICITUD AS FECHASOLICITUD,
		EP.nombre AS ESTADO_ACTUAL,
		TS.COD_ESTADO_SOLICITUD,
		ESTADO_SOLICITUD.VAL_NOMBRE AS ESTADO_APROBACION,
		TIPO_SOLICITUD.VAL_NOMBRE AS TIPO_SOLICITUD,
		USUARIO_SOLICITADO.nombre AS GESTOR_SOLICITADO,
		USUARIO_APROBADOR.nombre AS GESTOR_APROBADOR
	FROM TAREA_SOLICITUD AS TS
	LEFT JOIN TAREA_ASIGNADA AS TA ON TS.ID_TAREA_ASIGNADA = TA.ID_TAREA_ASIGNADA
	LEFT JOIN USUARIOS AS USUARIO_SOLICITANTE ON TS.VAL_USUARIO_SOLICITANTE = USUARIO_SOLICITANTE.login
	LEFT JOIN USUARIOS AS USUARIO_SOLICITADO ON TS.VAL_USUARIO_DESTINO = USUARIO_SOLICITADO.login
	LEFT JOIN USUARIOS AS USUARIO_APROBADOR ON TS.VAL_USUARIO_APROBADOR = USUARIO_APROBADOR.login
	LEFT JOIN EJEFISGLOBAL AS E ON TA.EFINROEXP_EXPEDIENTE = E.EFINROEXP
	LEFT JOIN ESTADOS_PROCESO AS EP ON E.EFIESTADO = EP.codigo
	LEFT JOIN DOMINIO_DETALLE AS ESTADO_SOLICITUD ON TS.COD_ESTADO_SOLICITUD = ESTADO_SOLICITUD.ID_DOMINIO_DETALLE
	LEFT JOIN DOMINIO_DETALLE AS TIPO_SOLICITUD ON TS.VAL_TIPO_SOLICITUD = TIPO_SOLICITUD.ID_DOMINIO_DETALLE
	WHERE
		TS.VAL_TIPO_SOLICITUD = @IdTipoSolicitud --ID de la tabla DOMINIO_DETALLE
		AND (@LoginUsuarioSuperior = '' OR TS.VAL_USUARIO_APROBADOR IN(@LoginUsuarioSuperior, @codigoUsuarioSuperior))
		AND (@EFINROEXP = '' OR TA.EFINROEXP_EXPEDIENTE = @EFINROEXP)
		AND (@ID_UNICO_TITULO = '' OR TA.ID_UNICO_TITULO = CAST(@ID_UNICO_TITULO AS INT))
		AND (@LoginUsuarioSolicitante = '' OR TS.VAL_USUARIO_SOLICITANTE = @LoginUsuarioSolicitante)
		AND (@EstadoSolicitud = 0 OR TS.COD_ESTADO_SOLICITUD = @EstadoSolicitud)
	ORDER BY TS.COD_ESTADO_SOLICITUD ASC, TS.FEC_SOLICITUD DESC
END
GO
CREATE PROCEDURE [dbo].[sp_getSupervisor]  
AS
BEGIN
	
	SET NOCOUNT ON;
	
	SELECT	codigo 
	FROM	USUARIOS 
	WHERE	nivelacces = 2 AND useractivo = 1;  
	
END
GO
CREATE PROCEDURE [dbo].[sp_getSnEnviadoMsg]  
	@NroExp			VARCHAR(12),
	@UsuDestino		VARCHAR(4),
	@Mensaje		VARCHAR(20)	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT 1 
	FROM	mensajes 
	WHERE	NroExp = @NroExp 
			AND UsuDestino = @UsuDestino
			AND Mensaje LIKE 'AE' + @Mensaje + '%'
END
GO
CREATE PROCEDURE [dbo].[sp_getIDGestorResp]  
	@EFINROEXP	VARCHAR(12)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT EFIUSUASIG FROM EJEFISGLOBAL WHERE EFINROEXP = @EFINROEXP;
END
GO
CREATE PROCEDURE [dbo].[sp_getExisteSolCambioEstado]  
	@NroExp	VARCHAR(12)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT	fecha 
	FROM	SOLICITUDES_CAMBIOESTADO 
	WHERE	NroExp = @NroExp AND estadosol = 1
END
GO
-- =============================================
-- Author:		Edward Fabián Hernández Nieves
-- Create date: 2019-02-08
-- Description:	Verifica si el login del usuario que se pasa como parametro tiene la jerarquía que se consulta y también se pasa como parametro
-- =============================================
CREATE PROCEDURE [dbo].[SP_VERIFICAR_JERARQUIA_USUARIO_POR_LOGIN]
	@LoginUsuario AS NVARCHAR(12),
	@Jerarquia AS INT -- {1:Revisor, 2:Coordinador, 3:Superior}
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	If(@Jerarquia = 1)
	BEGIN
		SELECT 
			codigo
			,nombre
			,documento
			,clave
			,nivelacces
			,cobrador
			,apppredial
			,appvehic
			,appcuotasp
			,appindycom
			,login
			,conuser
			,useractivo
			,useremail
			,usercamclave
			,superior
			,ind_gestor_estudios
			,ind_gestor_expedientes
		FROM USUARIOS 
		WHERE
			codigo IN(SELECT DISTINCT superior FROM USUARIOS)
			AND login = @LoginUsuario
	END

	If(@Jerarquia = 2)
	BEGIN
		SELECT 
			codigo
			,nombre
			,documento
			,clave
			,nivelacces
			,cobrador
			,apppredial
			,appvehic
			,appcuotasp
			,appindycom
			,login
			,conuser
			,useractivo
			,useremail
			,usercamclave
			,superior
			,ind_gestor_estudios
			,ind_gestor_expedientes
		FROM USUARIOS 
		WHERE
			codigo IN(SELECT superior FROM USUARIOS where codigo IN(SELECT DISTINCT superior FROM USUARIOS))
			AND login = @LoginUsuario
	END

	If(@Jerarquia = 3)
	BEGIN
		SELECT 
			codigo
			,nombre
			,documento
			,clave
			,nivelacces
			,cobrador
			,apppredial
			,appvehic
			,appcuotasp
			,appindycom
			,login
			,conuser
			,useractivo
			,useremail
			,usercamclave
			,superior
			,ind_gestor_estudios
			,ind_gestor_expedientes
		FROM USUARIOS 
		WHERE
			codigo IN(
				SELECT superior FROM USUARIOS 
				WHERE codigo IN(
					SELECT DISTINCT superior FROM USUARIOS 
					WHERE codigo IN(
						SELECT DISTINCT superior FROM USUARIOS
					)
				)
			)
			AND login = @LoginUsuario
	END
END
GO
CREATE PROCEDURE [dbo].[SP_DOCUMENTOS_TIPO_TITULO]
	@COD_TIPO_TITULO		AS CHAR(2)
AS
	 SELECT DISTINCT DT.[ID_DOCUMENTO_TITULO],D.NOMBRE_DOCUMENTO,DT.[COD_TIPO_TITULO],DT.[VAL_ESTADO],DT.[VAL_OBLIGATORIO]
	 FROM [dbo].[DOCUMENTO_TITULO] D
		INNER JOIN [dbo].[DOCUMENTO_TITULO_TIPO_TITULO] DT ON D.ID_DOCUMENTO_TITULO =DT.ID_DOCUMENTO_TITULO
	 WHERE DT.[COD_TIPO_TITULO]=@COD_TIPO_TITULO
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 31/10/2018
-- Description: INSERTA LA DIRECCION
-- =============================================
CREATE PROCEDURE [dbo].[SP_InsertaDireccion] 
	@idunico bigint=Null,
	@deudor VARCHAR(13),
	@Direccion VARCHAR(180),
	@Departamento CHAR(2),
	@Ciudad CHAR(5),
	@Telefono VARCHAR(40),
	@Email VARCHAR(160),
	@Movil VARCHAR(40),
	@ID_FUENTE INT,
	@OTRA_FUENTE VARCHAR(20) = NULL
AS

BEGIN                         
	SET NOCOUNT ON   
	IF @idunico <> null
		BEGIN
			UPDATE  [dbo].[DIRECCIONES] 
			SET 
				[deudor] =@deudor
				,[Direccion] = @Direccion
				,[Departamento] =@Departamento
				,[Ciudad] = @Ciudad
				,[Telefono] = @Telefono
				,[Email] = @Email
				,[Movil] = @Movil
				,[paginaweb] = NULL
				,[ID_FUENTE] = @ID_FUENTE
				,[OTRA_FUENTE]=@OTRA_FUENTE
				

			WHERE  idunico=@idunico

		END
	ELSE
		BEGIN
		INSERT INTO [dbo].[DIRECCIONES]
				   ([deudor]
				   ,[Direccion]
				   ,[Departamento]
				   ,[Ciudad]
				   ,[Telefono]
				   ,[Email]
				   ,[Movil]
				   ,[paginaweb]
				   ,[ID_FUENTE]
				   ,[OTRA_FUENTE])
			 VALUES
			 (@deudor,@Direccion, @Departamento,@Ciudad,@Telefono,@Email,@Movil,NULL,@ID_FUENTE,@OTRA_FUENTE)

		 END
END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 31/10/2018
-- Description: INSERTA EL TÍTULO EJECUTIVO


--EXECUTE  [SP_InsertaTituloEjecutivo] @VAL_USUARIO_NOMBRE ='DLEON' ,@MT_nro_titulo= '5154165135',@MT_tipo_titulo= '01',@MT_fec_expedicion_titulo='2018-11-22 13:53:07.737',
--@MT_fec_notificacion_titulo = '2018-11-22 13:53:07.737',@MT_for_notificacion_titulo= '12' ,@MT_Tip_notificacion= 67, @MT_res_resuelve_reposicion= '12',@MT_fec_expe_resolucion_reposicion='2018-11-22 13:53:07.737',
--@MT_reso_resu_apela_recon = '12',@MT_fec_exp_reso_apela_recon= '2018-11-22 13:53:07.737',@MT_fecha_ejecutoria = '2018-11-22 13:53:07.737', @MT_fec_exi_liq= '2018-11-22 13:53:07.737',
--@MT_procedencia = 1, @totaldeuda = 123451,@TotalRepartidor = 123452,@TotalSancion =123453,@MT_valor_obligacion =123454,@MT_partida_global = 123455,@MT_sancion_omision =123456,
--@MT_sancion_mora= 123457,@MT_sancion_inexactitud = 123458,@MT_total_obligacion = 123459,@MT_total_partida_global = 123456,@CodTipSentencia =87

-- =============================================
CREATE PROCEDURE [dbo].[SP_InsertaTituloEjecutivo]    
   @MT_nro_titulo VARCHAR(25),   
   @MT_expediente VARCHAR(12) = NULL,
   @MT_tipo_titulo CHAR(2),
   @MT_fec_expedicion_titulo DATETIME,
   @MT_fec_notificacion_titulo DATETIME,
   @MT_for_notificacion_titulo CHAR(2),
   @MT_Tip_notificacion INT,
   @MT_res_resuelve_reposicion VARCHAR(50) = NULL,
   @MT_fec_expe_resolucion_reposicion DATETIME = NULL,
   @MT_reso_resu_apela_recon VARCHAR(50) = NULL,
   @MT_fec_exp_reso_apela_recon DATETIME = NULL,
   @MT_fecha_ejecutoria DATETIME = NULL,
   @MT_fec_exi_liq DATETIME = NULL,
   @MT_procedencia INT,
   @totaldeuda FLOAT,
   @TotalRepartidor FLOAT,
   @TotalSancion FLOAT,
   @MT_valor_obligacion FLOAT,
   @MT_partida_global FLOAT,
   @MT_sancion_omision FLOAT,
   @MT_sancion_mora FLOAT , 
   @MT_sancion_inexactitud FLOAT,
   @MT_total_obligacion FLOAT,
   @MT_total_partida_global FLOAT,
   @CodTipSentencia INT,
   @NoExpedienteOrigen VARCHAR(30)=NULL,
   @IdunicoTitulo AS BIGINT= NULL,
   @Automatico BIT
   AS
   
BEGIN                     
      
SET NOCOUNT ON   
        DECLARE @IdunicoTituloR INT = -1 
        DECLARE @capitalmulta AS INT = 0
        DECLARE @omisossalud AS INT = 0
        DECLARE @morasalud AS INT = 0
        DECLARE @inexactossalud AS INT = 0
        DECLARE @omisospensiones AS INT = 0
        DECLARE @morapensiones AS INT = 0
        DECLARE @inexactospensiones AS INT = 0
        DECLARE @omisosfondosolpen AS INT = 0
        DECLARE @morafondosolpen AS INT = 0
        DECLARE @inexactosfondosolpen AS INT = 0
        DECLARE @omisosarl AS INT = 0
        DECLARE @moraarl AS INT = 0
        DECLARE @inexactosarl AS INT = 0
        DECLARE @omisosicbf AS INT = 0
        DECLARE @moraicbf AS INT = 0
        DECLARE @inexactosicbf AS INT = 0
        DECLARE @omisossena AS INT = 0
        DECLARE @morasena AS INT = 0
        DECLARE @inexactossena AS INT = 0
        DECLARE @omisossubfamiliar AS INT = 0
        DECLARE @morasubfamiliar AS INT = 0
        DECLARE @inexactossubfamiliar AS INT = 0
        DECLARE @sentenciasjudiciales AS INT = 0
        DECLARE @cuotaspartesacum AS INT = 0
        DECLARE @totalmultas AS INT = 0
        DECLARE @totalomisos AS INT = 0
        DECLARE @totalmora AS INT = 0
        DECLARE @totalinexactos AS INT = 0
        DECLARE @totalsentencias AS INT = 0


IF @IdunicoTitulo <> 0

	BEGIN

		UPDATE [dbo].[MAESTRO_TITULOS] SET 
           [MT_expediente] = @MT_expediente
           ,[MT_tipo_titulo] = @MT_tipo_titulo
           ,[MT_titulo_acumulado] = '' 
           ,[MT_fec_expedicion_titulo] = @MT_fec_expedicion_titulo
           ,[MT_res_resuelve_reposicion] = @MT_res_resuelve_reposicion
           ,[MT_fec_expe_resolucion_reposicion] = @MT_fec_expe_resolucion_reposicion
           ,[MT_reso_resu_apela_recon] = @MT_reso_resu_apela_recon
           ,[MT_fec_exp_reso_apela_recon] = @MT_fec_exp_reso_apela_recon
           ,[MT_fecha_ejecutoria] = @MT_fecha_ejecutoria
           ,[MT_fec_exi_liq] = @MT_fec_exi_liq
           ,[MT_fec_cad_presc] =
		    CASE @MT_fecha_ejecutoria WHEN NULL THEN 
			GETDATE()+1
			ELSE 
			DATEADD(YEAR,(SELECT top(1) ANOS_FECHA_PRESCRIPCION FROM TIPOS_TITULO WHERE codigo=@MT_tipo_titulo),@MT_fecha_ejecutoria)   		END
           ,[MT_proc_cobro_ini_prev] = NULL
           ,[MT_procedencia] = @MT_procedencia
           ,[capitalmulta] = @capitalmulta
           ,[omisossalud] = @omisossalud
           ,[morasalud] = @morasalud
           ,[inexactossalud] = @inexactossalud
           ,[omisospensiones] = @omisospensiones
           ,[morapensiones] = @morapensiones
           ,[inexactospensiones] = @inexactospensiones
           ,[omisosfondosolpen] = @omisosfondosolpen
           ,[morafondosolpen] = @morafondosolpen
           ,[inexactosfondosolpen] = @inexactosfondosolpen
           ,[omisosarl] = @omisosarl
           ,[moraarl] = @moraarl
           ,[inexactosarl] = @inexactosarl
           ,[omisosicbf] = @omisosicbf
           ,[moraicbf] = @moraicbf
           ,[inexactosicbf] = @inexactosicbf
           ,[omisossena] = @omisossena
           ,[morasena] = @morasena
           ,[inexactossena] = @inexactossena
           ,[omisossubfamiliar] = @omisossubfamiliar
           ,[morasubfamiliar] = @morasubfamiliar
           ,[inexactossubfamiliar] = @inexactossubfamiliar
           ,[sentenciasjudiciales] = @sentenciasjudiciales
           ,[cuotaspartesacum] = @cuotaspartesacum
           ,[totalmultas] = @totalmultas
           ,[totalomisos] = @totalomisos
           ,[totalmora] = @totalmora
           ,[totalinexactos] = @totalinexactos
           ,[totalsentencias] = @totalsentencias
           ,[totaldeuda] = @totaldeuda
           ,[NumMemoDev] = NULL
           ,[FecMemoDev] = NULL
           ,[CausalDevol] = NULL
           ,[ObsDevol] = NULL
           ,[totalrepartidor] = @TotalRepartidor
           ,[estado] = 1
           ,[MT_totalSancion] = @TotalSancion
           ,[MT_tiposentencia] = @CodTipSentencia
           ,[revocatoria] = NULL
           ,[nroResolRevoca]= NULL
           ,[fechaRevoca]= NULL
           ,[valorRevoca]= NULL
           ,[MT_valor_obligacion] = @MT_valor_obligacion
           ,[MT_partida_global] = @MT_partida_global
           ,[MT_sancion_omision] = @MT_sancion_omision
           ,[MT_sancion_mora] = @MT_sancion_mora
           ,[MT_sancion_inexactitud] = @MT_sancion_inexactitud
           ,[MT_total_obligacion] = @MT_total_obligacion
           ,[MT_total_partida_global] = @MT_total_partida_global
		   ,[Automatico] =  @Automatico
		   ,[NoExpedienteOrigen]=@NoExpedienteOrigen

		   WHERE idunico = @IdunicoTitulo

		SET @IdunicoTituloR =1

	END

ELSE

	BEGIN
			INSERT INTO [dbo].[MAESTRO_TITULOS]
					   ([MT_nro_titulo]
					   ,[MT_expediente]
					   ,[MT_tipo_titulo]
					   ,[MT_titulo_acumulado]
					   ,[MT_fec_expedicion_titulo]
					   ,[MT_res_resuelve_reposicion]
					   ,[MT_fec_expe_resolucion_reposicion]
					   ,[MT_reso_resu_apela_recon]
					   ,[MT_fec_exp_reso_apela_recon]
					   ,[MT_fecha_ejecutoria]
					   ,[MT_fec_exi_liq]
					   ,[MT_proc_cobro_ini_prev]
					   ,[MT_procedencia]
					   ,[capitalmulta]
					   ,[omisossalud]
					   ,[morasalud]
					   ,[inexactossalud]
					   ,[omisospensiones]
					   ,[morapensiones]
					   ,[inexactospensiones]
					   ,[omisosfondosolpen]
					   ,[morafondosolpen]
					   ,[inexactosfondosolpen]
					   ,[omisosarl]
					   ,[moraarl]
					   ,[inexactosarl]
					   ,[omisosicbf]
					   ,[moraicbf]
					   ,[inexactosicbf]
					   ,[omisossena]
					   ,[morasena]
					   ,[inexactossena]
					   ,[omisossubfamiliar]
					   ,[morasubfamiliar]
					   ,[inexactossubfamiliar]
					   ,[sentenciasjudiciales]
					   ,[cuotaspartesacum]
					   ,[totalmultas]
					   ,[totalomisos]
					   ,[totalmora]
					   ,[totalinexactos]
					   ,[totalsentencias]
					   ,[totaldeuda]
					   ,[NumMemoDev]
					   ,[FecMemoDev]
					   ,[CausalDevol]
					   ,[ObsDevol]
					   ,[totalrepartidor]
					   ,[estado]
					   ,[MT_totalSancion]
					   ,[MT_tiposentencia]
					   ,[revocatoria]
					   ,[nroResolRevoca]
					   ,[fechaRevoca]
					   ,[valorRevoca]
					   ,[MT_valor_obligacion]
					   ,[MT_partida_global]
					   ,[MT_sancion_omision]
					   ,[MT_sancion_mora]
					   ,[MT_sancion_inexactitud]
					   ,[MT_total_obligacion]
					   ,[MT_total_partida_global]
					   ,[Automatico]
					   ,[MT_fec_cad_presc]
					   ,[NoExpedienteOrigen]
					   )

			VALUES 
					(@MT_nro_titulo, @MT_expediente, @MT_tipo_titulo, '' , @MT_fec_expedicion_titulo,  
					@MT_res_resuelve_reposicion, @MT_fec_expe_resolucion_reposicion, @MT_reso_resu_apela_recon, @MT_fec_exp_reso_apela_recon, @MT_fecha_ejecutoria, 
					@MT_fec_exi_liq,NULL,@MT_procedencia, @capitalmulta, 
					@omisossalud, @morasalud, @inexactossalud, @omisospensiones,@morapensiones, 
					@inexactospensiones, @omisosfondosolpen, @morafondosolpen, @inexactosfondosolpen,@omisosarl, 
					@moraarl, @inexactosarl, @omisosicbf, @moraicbf, @inexactosicbf, 
					@omisossena, @morasena,@inexactossena, @omisossubfamiliar, @morasubfamiliar, 
					@inexactossubfamiliar, @sentenciasjudiciales, @cuotaspartesacum, @totalmultas, @totalomisos, 
					@totalmora, @totalinexactos, @totalsentencias, @totaldeuda, NULL, 
					NULL,NULL ,NULL, @TotalRepartidor, 1, 
					@TotalSancion, @CodTipSentencia,NULL, NULL , NULL , 
					NULL , @MT_valor_obligacion, @MT_partida_global, @MT_sancion_omision,@MT_sancion_mora, 
					@MT_sancion_inexactitud,  @MT_total_obligacion, @MT_total_partida_global ,  @Automatico,
		    (CASE @MT_fecha_ejecutoria WHEN NULL THEN 
			GETDATE()+1
			ELSE 
			DATEADD(YEAR,(SELECT top(1) ANOS_FECHA_PRESCRIPCION FROM TIPOS_TITULO WHERE codigo=@MT_tipo_titulo),@MT_fecha_ejecutoria)   		END),
					@NoExpedienteOrigen)

			SET @IdunicoTituloR = SCOPE_IDENTITY()

			IF @Automatico = 1
			BEGIN 
				INSERT INTO [dbo].[TAREA_ASIGNADA]
					   ([VAL_USUARIO_NOMBRE]
					   ,[COD_TIPO_OBJ]
					   ,[ID_UNICO_TITULO]
					   ,[EFINROEXP_EXPEDIENTE]
					   ,[FEC_ACTUALIZACION]
					   ,[FEC_ENTREGA_GESTOR]
					   ,[VAL_PRIORIDAD]
					   ,[COD_ESTADO_OPERATIVO])
				 VALUES
				 ('',4,@IdunicoTituloR,NULL,GETDATE(),NULL,0,2)
			END
	END

  SELECT @IdunicoTituloR AS IdunicoTitulo

 END
GO
/*
Nombre		:	SP_ALMACENAMIENTO_TEMPORAL_INSERTAR
Descripcion	:	Se crea un registro

Historia	:
VERSION 	FECHA 			AUTOR 					DESCRIPCION
1.00.000	2018/11/19		OSCAR GONZALEZ 			CREACION
*/
CREATE PROCEDURE [dbo].[SP_ALMACENAMIENTO_TEMPORAL_INSERTAR]
		@JSON_OBJ AS varchar(max),
		@ID_TAREA_ASIGNADA AS bigint
AS
INSERT INTO [dbo].[ALMACENAMIENTO_TEMPORAL]
           ([JSON_OBJ]
           ,[ID_TAREA_ASIGNADA]
           ,[FEC_ACTUALIZACION])
     VALUES
           (@JSON_OBJ,
			@ID_TAREA_ASIGNADA,
			GETDATE())

SELECT * FROM [ALMACENAMIENTO_TEMPORAL] WHERE ID_ALMACENAMIENTO_TEMPORAL= SCOPE_IDENTITY()
GO
-- =============================================
-- Author:		Eduar Fabián Hernández Nieves
-- Create date: 2018-12-27
-- Description:	SP para actualizar el orden de priorización de los expedientes asignados a un gestor
-- EXEC SP_ACTUALIZAR_PRIORIDAD_EXPEDIENTES
-- =============================================
CREATE PROCEDURE [dbo].[SP_ACTUALIZAR_PRIORIDAD_EXPEDIENTES]
AS
BEGIN
	SET NOCOUNT ON;
	
	--Asigana todas los expedientes asignados con baja prioridad
	UPDATE TAREA_ASIGNADA SET VAL_PRIORIDAD = 0 WHERE COD_TIPO_OBJ = 5 AND COD_ESTADO_OPERATIVO = 11
	-- Actualiza la prioridad de las tareas que tienen prioridad
	UPDATE TAREA_ASIGNADA SET VAL_PRIORIDAD = 1 WHERE COD_TIPO_OBJ = 5 AND (COD_ESTADO_OPERATIVO IN(12, 14, 19) OR IND_TITULO_PRIORIZADO = 1)

	DECLARE @Usuario AS nvarchar(40)

	DECLARE UsuariosConExpedientesParaGestionar CURSOR READ_ONLY FOR
		SELECT DISTINCT VAL_USUARIO_NOMBRE
		FROM TAREA_ASIGNADA
		WHERE 
			COD_TIPO_OBJ = 5
			AND COD_ESTADO_OPERATIVO IN(11, 15)
			AND VAL_USUARIO_NOMBRE IS NOT NULL
			AND VAL_USUARIO_NOMBRE <> ''
	
	OPEN UsuariosConExpedientesParaGestionar

	FETCH NEXT FROM UsuariosConExpedientesParaGestionar INTO @Usuario
	WHILE @@fetch_status = 0
	BEGIN

		UPDATE TAREA_ASIGNADA SET VAL_PRIORIDAD = 1 
		WHERE ID_TAREA_ASIGNADA = (
			SELECT TOP 1 TA.ID_TAREA_ASIGNADA
			FROM TAREA_ASIGNADA AS TA
			JOIN EJEFISGLOBAL AS E ON TA.EFINROEXP_EXPEDIENTE = E.EFINROEXP
			JOIN MAESTRO_TITULOS AS MT ON E.EFINROEXP = MT.MT_expediente
			WHERE 
				TA.VAL_USUARIO_NOMBRE = @Usuario
				AND TA.COD_ESTADO_OPERATIVO  IN(11, 15)
				AND TA.COD_TIPO_OBJ = 5
				AND TA.EFINROEXP_EXPEDIENTE IS NOT NULL
				AND MT.MT_fec_cad_presc IS NOT NULL
			ORDER BY MT.MT_fec_cad_presc ASC, E.EFISALDOCAP DESC, MT.MT_fec_exi_liq ASC
		)

		FETCH NEXT FROM UsuariosConExpedientesParaGestionar INTO @Usuario
	END
	CLOSE UsuariosConExpedientesParaGestionar
	DEALLOCATE UsuariosConExpedientesParaGestionar

END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 21/11/2018
-- Description: INSERTA LA OBSERVACION DE CUMPLE NO CUMPLE 
-- =============================================


CREATE PROCEDURE [dbo].[SP_InsertaObservacionCNC] 

   @ID_UNICO_MT BIGINT,
   @USUARIO VARCHAR(100),
   @OBSERVACIONES VARCHAR(500),
   @CUMPLE_NOCUMPLE BIT,
   @DESTINATARIO VARCHAR(100)
      AS
   
BEGIN                     
      
SET NOCOUNT ON   

INSERT INTO [dbo].[OBSERVACIONES_CUMPLE_NOCUMPLE]
           ([ID_UNICO_MT]
           ,[USUARIO]
           ,[FCHOBSERVACIONES]
           ,[OBSERVACIONES]
           ,[CUMPLE_NOCUMPLE]
		   ,[DESTINATARIO])
     VALUES
        (@ID_UNICO_MT,@USUARIO,GETDATE(),@OBSERVACIONES,@CUMPLE_NOCUMPLE,@DESTINATARIO)
END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 13/11/2018
-- Description: CARGA LOS DATOS PARA LA GRILLA DE LA BANDEJA DE TITULOS AREA ORIGEN
--- EXEC [SP_GrillaAreaOrigen] 'DLEON','',0,0,'','','',''
-- =============================================

CREATE PROCEDURE [dbo].[SP_GrillaAreaOrigen] 

   @USULOG AS VARCHAR(20), -- Usuario al cual se le asigno la tarea
   @NROTITULO AS VARCHAR(50) , -- Número de título
   @ESTADOPROCESAL AS INT,
   @ESTADOSOPERATIVO AS INT,
   @FCHENVIOCOBRANZADESDE AS VARCHAR(10),
   @FCHENVIOCOBRANZAHASTA AS VARCHAR(10),
   @NROIDENTIFICACIONDEUDOR AS VARCHAR(50),
   @NOMBREDEUDOR AS VARCHAR (50)
   AS
   
BEGIN                     
      
SET NOCOUNT ON 

DECLARE @NUMERODIAS INT 
SELECT @NUMERODIAS = VAL_VALOR FROM DOMINIO_DETALLE WHERE ID_DOMINIO_DETALLE =11
IF @ESTADOSOPERATIVO = 1
	BEGIN 		
			   SELECT 
			   TA.ID_UNICO_TITULO AS IDUNICO,
			   TA.ID_TAREA_ASIGNADA,
			   MT.MT_nro_titulo AS NROTITULO,
				CONVERT(VARCHAR(10),MT.MT_fec_expedicion_titulo,103) AS FCHEXPEDICIONTITULO,
			   ED.ED_Nombre AS NOMBREDEUDOR,
			   ED.ED_Codigo_Nit AS NRONITCEDULA,
			   TT.nombre AS TIPOOBLIGACION,
			   (
					MT.MT_valor_obligacion + MT.MT_partida_global + MT.MT_sancion_omision + MT.MT_sancion_inexactitud + MT.MT_sancion_mora
			   ) AS TOTALOBLIGACION, --Se realiza la suma de los valores
			   CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) AS FEC_ENTREGA_GESTOR, 
			   CONVERT(VARCHAR(10),FEC_ENTREGA_GESTOR +  @NUMERODIAS ,103)  AS FCHLIMITE, 
			   CASE WHEN   CONVERT(VARCHAR(10),FEC_ENTREGA_GESTOR +  @NUMERODIAS ,103) < = CONVERT(VARCHAR(10),GETDATE()  ,103)THEN 'ROJO' 
					END
				AS COLOR,
			   EO.ID_ESTADO_OPERATIVOS,
			   AT.JSON_OBJ AS JSON_ALMACENAMIENTO
			   FROM TAREA_ASIGNADA TA
				LEFT JOIN [dbo].[ESTADO_OPERATIVO] EO WITH (NOLOCK) ON TA.COD_ESTADO_OPERATIVO = EO.ID_ESTADO_OPERATIVOS
				LEFT JOIN MAESTRO_TITULOS MT WITH (NOLOCK) ON MT.idunico = TA.ID_UNICO_TITULO
				LEFT JOIN [dbo].[TIPOS_TITULO] TT WITH (NOLOCK) ON TT.codigo = MT.MT_tipo_titulo
				LEFT JOIN [dbo].[DEUDORES_EXPEDIENTES] DE WITH (NOLOCK) ON MT.idunico = DE.ID_MAESTRO_TITULOS
				LEFT JOIN [dbo].[ENTES_DEUDORES] ED WITH (NOLOCK) ON DE.deudor = ED.ED_Codigo_Nit
				LEFT JOIN [dbo].[ALMACENAMIENTO_TEMPORAL] AT WITH (NOLOCK) ON AT.ID_TAREA_ASIGNADA = TA.ID_TAREA_ASIGNADA
				LEFT JOIN [dbo].[EJEFISGLOBAL] EJEF WITH (NOLOCK) ON EJEF.EFINROEXP = MT.MT_expediente
		
				WHERE 
				EO.ID_ESTADO_OPERATIVOS = @ESTADOSOPERATIVO AND
				((@USULOG IS NULL) OR (VAL_USUARIO_NOMBRE = @USULOG)) AND
				((@NROTITULO = '') OR (UPPER(MT_nro_titulo) LIKE '%' + UPPER(@NROTITULO) + '%')) AND
				((@ESTADOSOPERATIVO = 0) OR (EO.ID_ESTADO_OPERATIVOS = @ESTADOSOPERATIVO)) AND
				((@FCHENVIOCOBRANZADESDE = '') OR (CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) >= @FCHENVIOCOBRANZADESDE)) AND
				((@FCHENVIOCOBRANZAHASTA = '') OR (CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) <= @FCHENVIOCOBRANZAHASTA)) AND
				((@NROIDENTIFICACIONDEUDOR = '') OR (ED.ED_Codigo_Nit LIKE '%' + @NROIDENTIFICACIONDEUDOR+ '%')) AND
				((@NOMBREDEUDOR = '') OR (UPPER(ED.ED_Nombre) LIKE '%' + UPPER(@NOMBREDEUDOR) + '%'))
					ORDER BY TA.ID_TAREA_ASIGNADA DESC

	END 

ELSE
	BEGIN 		
			SELECT 
			   TA.ID_UNICO_TITULO AS IDUNICO,
			   TA.ID_TAREA_ASIGNADA,
			   MT.MT_nro_titulo AS NROTITULO,
				CONVERT(VARCHAR(10),MT.MT_fec_expedicion_titulo,103) AS FCHEXPEDICIONTITULO,
			   ED.ED_Nombre AS NOMBREDEUDOR,
			   ED.ED_Codigo_Nit AS NRONITCEDULA,
			   TT.nombre AS TIPOOBLIGACION,
			   (
					MT.MT_valor_obligacion + MT.MT_partida_global + MT.MT_sancion_omision + MT.MT_sancion_inexactitud + MT.MT_sancion_mora
				) AS TOTALOBLIGACION, --Se realiza la suma de los valores
			   CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) AS FEC_ENTREGA_GESTOR, 
			   CONVERT(VARCHAR(10),FEC_ENTREGA_GESTOR +  @NUMERODIAS ,103)  AS FCHLIMITE, 
			   CASE WHEN   CONVERT(VARCHAR(10),FEC_ENTREGA_GESTOR +  @NUMERODIAS ,103) < = CONVERT(VARCHAR(10),GETDATE()  ,103)THEN 'ROJO' 
					END
				AS COLOR,
			   EO.ID_ESTADO_OPERATIVOS,
			   AT.JSON_OBJ AS JSON_ALMACENAMIENTO
			FROM TAREA_ASIGNADA TA
				LEFT JOIN [dbo].[ESTADO_OPERATIVO] EO WITH (NOLOCK) ON TA.COD_ESTADO_OPERATIVO = EO.ID_ESTADO_OPERATIVOS
				LEFT JOIN MAESTRO_TITULOS MT WITH (NOLOCK) ON MT.idunico = TA.ID_UNICO_TITULO
				LEFT JOIN [dbo].[TIPOS_TITULO] TT WITH (NOLOCK) ON TT.codigo = MT.MT_tipo_titulo
				LEFT JOIN [dbo].[DEUDORES_EXPEDIENTES] DE WITH (NOLOCK) ON MT.idunico = DE.ID_MAESTRO_TITULOS
				LEFT JOIN [dbo].[ENTES_DEUDORES] ED WITH (NOLOCK) ON DE.deudor = ED.ED_Codigo_Nit
				LEFT JOIN [dbo].[ALMACENAMIENTO_TEMPORAL] AT WITH (NOLOCK) ON AT.ID_TAREA_ASIGNADA = TA.ID_TAREA_ASIGNADA
				LEFT JOIN [dbo].[EJEFISGLOBAL] EJEF WITH (NOLOCK) ON EJEF.EFINROEXP = MT.MT_expediente
		
				WHERE 

				((@USULOG IS NULL) OR (VAL_USUARIO_NOMBRE = @USULOG)) AND
				((@NROTITULO = '') OR (UPPER(MT_nro_titulo) LIKE '%' + UPPER(@NROTITULO) + '%')) AND
				((@ESTADOSOPERATIVO = 0) OR (EO.ID_ESTADO_OPERATIVOS = @ESTADOSOPERATIVO)) AND
				((@FCHENVIOCOBRANZADESDE = '') OR (CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) >= @FCHENVIOCOBRANZADESDE)) AND
				((@FCHENVIOCOBRANZAHASTA = '') OR (CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) <= @FCHENVIOCOBRANZAHASTA)) AND
				((@NROIDENTIFICACIONDEUDOR = '') OR (ED.ED_Codigo_Nit LIKE '%' + @NROIDENTIFICACIONDEUDOR+ '%')) AND
				((@NOMBREDEUDOR = '') OR (UPPER(ED.ED_Nombre) LIKE '%' + UPPER(@NOMBREDEUDOR) + '%')) AND
				 EO.VAL_NOMBRE IN ('EnCreacion','Subsanar')
				 ORDER BY TA.FEC_ENTREGA_GESTOR DESC

	END 
 END
GO
CREATE PROCEDURE [dbo].[SP_TAREA_ASIGNADA_POR_ID]
	@ID_TAREA_ASIGNADA AS BIGINT
AS
	SELECT  T.[ID_TAREA_ASIGNADA] ,
			T.[VAL_USUARIO_NOMBRE] ,
			T.[COD_TIPO_OBJ] ,
			T.[ID_UNICO_TITULO] ,
			T.[EFINROEXP_EXPEDIENTE] ,
			T.[FEC_ACTUALIZACION] ,
			T.[FEC_ENTREGA_GESTOR] ,
			T.[VAL_PRIORIDAD] ,
			T.[COD_ESTADO_OPERATIVO] 
	FROM TAREA_ASIGNADA T	
	WHERE T.[ID_TAREA_ASIGNADA] = @ID_TAREA_ASIGNADA
GO
-- =============================================
-- Author:		Oscar Diaz
-- Create date: 2018-03-12
-- Description:	Ingresa/actualiza un registro en la relación
-- =============================================
CREATE PROCEDURE [dbo].[SP_INGRESAR_DOCUMENTOTITULO_TIPOTITULO] 
@ID_DOCUMENTO_TITULO AS INT,
@COD_TIPO_TITULO AS VARCHAR(2),
@VAL_ESTADO AS BIT,
@VAL_OBLIGATORIO AS BIT
AS
BEGIN
SET NOCOUNT ON;

	IF EXISTS (SELECT TOP 1
		1
	FROM DOCUMENTO_TITULO_TIPO_TITULO
	WHERE ID_DOCUMENTO_TITULO = @ID_DOCUMENTO_TITULO
	AND COD_TIPO_TITULO = @COD_TIPO_TITULO)
BEGIN

UPDATE [dbo].[DOCUMENTO_TITULO_TIPO_TITULO]
SET [VAL_ESTADO] = @VAL_ESTADO
   ,[VAL_OBLIGATORIO] = @VAL_OBLIGATORIO
WHERE ID_DOCUMENTO_TITULO = @ID_DOCUMENTO_TITULO
AND COD_TIPO_TITULO = @COD_TIPO_TITULO
END
ELSE
INSERT INTO [dbo].[DOCUMENTO_TITULO_TIPO_TITULO] ([ID_DOCUMENTO_TITULO]
, [COD_TIPO_TITULO]
, [VAL_ESTADO]
, [VAL_OBLIGATORIO])
	VALUES (@ID_DOCUMENTO_TITULO, @COD_TIPO_TITULO, @VAL_ESTADO, @VAL_OBLIGATORIO)


END
GO
CREATE PROCEDURE [dbo].[SP_FUENTE_DIRECCIONES]
AS
	 SELECT F.ID_FUENTE_DIRECCION,F.DES_NOMBRE_FUENTE_DIRECCION FROM FUENTE_DIRECCION F WHERE F.ind_estado = 1
GO
-- =============================================
-- Author:		Edward Fabian Hernandez Nieves - Stefanini
-- Create date: 2019-03-12
-- Description:	Asigna el número de expediente a un título
-- =============================================
CREATE PROCEDURE [dbo].[SP_ASIGNAR_EXPEDIENTE_A_TITULO]
	@MT_nro_titulo AS VARCHAR(25),
	@MT_expediente AS VARCHAR(12)
AS
BEGIN
	SET NOCOUNT ON;
    UPDATE MAESTRO_TITULOS SET MT_expediente = @MT_expediente WHERE idunico = @MT_nro_titulo
END
GO
CREATE PROCEDURE [dbo].[REPARTO_EXPEDIENTES]
	-- Add the parameters for the stored procedure here

AS
BEGIN
-- EXEC [REPARTO_EXPEDIENTES2]
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @TABLA TABLE(
Numero_Registro int,
Codigo_Expediente varchar(MAX)
);

DECLARE @TABLA2 TABLE(
Numero_Registro int,
Codigo_Expediente varchar(MAX),
Estado varchar(MAX)
);


    -- Insert statements for procedure here

declare @i int=1;
declare @r int=1;
declare @Tota_Expedientes int;
declare @Total_User int;
declare @login varchar(max);
declare @expediente varchar(max);
declare @estado varchar(max);
declare @estadoBandera varchar(max)='';
declare @bandera int=0;
declare @bande int=0;
declare @validador int=0;

DECLARE @USERS TABLE(
NUMERO_FILA INT,
USUARIO VARCHAR(MAX),
ESTADO VARCHAR(MAX));

DECLARE @USERSDESC TABLE(
NUMERO_FILA INT,
USUARIO VARCHAR(MAX),
ESTADO VARCHAR(MAX));

DECLARE @USERSP TABLE(
NUMERO_FILA INT,
USUARIO VARCHAR(MAX),
ESTADO VARCHAR(MAX));


INSERT INTO @TABLA
SELECT Row_number() 
         OVER ( 
           ORDER BY T.EFINROEXP_EXPEDIENTE),
  T.EFINROEXP_EXPEDIENTE FROM TAREA_ASIGNADA T
 WHERE T.COD_ESTADO_OPERATIVO=10 OR T.COD_ESTADO_OPERATIVO=11 GROUP BY T.EFINROEXP_EXPEDIENTE; 
   
 INSERT INTO @TABLA2
 SELECT Row_number() 
         OVER ( 
           ORDER BY E.EFIESTADO), T.Codigo_Expediente,E.EFIESTADO FROM EJEFISGLOBAL E
 INNER JOIN @TABLA T
 ON T.Codigo_Expediente=E.EFINROEXP 
WHERE E.EFIESTADO IS NOT NULL OR E.EFIESTADO NOT IN('07','08','09')
ORDER BY E.EFIESTADO;

INSERT INTO @USERSP
SELECT Row_number() 
         OVER ( 
           ORDER BY E.COD_ID_ESTADOS_PROCESOS),E.VAL_USUARIO,
		   E.COD_ID_ESTADOS_PROCESOS FROM  ESTADOS_PROCESO_GESTOR E
INNER JOIN USUARIOS U
ON E.VAL_USUARIO=U.LOGIN
WHERE U.ind_gestor_expedientes = 1 
AND U.useractivo = 1 
ORDER BY E.COD_ID_ESTADOS_PROCESOS;

 SET @Tota_Expedientes=(SELECT count(*) FROM @TABLA2);

 WHILE  ( @r <= @Tota_Expedientes ) 
 BEGIN 
      SET @expediente=(SELECT Codigo_Expediente 
                   FROM    @TABLA2 
                   WHERE  Numero_Registro = @r); 
	 SET @estado =(SELECT Estado 
                   FROM    @TABLA2 
                   WHERE  Numero_Registro = @r);
	   
	   
	   IF @estado<>@estadoBandera 	   
	   BEGIN
	   DELETE FROM @USERS;
	   DELETE FROM @USERSDESC;
	   INSERT INTO @USERS SELECT  Row_number() 
         OVER ( 
           ORDER BY USUARIO),USUARIO,ESTADO FROM @USERSP WHERE ESTADO=@estado ORDER BY USUARIO;

	   INSERT INTO @USERSDESC SELECT  Row_number() 
         OVER ( 
           ORDER BY USUARIO),USUARIO,ESTADO FROM @USERSP WHERE ESTADO=@estado ORDER BY USUARIO DESC;
	   SET @Total_User=(SELECT COUNT(*) FROM @USERS);	
	   SET @i=1;
	   
	   END
	   
	   IF @bandera = 0 
        BEGIN 
            SET @login=(SELECT usuario 
                        FROM   @USERS 
                        WHERE  numero_fila = @i); 
        END 
      ELSE 
        BEGIN 
            SET @login=(SELECT usuario 
                        FROM   @USERSDESC 
                        WHERE  numero_fila = @i); 
        END 
	  
      IF( @i = @Total_User ) 
        --Validacion de Usuarios vs Total para cambio de orden de los usuarios 
        BEGIN 
            SET @bandera=1; 
            SET @i=1; 
            SET @bande=@bande + 1 
        END 
		ELSE
		BEGIN
		  SET @i=@i + 1; --incremento para asignacion de usuarios 
		END

      IF @bande = 2 --Validacion Seteo de variables 
        BEGIN 
            SET @bandera=0; 
            SET @bande=0; 
        END 
	   SET @estadoBandera=@estado
	   SET @r=@r+1;		
	  
	  If (SELECT TOP(1) FEC_ENTREGA_GESTOR from tarea_asignada where  EFINROEXP_EXPEDIENTE = @expediente) IS NULL
		  BEGIN
			  UPDATE tarea_asignada 
				SET  VAL_USUARIO_NOMBRE = @login,
				  FEC_ENTREGA_GESTOR=GETDATE(),
				  COD_ESTADO_OPERATIVO=11
			  WHERE  EFINROEXP_EXPEDIENTE = @expediente; 
		  END 
	  ELSE
		  BEGIN
			  UPDATE tarea_asignada 
				SET  VAL_USUARIO_NOMBRE = @login,				 
				  COD_ESTADO_OPERATIVO=11
			  WHERE  EFINROEXP_EXPEDIENTE = @expediente; 
		  END 

 END
 END
GO
CREATE PROCEDURE [dbo].[REPARTO_AUTOMATICO] 
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
--EXEC [REPARTO_AUTOMATICO]
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @TABLA TABLE(
Numero_Registro int,
Id bigint,
Codigo_Titulo varchar(MAX),
Codigo_Expediente varchar(MAX),
Tipo_Titulo varchar(2),
Fecha_Prescripcion DateTime,
Fecha_Recepcion DateTime
);

DECLARE @USERS TABLE(
NUMERO_FILA INT,
CONUSER INT,
USUARIO VARCHAR(MAX));

DECLARE @USERSDESC TABLE(
NUMERO_FILA INT,
CONUSER INT,
USUARIO VARCHAR(MAX));

DECLARE @TABLA2 TABLE(
Numero_Registro int,
Id bigint,
Codigo_Titulo varchar(MAX),
Codigo_Expediente varchar(MAX),
Tipo_Titulo varchar(2),
Fecha_Prescripcion DateTime,
Fecha_Recepcion DateTime
);

DECLARE @ASIGNACION TABLE(
USUARIO VARCHAR(MAX),
TITULO VARCHAR(MAX)
);
declare @IdUnico bigint;
declare @Cod_Tipo varchar(2);
declare @Cod_Titulo varchar(max);
declare @Cod_Exp varchar(max);
declare @Fecha DateTime;
declare @Fecha_Recepcion DateTime;
declare @Fecha1 DateTime;
declare @Number_Register int;
declare @i int=1;
declare @r int=1;
declare @bandera int=0;
declare @bande int=0;
declare @Tota_Titulos int;
declare @Total_User int;
declare @login varchar(max);
declare @titulo varchar(max);


DECLARE fecha_prescripcion CURSOR FOR 
  SELECT numero_registro, 
         id, 
         codigo_titulo, 
         codigo_expediente, 
         tipo_titulo, 
         fecha_prescripcion, 
         fecha_recepcion 
  FROM   @TABLA 

-- Insert statements for procedure here 
INSERT INTO @TABLA 
SELECT Row_number() 
         OVER ( 
           ORDER BY M.idunico), 
       M.idunico, 
       M.mt_nro_titulo, 
       mt_expediente, 
       mt_tipo_titulo, 
       mt_fec_cad_presc, 
       mt_fec_expedicion_titulo 
FROM   maestro_titulos M 
JOIN TAREA_ASIGNADA T
ON T.ID_UNICO_TITULO=M.idunico
WHERE T.COD_ESTADO_OPERATIVO=2 OR T.COD_ESTADO_OPERATIVO=4; 

OPEN fecha_prescripcion 

FETCH next FROM fecha_prescripcion INTO @Number_Register, @IdUnico, @Cod_Titulo, 
@Cod_Exp, @Cod_Tipo, @Fecha, @Fecha_Recepcion 

WHILE @@fetch_status = 0 
  BEGIN 
      IF @Fecha IS NULL 
        BEGIN 
            SET @Fecha1=NULL; 
            SET @Fecha1=(SELECT TOP 1 Max(fec_notificacion) 
                         FROM   maestro_titulos_for_notificacion 
                         WHERE  id_unico_maestro_titulos = @IdUnico 
                                AND cod_tipo_notificacion = 1 
                                AND fec_notificacion IS NOT NULL); 
            SET @Fecha=Dateadd(year, 1, @Fecha1); 
        END 

      INSERT INTO @TABLA2 
      VALUES      (@Number_Register, 
                   @IdUnico, 
                   @Cod_Titulo, 
                   @Cod_Exp, 
                   @Cod_Tipo, 
                   @Fecha, 
                   @Fecha_Recepcion); 

      FETCH next FROM fecha_prescripcion INTO @Number_Register, @IdUnico, 
      @Cod_Titulo, @Cod_Exp, @Cod_Tipo, @Fecha, @Fecha_Recepcion 
  END 

CLOSE fecha_prescripcion 

DEALLOCATE fecha_prescripcion 

SET @Tota_Titulos=(SELECT Count(*) 
                   FROM   @TABLA2); 

INSERT INTO @USERS 
SELECT Row_number() 
         OVER ( 
           ORDER BY U.conuser), 
       U.conuser, 
       U.login 
FROM   usuarios U 
WHERE  U.useractivo = 1 
       AND U.ind_gestor_estudios = 1 
ORDER  BY U.conuser; 

INSERT INTO @USERSDESC 
SELECT Row_number() 
         OVER ( 
           ORDER BY U.conuser DESC), 
       U.conuser, 
       U.login 
FROM   usuarios U 
WHERE  U.useractivo = 1 
       AND U.ind_gestor_estudios = 1 
ORDER  BY U.conuser DESC; 

SET @Total_User=(SELECT Count(*) 
                 FROM   @USERS); 

WHILE ( @r <= @Tota_Titulos ) 
  BEGIN 
      SET @titulo=(SELECT id 
                   FROM   @TABLA2 
                   WHERE  numero_registro = @r); 

      IF @bandera = 0 
        BEGIN 
            SET @login=(SELECT usuario 
                        FROM   @USERS 
                        WHERE  numero_fila = @i); 
						print(@login)
        END 
      ELSE 
        BEGIN 
            SET @login=(SELECT usuario 
                        FROM   @USERSDESC 
                        WHERE  numero_fila = @i); 
						
        END 

      IF( @i = @Total_User ) 
        --Validacion de Usuarios vs Total para cambio de orden de los usuarios 
        BEGIN 
            SET @bandera=1; 
            SET @i=1; 
            SET @bande=@bande + 1 
        END 
      ELSE
	BEGIN
	SET @i=@i + 1; --incremento para asignacion de usuarios 
	END


      IF @bande = 2 --Validacion Seteo de variables 
        BEGIN 
            SET @bandera=0; 
            SET @bande=0; 
        END 
 
      SET @r=@r + 1; --incremento while 
     
      --Asignacion Titulo a Gestor 
	 
	  IF (SELECT TOP(1) fec_entrega_gestor FROM tarea_asignada WHERE  id_unico_titulo = @titulo) is null
		  BEGIN      
		  UPDATE tarea_asignada 
		  SET    val_usuario_nombre = @LOGIN, 
				 fec_entrega_gestor = Getdate(), 
				 FEC_ACTUALIZACION=Getdate(),
				 cod_estado_operativo = 4 
		  WHERE  id_unico_titulo = @titulo; 
	  
		  END
	  ELSE
		  BEGIN 
			  UPDATE tarea_asignada 
			  SET    val_usuario_nombre = @LOGIN, 
					 FEC_ACTUALIZACION=Getdate(),
					 cod_estado_operativo = 4 
			  WHERE  id_unico_titulo = @titulo; 
		  END
      ---Cambio Estado Operativo Titulo 
      --UPDATE maestro_titulos 
      --SET    estado = 4 
      --WHERE  idunico = @titulo; 
	  print(@titulo)
  END 
 
END
GO
CREATE PROCEDURE [dbo].[SP_TIPOS_TITULO_POR_AREA]
	@COD_PROCEDENCIA  AS INT
AS
	SELECT TT.codigo,TT.nombre,TT.COD_PROCEDENCIA,TT.ID_TIPO_CARTERA FROM TIPOS_TITULO TT 	
	WHERE TT.COD_PROCEDENCIA = @COD_PROCEDENCIA
GO
/*
Nombre		:	[SP_ConsultarDeudoresExpedienteTitulo]
Descripcion	:	Se consulta
Parametros	:	@NROTITULO Numero de titulo				

Historia	:
VERSION 	FECHA 			AUTOR 					DESCRIPCION
1.00.000	2018/12/13	OSCAR GONZALEZ 			CREACION
*/
CREATE PROCEDURE [dbo].[SP_ConsultarDeudoresExpedienteTitulo]
	@NROTITULO AS BIGINT = null	
AS	
BEGIN
	SELECT  [deudor],
			[NroExp],
			[tipo],	
			[participacion],
			[ID_MAESTRO_TITULOS] 
	FROM [dbo].[DEUDORES_EXPEDIENTES]
	WHERE [ID_MAESTRO_TITULOS] = ISNULL(@NROTITULO,[ID_MAESTRO_TITULOS])
END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE
-- Create date: 31/10/2018
-- Description: INSERTA EL DOCUMENTO
/* EXEC SP_InsertaDocumento
	@ID_DOCUMENTO_TITULO = 0,
	@ID_MAESTRO_TITULO = 15679,
	@DES_RUTA_DOCUMENTO = '',
	@TIPO_RUTA = 1,
	@COD_GUID = 'D68C860F-4063-4D0A-81D5-2A3DE0505454',
	@COD_TIPO_DOCUMENTO_AO = '1',
	@NOM_DOC_AO = 'Prueba DOC 1',
	@OBSERVA_LEGIBILIDAD = '',
	@NUM_PAGINAS = 0 */
-- =============================================
CREATE PROCEDURE [dbo].[SP_InsertaDocumento]
       @ID_DOCUMENTO_TITULO INT,
       @ID_MAESTRO_TITULO BIGINT,
       @DES_RUTA_DOCUMENTO VARCHAR(200),
       @TIPO_RUTA  INT,
       @COD_GUID VARCHAR(50)=NULL,
       @COD_TIPO_DOCUMENTO_AO VARCHAR(50)=null,
       @NOM_DOC_AO VARCHAR(50)=NULL,
       @OBSERVA_LEGIBILIDAD VARCHAR(50)=NULL,
       @NUM_PAGINAS INT=NULL
   AS
BEGIN
	SET NOCOUNT ON
	IF @ID_DOCUMENTO_TITULO > 0 AND (EXISTS (SELECT * FROM [dbo].[MAESTRO_TITULOS_DOCUMENTOS] WHERE  ID_DOCUMENTO_TITULO =  @ID_DOCUMENTO_TITULO AND ID_MAESTRO_TITULO = @ID_MAESTRO_TITULO))
	BEGIN
		-- Se actualiza el documento relacionado para el tipo de documento
		UPDATE  [dbo].[MAESTRO_TITULOS_DOCUMENTOS]
		SET
			[ID_DOCUMENTO_TITULO] = @ID_DOCUMENTO_TITULO
			,[ID_MAESTRO_TITULO] = @ID_MAESTRO_TITULO
			,[DES_RUTA_DOCUMENTO] = @DES_RUTA_DOCUMENTO
			,[TIPO_RUTA] = @TIPO_RUTA
			,[COD_GUID] = ISNULL(@COD_GUID,[COD_GUID])
			,[COD_TIPO_DOCUMENTO_AO] = ISNULL(@COD_TIPO_DOCUMENTO_AO,[COD_TIPO_DOCUMENTO_AO])
			,[NOM_DOC_AO] = ISNULL(@NOM_DOC_AO,[NOM_DOC_AO])
			,[OBSERVA_LEGIBILIDAD] = ISNULL(@OBSERVA_LEGIBILIDAD,[OBSERVA_LEGIBILIDAD])
			,[NUM_PAGINAS] = ISNULL(@NUM_PAGINAS,[NUM_PAGINAS])
		WHERE  ID_DOCUMENTO_TITULO =  @ID_DOCUMENTO_TITULO AND ID_MAESTRO_TITULO = @ID_MAESTRO_TITULO
	END
	ELSE
	BEGIN
		IF @COD_GUID <> '' AND @COD_GUID IS NOT NULL AND (EXISTS (SELECT * FROM [dbo].[MAESTRO_TITULOS_DOCUMENTOS] WHERE COD_GUID = @COD_GUID AND ID_MAESTRO_TITULO = @ID_MAESTRO_TITULO))
		BEGIN
			-- Si es un código GUID se actualiza los datos para el título, solo para los títulos automáticos
			UPDATE  [dbo].[MAESTRO_TITULOS_DOCUMENTOS]
			SET
				[ID_DOCUMENTO_TITULO] = @ID_DOCUMENTO_TITULO
			   ,[ID_MAESTRO_TITULO] = @ID_MAESTRO_TITULO
			   ,[DES_RUTA_DOCUMENTO] = @DES_RUTA_DOCUMENTO
			   ,[TIPO_RUTA] = @TIPO_RUTA
			   ,[COD_GUID] = ISNULL(@COD_GUID,[COD_GUID])
			   ,[COD_TIPO_DOCUMENTO_AO] = ISNULL(@COD_TIPO_DOCUMENTO_AO,[COD_TIPO_DOCUMENTO_AO])
			   ,[NOM_DOC_AO] = ISNULL(@NOM_DOC_AO,[NOM_DOC_AO])
			   ,[OBSERVA_LEGIBILIDAD] = ISNULL(@OBSERVA_LEGIBILIDAD,[OBSERVA_LEGIBILIDAD])
			   ,[NUM_PAGINAS] = ISNULL(@NUM_PAGINAS,[NUM_PAGINAS])
			WHERE  COD_GUID = @COD_GUID AND ID_MAESTRO_TITULO = @ID_MAESTRO_TITULO
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[MAESTRO_TITULOS_DOCUMENTOS]
				([ID_DOCUMENTO_TITULO]
				,[ID_MAESTRO_TITULO]
				,[DES_RUTA_DOCUMENTO]
				,[TIPO_RUTA]
				,[COD_GUID]
				,[COD_TIPO_DOCUMENTO_AO]
				,[NOM_DOC_AO]
				,[OBSERVA_LEGIBILIDAD]
				,[NUM_PAGINAS])
			VALUES
				(CASE
					WHEN @ID_DOCUMENTO_TITULO = 0 THEN NULL
					ELSE @ID_DOCUMENTO_TITULO
				END
				,@ID_MAESTRO_TITULO
				,@DES_RUTA_DOCUMENTO
				,@TIPO_RUTA
				,@COD_GUID
				,@COD_TIPO_DOCUMENTO_AO
				,@NOM_DOC_AO
				,@OBSERVA_LEGIBILIDAD,@NUM_PAGINAS)
		END
	END
 END
GO
-- =============================================
-- Author: Eduar Fabian Hernandez Nieves
-- Create date: 2018-11-14
-- Description: Carga los títulos para el festor de estudio de títulos
--- EXEC [SP_ObtenerTitulosEstudioTitulos] 'MFONG','',0,0,'','','',''
-- =============================================

CREATE PROCEDURE [dbo].[SP_ObtenerTitulosEstudioTitulos] 
   @USULOG AS VARCHAR(20), -- Usuario al cual se le asigno la tarea
   @NROTITULO AS VARCHAR(50) , -- Número de título
   @ESTADOPROCESAL AS INT,
   @ESTADOSOPERATIVO AS INT,
   @FCHENVIOCOBRANZADESDE AS VARCHAR(10),
   @FCHENVIOCOBRANZAHASTA AS VARCHAR(10),
   @NROIDENTIFICACIONDEUDOR AS VARCHAR(50),
   @NOMBREDEUDOR AS VARCHAR (50)
   AS
   
BEGIN                     
      
SET NOCOUNT ON

	SELECT
		MT.idunico AS IDUNICO,
		TA.ID_TAREA_ASIGNADA,
		MT.MT_nro_titulo AS NROTITULO,
		CONVERT(VARCHAR(10),MT.MT_fec_expedicion_titulo,103) AS FCHEXPEDICIONTITULO,
		ED.ED_Nombre AS NOMBREDEUDOR,
		ED.ED_Codigo_Nit AS NRONITCEDULA,
		TT.nombre AS TIPOOBLIGACION,
		(
			MT.MT_valor_obligacion + MT.MT_partida_global + MT.MT_sancion_omision + MT.MT_sancion_inexactitud + MT.MT_sancion_mora
		) AS TOTALOBLIGACION, --Se realiza la suma de los valores
		CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) AS FEC_ENTREGA_GESTOR, 
		CONVERT(VARCHAR(10),FEC_ENTREGA_GESTOR +  TT.DIAS_MAX_GESTION_ROJO,103)  AS FCHLIMITE, 
		CASE WHEN DATEDIFF(DAY ,FEC_ENTREGA_GESTOR  ,GETDATE()) >=  TT.DIAS_MAX_GESTION_ROJO THEN 'ROJO' 
		WHEN DATEDIFF(DAY ,FEC_ENTREGA_GESTOR  ,GETDATE()) >= TT.DIAS_MAX_GESTION_AMARILLO  AND  DATEDIFF(DAY ,FEC_ENTREGA_GESTOR  ,GETDATE()) <  TT.DIAS_MAX_GESTION_ROJO  THEN 'AMARILLO'END
		AS COLOR,
		EO.ID_ESTADO_OPERATIVOS,
		TA.VAL_PRIORIDAD  
	FROM 
		TAREA_ASIGNADA TA
		LEFT JOIN [dbo].[ESTADO_OPERATIVO] EO WITH (NOLOCK) ON TA.COD_ESTADO_OPERATIVO = EO.ID_ESTADO_OPERATIVOS
		LEFT JOIN MAESTRO_TITULOS MT WITH (NOLOCK) ON MT.idunico = TA.ID_UNICO_TITULO
		LEFT JOIN [dbo].[TIPOS_TITULO] TT WITH (NOLOCK) ON TT.codigo = MT.MT_tipo_titulo
		LEFT JOIN [dbo].[DEUDORES_EXPEDIENTES] DE WITH (NOLOCK) ON MT.idunico = DE.ID_MAESTRO_TITULOS
		LEFT JOIN [dbo].[ENTES_DEUDORES] ED WITH (NOLOCK) ON DE.deudor = ED.ED_Codigo_Nit
	WHERE 
		(
			MT.MT_expediente IS NULL OR (MT.MT_expediente IS NOT NULL AND TA.COD_ESTADO_OPERATIVO IN(3, 4, 5, 7, 9, 13)) 
			AND 
			MT.MT_expediente IN(SELECT EFINROEXP FROM EJEFISGLOBAL WHERE EFINROEXP = MT.MT_expediente AND (EFIESTADO IS NULL OR EFIESTADO = 13) )
		)
		AND TA.ID_UNICO_TITULO IS NOT NULL
		AND ((@USULOG IS NULL) OR (VAL_USUARIO_NOMBRE = @USULOG))
		AND ((@NROTITULO = '') OR (MT.MT_nro_titulo LIKE '%' + @NROTITULO + '%'))
		--AND ((@ESTADOPROCESAL IS NULL) OR (col3 = @ESTADOPROCESAL))
		AND ((@ESTADOSOPERATIVO = 0) OR (EO.ID_ESTADO_OPERATIVOS = @ESTADOSOPERATIVO))
		AND ((@FCHENVIOCOBRANZADESDE = '') OR (CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) >= @FCHENVIOCOBRANZADESDE))
		AND ((@FCHENVIOCOBRANZAHASTA = '') OR (CONVERT(VARCHAR(10),TA.FEC_ENTREGA_GESTOR,103) <= @FCHENVIOCOBRANZAHASTA))
		AND ((@NROIDENTIFICACIONDEUDOR = '') OR (UPPER(ED.ED_Codigo_Nit) LIKE '%' + UPPER(@NROIDENTIFICACIONDEUDOR)  + '%'))
		AND ((@NOMBREDEUDOR = '') OR (UPPER(ED.ED_Nombre) LIKE '%' + UPPER(@NOMBREDEUDOR) + '%'))
		AND (TA.COD_ESTADO_OPERATIVO IN(3, 4, 5, 9, 7, 13))
	ORDER BY 
		TA.IND_TITULO_PRIORIZADO DESC, 
		TA.VAL_PRIORIDAD DESC, 
		MT.fechaRevoca ASC, 
		TA.FEC_ENTREGA_GESTOR ASC 
 END
GO
-- =============================================
-- Author:		Edward Fabián Hernández Nieves
-- Create date: 2019-01-11
-- Description:	Procedimiento almacenado que obtiene las solicitudes de cambio de estado pendientes por aprobar
-- EXEC SP_OBTENER_SOLICITUDES_CAMBIO_ESTADO 'ABLANCO', '81433', ''
-- =============================================
CREATE PROCEDURE [dbo].[SP_OBTENER_SOLICITUDES_CAMBIO_ESTADO]
	@USULOG NVARCHAR(20), --Usuario que se encuentra logeado, se toma como revisor
	@EFINROEXP AS NVARCHAR(20) = '',
	@LoginUsuarioSolicitante AS NVARCHAR(20) = ''
AS
BEGIN
	SET NOCOUNT ON;

    SELECT
		SCE.idunico AS ID_SOLICITUD_REASIGNACION,
		SCE.NroExp AS EFINROEXP,
		USUARIO_SOLICITUD = 
			CASE 
				WHEN USUARIO_SOLICITUD.login IS NOT NULL THEN 
					USUARIO_SOLICITUD.nombre
				ELSE 
					GESTOR_SOLICITUD.nombre
			END,
		SCE.FECHA as FECHA_SOLICITUD,
		ESTADOS_PROCESO_ACTUAL.nombre AS ESTADOS_PROCESO_ACTUAL,
		ESTADOS_PROCESO_SOLICITADO.nombre AS ESTADOS_PROCESO_SOLICITADO,
		ESTADO_SOLICITUD.nombre AS ESTADO_SOLICITUD,
		APROBADOR = 
			CASE 
				WHEN USUARIO_APROBADOR.login IS NOT NULL THEN 
					USUARIO_APROBADOR.nombre
				ELSE 
					GESTOR_APROBADOR.nombre
			END
	FROM 
		SOLICITUDES_CAMBIOESTADO AS SCE
		LEFT JOIN ESTADOS_PROCESO AS ESTADOS_PROCESO_ACTUAL ON SCE.estadoactual = ESTADOS_PROCESO_ACTUAL.codigo
		LEFT JOIN ESTADOS_PROCESO AS ESTADOS_PROCESO_SOLICITADO ON SCE.estado = ESTADOS_PROCESO_SOLICITADO.codigo
		LEFT JOIN ESTADOS_SOL_CAM_EST AS ESTADO_SOLICITUD ON SCE.estadosol = ESTADO_SOLICITUD.codigo
		LEFT JOIN TAREA_ASIGNADA AS TA ON SCE.NroExp = TA.EFINROEXP_EXPEDIENTE
		LEFT JOIN TAREA_SOLICITUD AS TS ON TA.ID_TAREA_ASIGNADA = TS.ID_TAREA_ASIGNADA
		LEFT JOIN USUARIOS AS USUARIO_SOLICITUD ON TS.VAL_USUARIO_SOLICITANTE = USUARIO_SOLICITUD.login
		LEFT JOIN USUARIOS AS USUARIO_APROBADOR ON TS.VAL_USUARIO_APROBADOR = USUARIO_APROBADOR.login
		LEFT JOIN USUARIOS AS GESTOR_SOLICITUD ON SCE.abogado = GESTOR_SOLICITUD.codigo
		LEFT JOIN USUARIOS AS GESTOR_APROBADOR ON SCE.revisor = GESTOR_APROBADOR.codigo
	WHERE 
		SCE.estadosol = 1
		AND (USUARIO_APROBADOR.login = @USULOG OR GESTOR_APROBADOR.login = @USULOG)
		AND (@EFINROEXP = '' OR (SCE.NroExp = @EFINROEXP) OR (TA.EFINROEXP_EXPEDIENTE = @EFINROEXP) )
		AND (@LoginUsuarioSolicitante = '' OR (USUARIO_SOLICITUD.login = @LoginUsuarioSolicitante) OR (GESTOR_SOLICITUD.login = @LoginUsuarioSolicitante) )
	ORDER BY aprob_revisor DESC, SCE.FECHA ASC
END
GO
CREATE PROCEDURE [dbo].[PRUEBA_ELIMINAR] 
   
   @ED_TipoId INT OUTPUT
   AS
   
BEGIN      

	SET @ED_TipoId=5454
	RETURN @ED_TipoId

END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[LOG_AUDITORIA_REPARTO_AUTOMATICO]
	-- Add the parameters for the stored procedure here
	@FECHA AS DATETIME, @LOG AS VARCHAR(MAX),@HOST AS VARCHAR(MAX),@IP AS VARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [dbo].[LOG_AUDITORIA]
           ([LOG_USER_ID]
           ,[LOG_USER_CC]
           ,[LOG_HOST]
           ,[LOG_IP]
           ,[LOG_FECHA]
           ,[LOG_APLICACION]
           ,[LOG_MODULO]
           ,[LOG_DOC_AFEC]
           ,[LOG_CONSULTA]
           ,[LOG_NEGOCIO])
     VALUES
           ('Reparto Automatico'
           ,'Servicio Automatico Reparto Titulo y Expedientes'
           ,@HOST
           ,@IP
           ,@FECHA
           ,'Tarea Programada'
           ,'Tarea Programada'
           ,'Tarea Programada'
           ,@LOG
           ,'')
END
GO
-- =============================================
-- Author:		Stefanini - Edward Hernandez
-- Create date: 2018-10-23
-- Description:	Obtener las lista de páginas activas asociadas a un perfil
-- =============================================
CREATE PROCEDURE [dbo].[SP_ObtenerPaginasPorPerfil]
	@ID_PERFIL INT,
	@ID_PARENTPAGE INT = 0
AS
BEGIN
	SET NOCOUNT ON;

	CREATE TABLE #ids ( id INT NOT NULL);

	IF @ID_PARENTPAGE = 0
			INSERT INTO #ids (id)
			SELECT pk_codigo FROM pagina
			WHERE fk_padre IS NULL AND ind_pagina_interna = 0
	ELSE
			INSERT INTO #ids (id)
			SELECT pk_codigo FROM pagina
			WHERE fk_padre = @ID_PARENTPAGE AND ind_pagina_interna = 0

    SELECT 
		p.pk_codigo
		,p.val_nombre
		,p.val_url 
		,p.fk_padre
		,CAST(CASE p.ind_estado WHEN 1 THEN 1 ELSE 0 END AS INT) AS ind_estado
	FROM 
		PAGINA p
	JOIN 
		PERFIL_PAGINA pp ON p.pk_codigo = pp.fk_pagina_id
	WHERE 
		p.ind_estado = 1
		AND pp.fk_perfil_id = @ID_PERFIL
		and pp.ind_puede_ver = 1
		AND p.pk_codigo IN(
			SELECT id FROM #ids
		)
		AND p.ind_pagina_interna = 0

	DROP TABLE #ids
END
GO
-- =============================================
-- Author:		<Luis Mario Lenis Ojeda>
-- Create date: <26-NOV-2018>
-- Description:	<Reparto Automatico de Expedientes>
-- =============================================
CREATE PROCEDURE [dbo].[REPARTO_EXPEDIENTES2]
	-- Add the parameters for the stored procedure here

AS
BEGIN
-- EXEC [REPARTO_EXPEDIENTES2]
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @TABLA TABLE(
Numero_Registro int,
Codigo_Expediente varchar(MAX)
);

DECLARE @TABLA2 TABLE(
Numero_Registro int,
Codigo_Expediente varchar(MAX),
Estado varchar(MAX)
);


    -- Insert statements for procedure here

declare @i int=1;
declare @r int=1;
declare @Tota_Expedientes int;
declare @Total_User int;
declare @login varchar(max);
declare @expediente varchar(max);
declare @estado varchar(max);
declare @estadoBandera varchar(max)='';
declare @bandera int=0;
declare @bande int=0;
declare @validador int=0;

DECLARE @USERS TABLE(
NUMERO_FILA INT,
USUARIO VARCHAR(MAX),
ESTADO VARCHAR(MAX));

DECLARE @USERSDESC TABLE(
NUMERO_FILA INT,
USUARIO VARCHAR(MAX),
ESTADO VARCHAR(MAX));

DECLARE @USERSP TABLE(
NUMERO_FILA INT,
USUARIO VARCHAR(MAX),
ESTADO VARCHAR(MAX));


INSERT INTO @TABLA
SELECT Row_number() 
         OVER ( 
           ORDER BY T.EFINROEXP_EXPEDIENTE),
  T.EFINROEXP_EXPEDIENTE FROM TAREA_ASIGNADA T
 WHERE T.COD_ESTADO_OPERATIVO=10 OR T.COD_ESTADO_OPERATIVO=11 GROUP BY T.EFINROEXP_EXPEDIENTE; 
   
 INSERT INTO @TABLA2
 SELECT Row_number() 
         OVER ( 
           ORDER BY E.EFIESTADO), T.Codigo_Expediente,E.EFIESTADO FROM EJEFISGLOBAL E
 INNER JOIN @TABLA T
 ON T.Codigo_Expediente=E.EFINROEXP 
WHERE E.EFIESTADO IS NOT NULL OR E.EFIESTADO NOT IN('07','08','09')
ORDER BY E.EFIESTADO;

INSERT INTO @USERSP
SELECT Row_number() 
         OVER ( 
           ORDER BY E.COD_ID_ESTADOS_PROCESOS),E.VAL_USUARIO,
		   E.COD_ID_ESTADOS_PROCESOS FROM  ESTADOS_PROCESO_GESTOR E
INNER JOIN USUARIOS U
ON E.VAL_USUARIO=U.LOGIN
WHERE U.ind_gestor_expedientes = 1 
ORDER BY E.COD_ID_ESTADOS_PROCESOS;

 SET @Tota_Expedientes=(SELECT count(*) FROM @TABLA2);

 WHILE  ( @r <= @Tota_Expedientes ) 
 BEGIN 
      SET @expediente=(SELECT Codigo_Expediente 
                   FROM    @TABLA2 
                   WHERE  Numero_Registro = @r); 
	 SET @estado =(SELECT Estado 
                   FROM    @TABLA2 
                   WHERE  Numero_Registro = @r);
	   
	   
	   IF @estado<>@estadoBandera 	   
	   BEGIN
	   DELETE FROM @USERS;
	   DELETE FROM @USERSDESC;
	   INSERT INTO @USERS SELECT  Row_number() 
         OVER ( 
           ORDER BY USUARIO),USUARIO,ESTADO FROM @USERSP WHERE ESTADO=@estado ORDER BY USUARIO;

	   INSERT INTO @USERSDESC SELECT  Row_number() 
         OVER ( 
           ORDER BY USUARIO),USUARIO,ESTADO FROM @USERSP WHERE ESTADO=@estado ORDER BY USUARIO DESC;
	   SET @Total_User=(SELECT COUNT(*) FROM @USERS);	
	   SET @i=1;
	   
	   END
	   
	   IF @bandera = 0 
        BEGIN 
            SET @login=(SELECT usuario 
                        FROM   @USERS 
                        WHERE  numero_fila = @i); 
        END 
      ELSE 
        BEGIN 
            SET @login=(SELECT usuario 
                        FROM   @USERSDESC 
                        WHERE  numero_fila = @i); 
        END 
	  
      IF( @i = @Total_User ) 
        --Validacion de Usuarios vs Total para cambio de orden de los usuarios 
        BEGIN 
            SET @bandera=1; 
            SET @i=1; 
            SET @bande=@bande + 1 
        END 
		ELSE
		BEGIN
		  SET @i=@i + 1; --incremento para asignacion de usuarios 
		END

      IF @bande = 2 --Validacion Seteo de variables 
        BEGIN 
            SET @bandera=0; 
            SET @bande=0; 
        END 
	   SET @estadoBandera=@estado
	   SET @r=@r+1;		
	   
	   UPDATE tarea_asignada 
		SET  VAL_USUARIO_NOMBRE = @login,
		  FEC_ENTREGA_GESTOR=GETDATE(),
		  COD_ESTADO_OPERATIVO=11
      WHERE  EFINROEXP_EXPEDIENTE = @expediente; 
 END
 END
GO
CREATE PROCEDURE [dbo].[SP_ObtenDatosValores] 
      
AS                        
      
BEGIN                     
      
SET NOCOUNT ON       
	SELECT A.ID_TIPO_OBLIGACION_VALORES,
		   B.nombre AS NOMBRETIPO,
		   A.VALOR_OBLIGACION,
		   A.PARTIDA_GLOBAL,
		   A.SANCION_OMISION,
		   A.SANCION_INEXACTITUD,
		   A.SANCION_MORA
	FROM [TIPO_OBLIGACION_VALORES] A INNER JOIN [TIPOS_TITULO] B WITH(NOLOCK) ON A.ID_TIPO_OBLIGACION_VALORES = B.codigo
END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 31/10/2018
-- Description: INSERTA EL DEUDOR
-- =============================================

CREATE PROCEDURE [dbo].[SP_InsertaDeudor] 
   
   @ED_TipoId CHAR(2),
   @ED_Codigo_Nit VARCHAR(13),
   @ED_DigitoVerificacion VARCHAR(1)=NULL,
   @ED_TipoPersona CHAR(2),
   @ED_Nombre  VARCHAR(120),
   @ED_TipoAportante  VARCHAR(120)= NULL, 
   @ED_EstadoPersona VARCHAR(120)=NULL,
   @ED_TarjetaProf  VARCHAR(120)=NULL,
   @ED_IDUNICO_TITULO_MAESTRO INT,
   @TIPO_DEUDOR INT,
   @PARTICIPACION  FLOAT

   AS
   
BEGIN                     
    
SET NOCOUNT ON   

		IF EXISTS (SELECT * FROM [dbo].[ENTES_DEUDORES] WHERE  [ED_Codigo_Nit] = @ED_Codigo_Nit)

		BEGIN

		UPDATE  [dbo].[ENTES_DEUDORES] 
		SET 
		[ED_TipoId] = @ED_TipoId,
        [ED_Codigo_Nit] = @ED_Codigo_Nit,
        [ED_DigitoVerificacion] = @ED_DigitoVerificacion,
        [ED_TipoPersona] = @ED_TipoPersona,
        [ED_Nombre] = @ED_Nombre,
        [ED_EnteReal] = NULL,
        [ED_idzapen] = NULL,
        [ED_Excluir] = NULL,
        [ED_Fecha550] = NULL,
        [ED_EstadoPersona] = @ED_EstadoPersona,
        [ED_TipoAportante] = @ED_TipoAportante,
        [ED_TarjetaProf] = @ED_TarjetaProf
		

		 WHERE [ED_Codigo_Nit] = @ED_Codigo_Nit


		END

		ELSE
			BEGIN
			INSERT INTO [dbo].[ENTES_DEUDORES]
			   ([ED_TipoId]
			   ,[ED_Codigo_Nit]
			   ,[ED_DigitoVerificacion]
			   ,[ED_TipoPersona]
			   ,[ED_Nombre]
			   ,[ED_EnteReal]
			   ,[ED_idzapen]
			   ,[ED_Excluir]
			   ,[ED_Fecha550]
			   ,[ED_EstadoPersona]
			   ,[ED_TipoAportante]
			   ,[ED_TarjetaProf])
		 VALUES
			   (@ED_TipoId,
			   @ED_Codigo_Nit,
			   @ED_DigitoVerificacion,
			   @ED_TipoPersona,
			   @ED_Nombre,
			   NULL,
			   NULL,
			   NULL,
			   NULL,
			   @ED_EstadoPersona,
			   @ED_TipoAportante,
			   @ED_TarjetaProf			
			   )

		END

		

		IF EXISTS (SELECT * FROM [dbo].[DEUDORES_EXPEDIENTES] WHERE  deudor = @ED_Codigo_Nit AND [ID_MAESTRO_TITULOS]= @ED_IDUNICO_TITULO_MAESTRO)
		BEGIN 
			UPDATE [dbo].[DEUDORES_EXPEDIENTES]
			   SET 
				  [tipo] = @TIPO_DEUDOR,
				  [participacion] = @PARTICIPACION
			 WHERE deudor = @ED_Codigo_Nit AND [ID_MAESTRO_TITULOS]= @ED_IDUNICO_TITULO_MAESTRO
		END
		ELSE
		BEGIN 
			INSERT INTO [dbo].[DEUDORES_EXPEDIENTES]
			   ([deudor]
			   ,[tipo]
			   ,[participacion]
			   ,[ID_MAESTRO_TITULOS])
		 VALUES
			   (@ED_Codigo_Nit
			   ,@TIPO_DEUDOR
			   ,@PARTICIPACION
			   ,@ED_IDUNICO_TITULO_MAESTRO)
		END


 END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 15/11/2018
-- Description: INSERTA LA JUSTIFICACIÓN DEL CIERRE DE TÍTULO
-- =============================================


CREATE PROCEDURE [dbo].[SP_InsertaJustificacionCierreTit] 

   @ID_UNICO_MT INT,
   @DESC_JUSTIFICACION_CIERRE VARCHAR(300)

      AS
   
BEGIN                     
      
SET NOCOUNT ON   


DECLARE @IDTAREAASIGNADATITULO INT
DECLARE @IDTAREAASIGNADAEXPEDIENTE INT

 SELECT @IDTAREAASIGNADATITULO = ID_TAREA_ASIGNADA  FROM  TAREA_ASIGNADA WHERE COD_TIPO_OBJ = 4 AND ID_UNICO_TITULO = @ID_UNICO_MT
 
 SELECT @IDTAREAASIGNADAEXPEDIENTE = ID_TAREA_ASIGNADA  FROM  TAREA_ASIGNADA WHERE COD_TIPO_OBJ = 5 AND ID_UNICO_TITULO = @ID_UNICO_MT

		INSERT INTO [dbo].[JUSTITICACION_CIERRE_TITULO]
				   ([ID_UNICO_MT]
				   ,[DESC_JUSTIFICACION_CIERRE]
				   ,[FEC_JUSTIFICACION_CIERRE])
			 VALUES
			 (@ID_UNICO_MT,@DESC_JUSTIFICACION_CIERRE,GETDATE())

	
	IF @IDTAREAASIGNADATITULO <> NULL
	BEGIN
	UPDATE TAREA_ASIGNADA SET COD_ESTADO_OPERATIVO = 20 WHERE ID_TAREA_ASIGNADA = @IDTAREAASIGNADATITULO
	END

	IF @IDTAREAASIGNADAEXPEDIENTE <> NULL
	BEGIN
	UPDATE TAREA_ASIGNADA SET COD_ESTADO_OPERATIVO = 18 WHERE ID_TAREA_ASIGNADA = @IDTAREAASIGNADAEXPEDIENTE
	END

END
GO
-- =============================================
-- Author:		Eduar Fabián Hernández Nieves
-- Create date: 2018-11-16
-- Description:	SP para actualizar el orden de priorización de los títulos asignados a un gestor de estudio de títulos
-- EXEC SP_ACTUALIZAR_PRIORIDAD_TITULOS 'MFONG'
-- =============================================
CREATE PROCEDURE [dbo].[SP_ACTUALIZAR_PRIORIDAD_TITULOS]
	@USULOG AS VARCHAR(20) -- Usuario de quien se lee la priorización
AS
BEGIN
	SET NOCOUNT ON;

	--Asigana todas las tareas con baja prioridad
	UPDATE TAREA_ASIGNADA SET VAL_PRIORIDAD = 0 WHERE VAL_USUARIO_NOMBRE = @USULOG AND COD_TIPO_OBJ = 4
	-- Actualiza la prioridad de las tareas que tienen prioridad
	UPDATE TAREA_ASIGNADA SET VAL_PRIORIDAD = 1 WHERE VAL_USUARIO_NOMBRE  = @USULOG  AND COD_TIPO_OBJ = 4 AND (COD_ESTADO_OPERATIVO IN(7, 9) OR IND_TITULO_PRIORIZADO = 1)

	UPDATE TAREA_ASIGNADA SET VAL_PRIORIDAD = 1 WHERE ID_TAREA_ASIGNADA IN(
		SELECT TOP 1 TA.ID_TAREA_ASIGNADA 
		FROM TAREA_ASIGNADA TA
		JOIN MAESTRO_TITULOS MT ON TA.ID_UNICO_TITULO = MT.idunico
		WHERE 
			(TA.IND_TITULO_PRIORIZADO IS NULL OR TA.IND_TITULO_PRIORIZADO = 0)
			AND TA.VAL_USUARIO_NOMBRE = @USULOG
			AND TA.COD_ESTADO_OPERATIVO IN (4, 5)
			AND COD_TIPO_OBJ = 4
		ORDER BY
			TA.COD_ESTADO_OPERATIVO DESC,
			MT.MT_fec_cad_presc DESC,
			TA.FEC_ENTREGA_GESTOR ASC
	)
END
GO
-- =============================================
-- Author:		<Luis Mario Lenis Ojeda>
-- Create date: <22-Nov-2018>
-- Description:	<ASIGNACIÓN AUTOMATICA DEL REPARTO>
-- =============================================
CREATE PROCEDURE [dbo].[SP_OBTENER_DEUDOR_EXPENDIENTE] 
	-- Add the parameters for the stored procedure here
	@CODIGO_UNICO AS INT
AS
BEGIN
--EXEC [SP_OBTENER_DEUDOR_EXPENDIENTE] 1
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT D.deudor FROM DEUDORES_EXPEDIENTES D WHERE D.ID_MAESTRO_TITULOS=@CODIGO_UNICO;

 
END
GO
CREATE PROCEDURE [dbo].[SP_ALMACENAMIENTO_TEMPORAL_ACTUALIZAR]
	@ID_TAREA_ASIGNADA AS BIGINT,
	@JSON_OBJ AS varchar(max)     
AS
UPDATE [dbo].[ALMACENAMIENTO_TEMPORAL] 
   SET [JSON_OBJ] = @JSON_OBJ,
       [FEC_ACTUALIZACION] = GETDATE()
 WHERE ID_TAREA_ASIGNADA = @ID_TAREA_ASIGNADA
GO
-- =============================================
-- Author:		<Luis Mario Lenis Ojeda>
-- Create date: <19-Nov-2018>
-- Description:	<Designacion de Usuarios Gestores>
-- =============================================
CREATE PROCEDURE [dbo].[ASIGNACION_GESTORES] 
	-- Add the parameters for the stored procedure here
	@USERS AS VARCHAR(200)
AS
BEGIN
 -- EXEC [db_backupoperator].[ASIGNACION_GESTORES] 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	UPDATE USUARIOS  SET ind_gestor_estudios=1 WHERE login=@USERS

END
GO
-- =============================================
-- Author:		Eduar Fabian Hernandezn Nieves - Stefanini
-- Create date: 2018-11-29
-- Description:	Obtener los deudores relacionados con un título
-- EXEC SP_OBTENER_DEUDORES_POR_TITULO 15531
-- =============================================
CREATE PROCEDURE [dbo].[SP_OBTENER_DEUDORES_POR_TITULO]
	@ID_UNICO_TITULO AS INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SET NOCOUNT ON;
	SELECT 
		ed.ED_TipoId
		,ed.ED_Codigo_Nit
		,ed.ED_DigitoVerificacion
		,ed.ED_TipoPersona
		,ed.ED_Nombre
		,ed.ED_EnteReal
		,ed.ED_idzapen
		,ed.ED_Excluir
		,ed.ED_Fecha550
		,ed.ED_EstadoPersona
		,ed.ED_TipoAportante
		,ed.ED_TarjetaProf
		,ed.VAL_NO_MATRICULA_MERCANTIL
	FROM 
		ENTES_DEUDORES ed
	JOIN
		 DEUDORES_EXPEDIENTES de ON ed.ED_Codigo_Nit = de.deudor
	WHERE 
		de.ID_MAESTRO_TITULOS = @ID_UNICO_TITULO
END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 31/10/2018
-- Description: INSERTA NOTIFICACIÓN
-- =============================================

CREATE PROCEDURE [dbo].[SP_InsertaNotificacion] 

      @ID_UNICO_MAESTRO_TITULOS BIGINT,
      @FEC_NOTIFICACION DATETIME,
      @COD_FOR_NOT CHAR(2),
      @COD_TIPO_NOTIFICACION INT

   AS
   
BEGIN                     
    
SET NOCOUNT ON   



INSERT INTO [dbo].[MAESTRO_TITULOS_FOR_NOTIFICACION]
           ([ID_UNICO_MAESTRO_TITULOS]
           ,[FEC_NOTIFICACION]
           ,[COD_FOR_NOT]
           ,[COD_TIPO_NOTIFICACION])
     VALUES
(@ID_UNICO_MAESTRO_TITULOS,@FEC_NOTIFICACION,@COD_FOR_NOT,@COD_TIPO_NOTIFICACION)



 END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 30/10/2018
-- Description: OBTENER LA CONSULTA DE LA PARAMETRIZACIÓN DE LOS VALORES
-- =============================================

CREATE PROCEDURE [dbo].[SP_GuardaDatosValores] 
      
	  @ID_TIPO_OBLIGACION_VALORES VARCHAR(50),
	  @VALOR_OBLIGACION BIT,
      @PARTIDA_GLOBAL BIT,
      @SANCION_OMISION BIT,
      @SANCION_INEXACTITUD BIT,
      @SANCION_MORA BIT = 0 
AS                        
      
BEGIN                     
      
SET NOCOUNT ON       


UPDATE  [dbo].[TIPO_OBLIGACION_VALORES] SET
            [VALOR_OBLIGACION] = @VALOR_OBLIGACION
           ,[PARTIDA_GLOBAL] = @PARTIDA_GLOBAL
           ,[SANCION_OMISION] = @SANCION_OMISION
           ,[SANCION_INEXACTITUD] = @SANCION_INEXACTITUD
           ,[SANCION_MORA] =  @SANCION_MORA
  
  WHERE [ID_TIPO_OBLIGACION_VALORES] = @ID_TIPO_OBLIGACION_VALORES
	 
	
END
GO
-- =============================================
-- Author: CARLOS FELIPE MOTTA MONJE	
-- Create date: 21/11/2018
-- Description: INSERTA LA OBSERVACION DE CUMPLE NO CUMPLE DOCUMENTOS
-- =============================================


CREATE PROCEDURE [dbo].[SP_InsertaObservacionCNCDoc] 

   @ID_UNICO_MT BIGINT,
   @ID_DOCUMENTO BIGINT,
   @USUARIO VARCHAR(100),
   @DESTINATARIO VARCHAR(100),
   @OBSERVACIONES VARCHAR(500),
   @CUMPLENOCUMPLE BIT

      AS
   
BEGIN                     
      
SET NOCOUNT ON   

INSERT INTO [dbo].[OBSERVACIONESDOC_CUMPLE_NOCUMPLE]
           ([ID_UNICO_MT]
           ,[ID_DOCUMENTO]
           ,[USUARIO]
           ,[DESTINATARIO]
           ,[FCHENVIO]
		   ,[CUMPLE_NOCUMPLE]
           ,[OBSERVACIONES])
     VALUES
        (@ID_UNICO_MT,@ID_DOCUMENTO,@USUARIO,@DESTINATARIO,GETDATE(),@CUMPLENOCUMPLE,@OBSERVACIONES)
END
GO
-- =============================================
-- Author:		Stefanini - Oscar Diaz
-- Create date: 2018-11-8
-- Description:	Obtiene datos de homologación
-- =============================================
CREATE PROCEDURE [dbo].[SP_OBTENER_HOMOLOGACION] --'CC',6
	@FUENTE VARCHAR(50),
	@TIPO_HOMOLOGACION  INT
AS
BEGIN
SET NOCOUNT ON;

SELECT TOP 1
	MH.ID_HOMOLOGACION
   ,MH.ID_TIPO_HOMOLOGACION
   ,MH.FUENTE
   ,MH.DESTINO
   ,MH.ACTIVO
FROM dbo.maestro_homologacion mh
INNER JOIN dbo.tipo_homologacion th
	ON th.ID_TIPO_HOMOLOGACION = mh.ID_TIPO_HOMOLOGACION
WHERE mh.ACTIVO = 1
AND mh.ID_TIPO_HOMOLOGACION = @TIPO_HOMOLOGACION
AND mh.FUENTE = @FUENTE
END
GO
-- =============================================
-- Author:		Eduar Fabian Hernandez Nieves - Stefanini
-- Create date: 2018-12-21
-- Description:	Procedimiento almacenado para obtener los expedientes asignados a un gestor
-- EXEC SP_OBTENER_EXPEDIENTES_ASIGNADOS 1, 10, '', '', 'LUROJAS', '', '', '', '', '', '', '', 0, ''
-- =============================================
CREATE PROCEDURE [dbo].[SP_OBTENER_EXPEDIENTES_ASIGNADOS]
	-- Variables de páginación, oblitarias para poblar en GridView en la aplicación
	@StartRecord INT,
	@StopRecord INT,
	--Orden que se le debe dar a la consulta
	@SortExpression VARCHAR(30) = '',
	@SortDirection VARCHAR(10) = '',
	-- Filtros
	@USULOG AS VARCHAR(20) = '', -- Usuario al cual se le asigno el expediente, login del LDAP
	@EFINROEXP VARCHAR(10) = '', -- Número del expediente en cobros y coactivos
	@ED_NOMBRE VARCHAR(120) = '', -- Nombre del deudor
	@EFINIT VARCHAR(13) = '', -- Número de identificación del deudor
	@ESTADOPROC CHAR(2) = '', -- Estado procesal del deudor
	@MT_TIPO_TITULO CHAR(2) = '', -- Tipo de título
	@FECTITULO VARCHAR(10) = '', -- Fecha de entrega del título por parte del área origen
	@FECENTGES VARCHAR(10) = '', -- Fecha de entrega al gestor del título
	@ESTADO_OPERATIVO INT = 0, --Estado operativo del expediente
	@USUNOINCLUIR AS VARCHAR(20) = '' --Usuario que no se debe incluir en los resultados
AS
BEGIN
	SET NOCOUNT ON;

	--Se realiza la priorización de títulos para los gestores
	EXEC SP_ACTUALIZAR_PRIORIDAD_EXPEDIENTES

	IF @SortExpression = ''
	BEGIN
	SET @SortExpression = 'EFINROEXP'
		END

		IF @SortDirection = '' BEGIN
	SET @SortDirection = 'ASC'
		END

		--Se consulta el numero de días máximos para la suspensión
		DECLARE @MaxDiasSuspension AS VARCHAR(10) = ( SELECT
			VAL_VALOR
		FROM DOMINIO_DETALLE
		WHERE VAL_NOMBRE = 'TiempoMaximoSuspension')

	-- Se crea table temporal que muestra los expedientes que están en estudio de títulos y que no están en retono
	SELECT
		DISTINCT E.EFINROEXP AS NroExp
	INTO #ExpedientesRetornoEstudioTitulos
	FROM EJEFISGLOBAL AS E
		JOIN TAREA_ASIGNADA AS TA ON E.EFINROEXP = TA.EFINROEXP_EXPEDIENTE
	WHERE 
		((@USULOG = '') OR (TA.VAL_USUARIO_NOMBRE = @USULOG))
		AND E.EFIESTADO = 13
		AND TA.COD_ESTADO_OPERATIVO = 17

	--Se crea tabla temporal con las fechas de inicio de gestión según la fecha de cambio de estado procesal
	SELECT
		DISTINCT E.EFINROEXP AS NroExp
	   ,MAX(CE.fecha) AS FechaCambioUltimoEstado
	   ,MIN(HTA.FEC_ACTUALIZACION) AS FechaGestionDespuesCambioEstado 
	INTO #FechasInicioGestion
	FROM 
		EJEFISGLOBAL AS E
		JOIN CAMBIOS_ESTADO AS CE ON E.EFINROEXP = CE.NroExp
		JOIN TAREA_ASIGNADA AS TA ON E.EFINROEXP = TA.EFINROEXP_EXPEDIENTE
		JOIN HISTORICO_TAREA_ASIGNADA AS HTA ON TA.ID_TAREA_ASIGNADA = HTA.ID_TAREA_ASIGNADA
	WHERE 
		CE.estado = E.EFIESTADO
		-- Validaciones Obligatorias
		AND TA.EFINROEXP_EXPEDIENTE IS NOT NULL
		AND TA.VAL_USUARIO_NOMBRE IS NOT NULL
		AND TA.VAL_USUARIO_NOMBRE <> ''
		AND TA.COD_ESTADO_OPERATIVO IN (11, 12, 13, 14, 15, 17, 19)
	GROUP BY E.EFINROEXP
			,E.EFIESTADO
			,CE.estado
			,HTA.FEC_ACTUALIZACION
	HAVING HTA.FEC_ACTUALIZACION >= MAX(CE.fecha)
	ORDER BY E.EFINROEXP

	-- Se realizan los filtros dependiendo de los parámetros del SP y se guardan en una tabla temporal
	SELECT
		DISTINCT TAREA_ASIGNADA.ID_TAREA_ASIGNADA AS ID_TAREA_ASIGNADA
	   ,CONVERT(VARCHAR, TAREA_ASIGNADA.EFINROEXP_EXPEDIENTE) EFINROEXP
	   ,EJEFISGLOBAL.EFIFECHAEXP
	   ,EJEFISGLOBAL.EFINIT
	   ,EJEFISGLOBAL.EFIFECENTGES
	   ,EJEFISGLOBAL.EFIFECCAD
	   ,EJEFISGLOBAL.EFIVALDEU
	   ,EJEFISGLOBAL.EFIPAGOSCAP
	   ,EJEFISGLOBAL.EFISALDOCAP
	   ,ESTADOS_PROCESO.CODIGO AS EFIESTADOCODIGO
	   ,ESTADOS_PROCESO.nombre AS EFIESTADO
	   ,ESTADOS_PAGO.nombre AS EFIESTUP
	   ,PERSUASIVO.FecEstiFin
	   ,ENTES_DEUDORES.ED_NOMBRE
	   ,'OK' AS termino
	   ,'      ' AS explicacion
	   ,'                    ' AS PictureURL
	   ,USUARIOS.codigo AS USUARIOSCODIGO
	   ,USUARIOS.nombre AS GESTOR
	   ,
		--TAREA_ASIGNADA.VAL_USUARIO_NOMBRE AS GESTOR,
		TITULOSEJECUTIVOS.MT_tipo_titulo AS MT_TIPO_TITULO
	   ,COALESCE(TITULOSEJECUTIVOS.NomTipoTitulo, '') AS NomTipoTitulo
	   ,ESTADO_OPERATIVO.ID_ESTADO_OPERATIVOS AS COD_ESTADO_OPERATIVO
	   ,ESTADO_OPERATIVO.VAL_NOMBRE AS ESTADO_OPERATIVO
	   ,TAREA_ASIGNADA.VAL_PRIORIDAD AS VAL_PRIORIDAD
	   ,0.00 AS PagoyAjuste
	   ,COLORSUSPENSION = CASE
			WHEN (CONVERT(INT, DATEDIFF(DAY, FEC_ACTUALIZACION, GETDATE())) >= CONVERT(INT, @MaxDiasSuspension) AND TAREA_ASIGNADA.COD_ESTADO_OPERATIVO = 14) 
				THEN 'Rojo'
			ELSE NULL
		END
	   ,COLORALERTA = ( 
			CASE
				WHEN(
					CONVERT(INT, DATEDIFF(DAY, FIG.FechaGestionDespuesCambioEstado, GETDATE())) >= CONVERT(INT, ESTADOS_PROCESO.max_dias_gestion_rojo) 
					AND
					TAREA_ASIGNADA.COD_ESTADO_OPERATIVO IN (11, 12, 13, 14, 15, 17, 19)
				)THEN 'Rojo'
				WHEN(
					(
						CONVERT(INT, DATEDIFF(DAY, FIG.FechaGestionDespuesCambioEstado, GETDATE())) >= CONVERT(INT, ESTADOS_PROCESO.max_dias_gestion_amarillo) 
						AND
						CONVERT(INT, DATEDIFF(DAY, FIG.FechaGestionDespuesCambioEstado, GETDATE())) < CONVERT(INT, ESTADOS_PROCESO.max_dias_gestion_rojo)
					)
					AND TAREA_ASIGNADA.COD_ESTADO_OPERATIVO IN (11, 12, 13, 14, 15, 17, 19)
				) THEN 'Amarillo'
				ELSE NULL
			END
		)	
	   ,FECHALIMITE = (
			SELECT MIN(CAST(MT_fec_exi_liq AS datetime)) 
			FROM MAESTRO_TITULOS 
			WHERE MT_expediente = CONVERT(VARCHAR, TAREA_ASIGNADA.EFINROEXP_EXPEDIENTE)
	   ) --CAST(MT.MT_fec_exi_liq AS DATE) AS FECHALIMITE 
	INTO #ExpedientesAsignados
	FROM TAREA_ASIGNADA
		LEFT JOIN EJEFISGLOBAL ON TAREA_ASIGNADA.EFINROEXP_EXPEDIENTE = EJEFISGLOBAL.EFINROEXP
		LEFT JOIN ESTADOS_PROCESO ON EJEFISGLOBAL.EFIESTADO = ESTADOS_PROCESO.codigo
		LEFT JOIN ESTADOS_PAGO ON EJEFISGLOBAL.EFIESTUP = ESTADOS_PAGO.codigo
		LEFT JOIN PERSUASIVO ON EJEFISGLOBAL.EFINROEXP = PERSUASIVO.NroExp
		LEFT JOIN ENTES_DEUDORES ON EJEFISGLOBAL.EFINIT = ENTES_DEUDORES.ED_Codigo_Nit
		LEFT JOIN USUARIOS ON EJEFISGLOBAL.EFIUSUASIG = USUARIOS.codigo
		LEFT JOIN TITULOSEJECUTIVOS ON EJEFISGLOBAL.EFINROEXP = TITULOSEJECUTIVOS.MT_expediente
		LEFT JOIN ESTADO_OPERATIVO ON TAREA_ASIGNADA.COD_ESTADO_OPERATIVO = ESTADO_OPERATIVO.ID_ESTADO_OPERATIVOS
		LEFT JOIN #FechasInicioGestion AS FIG ON TAREA_ASIGNADA.EFINROEXP_EXPEDIENTE = FIG.NroExp
		LEFT JOIN MAESTRO_TITULOS AS MT ON EJEFISGLOBAL.EFINROEXP = MT.MT_expediente
	WHERE
		-- Filtros
		((@USULOG = '') OR ([TAREA_ASIGNADA].[VAL_USUARIO_NOMBRE] = @USULOG))
		AND ((@USUNOINCLUIR = '') OR ([TAREA_ASIGNADA].[VAL_USUARIO_NOMBRE] <> @USUNOINCLUIR))
		AND ((@EFINROEXP = '') OR (CONVERT(VARCHAR, [TAREA_ASIGNADA].[EFINROEXP_EXPEDIENTE]) = @EFINROEXP))
		AND ((@ED_NOMBRE = '') OR ([ENTES_DEUDORES].[ED_Nombre] LIKE '%' + @ED_NOMBRE + '%'))
		AND ((@EFINIT = '') OR ([EJEFISGLOBAL].[EFINIT] LIKE '%' + @EFINIT + '%'))
		AND ((@ESTADOPROC = '') OR ([EJEFISGLOBAL].[EFIESTADO] = @ESTADOPROC))
		AND ((@MT_TIPO_TITULO = '') OR ([TITULOSEJECUTIVOS].[MT_tipo_titulo] = @MT_TIPO_TITULO))
		AND ((@ESTADO_OPERATIVO = 0) OR ([TAREA_ASIGNADA].[COD_ESTADO_OPERATIVO] = @ESTADO_OPERATIVO))
		AND ((
			(
				(@FECTITULO = '') OR (CONVERT(VARCHAR(10), [TAREA_ASIGNADA].[FEC_ENTREGA_GESTOR], 103) = @FECTITULO))
				AND ((@FECENTGES = '') OR (CONVERT(VARCHAR(10), [TAREA_ASIGNADA].[FEC_ENTREGA_GESTOR], 103) = @FECENTGES))
			)--Se valida sobre la tabla tarea_asiganada los valores que se consultan
			OR
			(
				((@FECTITULO = '') OR (CONVERT(VARCHAR(10), [EJEFISGLOBAL].[EFIFECHAEXP], 103) = @FECTITULO))
				AND ((@FECENTGES = '') OR (CONVERT(VARCHAR(10), [EJEFISGLOBAL].[EFIFECENTGES], 103) = @FECENTGES))
			)--Se valida sobre la tabla ya existente
		)
		-- Condicionales obligatorias
		AND TAREA_ASIGNADA.COD_TIPO_OBJ = 5
		AND TAREA_ASIGNADA.COD_ESTADO_OPERATIVO IN (11, 12, 13, 14, 15, 17, 19)
		AND TAREA_ASIGNADA.VAL_USUARIO_NOMBRE IS NOT NULL
		AND TAREA_ASIGNADA.VAL_USUARIO_NOMBRE <> ''
		AND
		(
			(
				[EJEFISGLOBAL].EFIESTADO <> 13 -- No se incluye los expedientes de estucio de títulos
			)
			OR
			(
				[EJEFISGLOBAL].EFINROEXP IN( SELECT NroExp FROM #ExpedientesRetornoEstudioTitulos)
			)
		)
		
	-- Se cuentan los registros obtenidos
	DECLARE @count VARCHAR(MAX) = (SELECT COUNT(*) FROM #ExpedientesAsignados)
	-- Filtro para paginador
	DECLARE @FilterRows VARCHAR(50) = 'WHERE RecordSetID >= ' + CONVERT(VARCHAR(10), @StartRecord) + ' And RecordSetID <= ' + CONVERT(VARCHAR(10), @StopRecord)
	-- Se arma la consulta para que sea dinámico
	DECLARE @ConsultaExpedientes NVARCHAR(MAX) = 'SELECT * FROM(
														SELECT ROW_NUMBER() OVER (ORDER BY VAL_PRIORIDAD DESC, ' + @SortExpression + ' ' + @SortDirection + ') AS RecordSetID, 
														*,
														' + @count + ' AS RecordSetCount
														FROM #ExpedientesAsignados
													) AS t '
	+ @FilterRows

	-- Se ejecuta la consulta que se arma de forma dinámica
	EXECUTE SP_EXECUTESQL @ConsultaExpedientes

	--Se elimina la tablas temporales
	DROP TABLE #ExpedientesAsignados
	DROP TABLE #FechasInicioGestion
	DROP TABLE #ExpedientesRetornoEstudioTitulos
END
GO
CREATE PROCEDURE [dbo].[SP_TAREA_SOLICITUD_INGRESAR]
	@ID_TAREA_ASIGNADA AS bigint,
	@VAL_USUARIO_SOLICITANTE AS varchar(50),
	@VAL_USUARIO_APROBADOR AS varchar(50),
	@VAL_USUARIO_DESTINO AS varchar(50)=null,
	@VAL_TIPO_SOLICITUD int,
	@COD_SOLICITUD_CAMBIO_ESTADO AS bigint=null,
	@VAL_TIPOLOGIA AS varchar(50)=null,
	@ID_TAREA_OBSERVACION AS INT=null
AS
	 INSERT INTO [dbo].[TAREA_SOLICITUD]
           ([ID_TAREA_ASIGNADA]
           ,[VAL_USUARIO_SOLICITANTE]
           ,[VAL_USUARIO_APROBADOR]
           ,[VAL_USUARIO_DESTINO]
           ,[VAL_TIPO_SOLICITUD]
           ,[COD_SOLICITUD_CAMBIO_ESTADO]
           ,[VAL_TIPOLOGIA]
           ,[ID_TAREA_OBSERVACION])
     VALUES
	 (@ID_TAREA_ASIGNADA,@VAL_USUARIO_SOLICITANTE,@VAL_USUARIO_APROBADOR,@VAL_USUARIO_DESTINO,@VAL_TIPO_SOLICITUD,@COD_SOLICITUD_CAMBIO_ESTADO,@VAL_TIPOLOGIA,@ID_TAREA_OBSERVACION)
	
	SELECT * FROM TAREA_SOLICITUD WHERE ID_TAREA_ASIGNADA= SCOPE_IDENTITY()
GO
